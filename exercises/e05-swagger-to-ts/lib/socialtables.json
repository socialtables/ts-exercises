{
    "swagger": "2.0",
    "info": {
      "title": "Social Tables API Gateway",
      "version": "4.0.0",
      "description": "The Social Tables API"
    },
    "host": "api.socialtables.com",
    "basePath": "/",
    "definitions": {
      "resultPaging-account-service": {
        "type": "object",
        "properties": {
          "after": {
            "type": "string",
            "description": "cursor for next page"
          },
          "before": {
            "type": "string",
            "description": "cursor for previous page"
          }
        }
      },
      "createUpdateAccountSchema-account-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "sf_account_id": {
            "type": "string",
            "maxLength": 18
          },
          "trial": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          },
          "plan_id": {
            "type": "string",
            "maxLength": 191
          },
          "payment_gateway": {
            "type": "string",
            "maxLength": 191
          },
          "payment_gateway_token": {
            "type": "string",
            "maxLength": 191
          }
        },
        "required": [
          "name"
        ]
      },
      "patchAccountSchema-account-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "sf_account_id": {
            "type": "string",
            "maxLength": 18
          },
          "trial": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          },
          "plan_id": {
            "type": "string",
            "maxLength": 191
          },
          "payment_gateway": {
            "type": "string",
            "maxLength": 191
          },
          "payment_gateway_token": {
            "type": "string",
            "maxLength": 191
          }
        }
      },
      "externalOauthProvidersSchema-account-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 191
          },
          "display_name": {
            "type": "string",
            "maxLength": 191
          },
          "lookup_name": {
            "type": "string",
            "maxLength": 18
          }
        },
        "required": [
          "id",
          "display_name",
          "lookup_name"
        ]
      },
      "externalOauthUserTokensSchema-account-service": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "maxLength": 191
          },
          "external_oauth_provider_id": {
            "type": "string",
            "maxLength": 18
          },
          "token": {
            "type": "string",
            "maxLength": 18
          },
          "refresh_token": {
            "type": "string",
            "maxLength": 18
          },
          "bearer_expiration": {
            "type": "string",
            "maxLength": 191
          },
          "refresh_expiration": {
            "type": "string",
            "maxLength": 191
          },
          "external_oauth_account_id": {
            "type": "string",
            "maxLength": 191
          },
          "external_oauth_user_name": {
            "type": "string",
            "maxLength": 191
          }
        },
        "required": [
          "user_id",
          "external_oauth_provider_id",
          "refresh_token",
          "bearer_expiration",
          "refresh_expiration"
        ]
      },
      "createUpdateInvitation-account-service": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "invited_by": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "maxLength": 191,
            "enum": [
              "pending",
              "accepted",
              "deleted"
            ]
          },
          "object_type": {
            "type": "string"
          },
          "object_id": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          }
        },
        "required": [
          "email",
          "invited_by"
        ]
      },
      "acceptInvitationForNewUser-account-service": {
        "type": "object",
        "properties": {
          "invitation_code": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        },
        "required": [
          "invitation_code",
          "user_id"
        ],
        "additionalProperties": false
      },
      "acceptInvitationForExtantUser-account-service": {
        "type": "object",
        "properties": {
          "invitation_code": {
            "type": "string"
          },
          "new_user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "sortable_name": {
                "type": "string"
              },
              "addressable_name": {
                "type": "string"
              },
              "email": {
                "type": "string",
                "format": "email"
              },
              "password": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "sortable_name",
              "addressable_name",
              "email",
              "password"
            ]
          }
        },
        "required": [
          "invitation_code",
          "new_user"
        ],
        "additionalProperties": false
      },
      "patchInvitation-account-service": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "invited_by": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "maxLength": 191,
            "enum": [
              "pending",
              "accepted",
              "deleted"
            ]
          },
          "object_type": {
            "type": "string"
          },
          "object_id": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "teamMigrationRequest-account-service": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "parent_team_id": {
              "type": "integer"
            },
            "descendant_team_ids": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "name": {
              "type": "string"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            },
            "sf_account_id": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ]
        }
      },
      "userTeamMigrationRequest-account-service": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "email_address": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "is_admin": {
                "type": "integer"
              },
              "team_id": {
                "type": "integer"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "sf_contact_id": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "auth_id": {
                "type": "integer"
              },
              "auth_type": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "email_address",
              "first_name",
              "last_name"
            ]
          },
          "password": {
            "type": "string"
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "parent_team_id": {
                  "type": "integer"
                },
                "descendant_team_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                "name": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "account_products": {
                  "type": "object"
                },
                "internal_account_settings": {
                  "type": "object"
                },
                "sf_account_id": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          }
        },
        "required": [
          "user",
          "teams"
        ]
      },
      "userUpdateRequest-account-service": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "email_address": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "is_admin": {
                "type": "integer"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "sf_contact_id": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "user"
        ]
      },
      "oauthClientUpdate-account-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string",
            "format": "uri",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "allowed_grant_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowed_scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "team_id": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "name",
          "allowed_grant_types",
          "allowed_scopes"
        ]
      },
      "refreshToken-account-service": {
        "properties": {
          "id": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "integration_client_id": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issued_at": {
            "type": "string",
            "format": "date-time"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "client_id",
          "token",
          "scopes",
          "expires_at"
        ]
      },
      "plansSchema-account-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 191
          },
          "plan_name": {
            "type": "string",
            "maxLength": 191
          },
          "display_name": {
            "type": "string",
            "maxLength": 191
          }
        },
        "required": [
          "id",
          "plan_name"
        ]
      },
      "productSchema-account-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 191
          },
          "product_name": {
            "type": "string",
            "maxLength": 200
          },
          "display_name": {
            "type": "string",
            "maxLength": 200
          }
        },
        "required": [
          "id",
          "product_name",
          "display_name"
        ]
      },
      "getProductsSchema-account-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 191
          },
          "product_name": {
            "type": "string",
            "maxLength": 200
          },
          "display_name": {
            "type": "string",
            "maxLength": 200
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "dependent_products": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "product_name": {
                  "type": "string",
                  "maxLength": 200
                },
                "id": {
                  "type": "string",
                  "maxLength": 191
                }
              }
            }
          }
        },
        "required": [
          "id",
          "product_name",
          "display_name"
        ]
      },
      "productDependenciesSchema-account-service": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string",
            "maxLength": 191
          },
          "dependency_id": {
            "type": "string",
            "maxLength": 191
          }
        }
      },
      "createProductSchema-account-service": {
        "type": "object",
        "properties": {
          "product_name": {
            "type": "string",
            "maxLength": 200
          },
          "display_name": {
            "type": "string",
            "maxLength": 200
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "product_name",
          "display_name"
        ]
      },
      "roleAssignmentBody-account-service": {
        "type": "object",
        "required": [
          "context",
          "subject_id",
          "object_id"
        ],
        "properties": {
          "context": {
            "type": "string"
          },
          "subject_id": {
            "type": "string"
          },
          "object_id": {
            "type": "string"
          },
          "expiration": {
            "type": "string"
          }
        }
      },
      "roleUpdateBody-account-service": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "expiration": {
            "type": "string"
          }
        },
        "required": [
          "role"
        ]
      },
      "roleReplacementBody-account-service": {
        "type": "object",
        "required": [
          "roles"
        ],
        "properties": {
          "roles": {
            "type": "object",
            "required": [
              "newRoles",
              "oldRoles"
            ],
            "properties": {
              "newRoles": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "context",
                    "subject_id",
                    "object_id"
                  ],
                  "properties": {
                    "context": {
                      "type": "string"
                    },
                    "subject_id": {
                      "type": "string"
                    },
                    "object_id": {
                      "type": "string"
                    },
                    "expiration": {
                      "type": "string"
                    }
                  }
                }
              },
              "oldRoles": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "context",
                    "subject_id",
                    "object_id"
                  ],
                  "properties": {
                    "context": {
                      "type": "string"
                    },
                    "subject_id": {
                      "type": "string"
                    },
                    "object_id": {
                      "type": "string"
                    },
                    "expiration": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "rolePermissions-account-service": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "maxLength": 191
          },
          "role": {
            "type": "string",
            "maxLength": 191
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 191
            }
          }
        },
        "required": [
          "context",
          "role",
          "permissions"
        ]
      },
      "teamProductAccessMapping-account-service": {
        "type": "object",
        "description": "Map from product name to current access state.",
        "additionalProperties": {
          "type": "string",
          "enum": [
            "active",
            "inactive",
            "view-only"
          ]
        }
      },
      "teamProductAccessDetails-account-service": {
        "type": "object",
        "description": "Map from product name to full access schedule.",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "start_date": {
              "type": "string",
              "format": "date-time",
              "description": "Optional date at which product access should begin."
            },
            "expiration_date": {
              "type": "string",
              "format": "date-time",
              "description": "Optional date at which a product should expire. Null specifies indefinite access."
            },
            "product_id": {
              "type": "string",
              "description": "id of the product."
            },
            "status": {
              "$ref": "#/definitions/teamProductAccessMapping-account-service"
            },
            "expiration_type": {
              "$ref": "#/definitions/teamProductExpirationType-account-service"
            }
          }
        }
      },
      "teamsProductAccessDetails-account-service": {
        "type": "object",
        "description": "Map from team ID to product access map.",
        "additionalProperties": {
          "type": "object",
          "description": "Map from product name to full access schedule.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "start_date": {
                "type": "string",
                "format": "date-time",
                "description": "Optional date at which product access should begin."
              },
              "expiration_date": {
                "type": "string",
                "format": "date-time",
                "description": "Optional date at which a product should expire. Null specifies indefinite access."
              },
              "product_id": {
                "type": "string",
                "description": "id of the product."
              },
              "status": {
                "$ref": "#/definitions/teamProductAccessMapping-account-service"
              },
              "expiration_type": {
                "$ref": "#/definitions/teamProductExpirationType-account-service"
              }
            }
          }
        }
      },
      "teamProductAccessUpdate-account-service": {
        "type": "object",
        "description": "Map from product id to access update.",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "start_date": {
              "type": "string",
              "format": "date-time",
              "description": "Optional date at which product access should begin."
            },
            "expiration_date": {
              "type": "string",
              "format": "date-time",
              "description": "Optional date at which a product should expire. Null specifies indefinite access."
            },
            "expiration_type": {
              "$ref": "#/definitions/teamProductExpirationType-account-service"
            }
          },
          "additionalProperties": false
        }
      },
      "teamProductExpirationType-account-service": {
        "type": "string",
        "enum": [
          "soft-expire",
          "view-only",
          "access-denied"
        ],
        "description": "Type of product expiration."
      },
      "namespacedTeamSettings-account-service": {
        "type": "object",
        "additionalProperties": {
          
        }
      },
      "namespacedTeamSettingsUpdate-account-service": {
        "type": "object",
        "additionalProperties": {
          
        }
      },
      "fullTeamSettings-account-service": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/namespacedTeamSettingsUpdate-account-service"
        }
      },
      "resultTeamBulkAddUser-account-service": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "added": {
            "type": "string"
          },
          "failed": {
            "type": "string"
          }
        }
      },
      "getTeamResult-account-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "descendant_team_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 191
            }
          },
          "parent_team_id": {
            "type": "string"
          }
        }
      },
      "createUpdateTeam-account-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "descendant_team_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 191
            }
          },
          "parent_team_id": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "updateTeam-account-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "descendant_team_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 191
            }
          },
          "parent_team_id": {
            "type": "string"
          }
        }
      },
      "createUserSchema-account-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "full name of user"
          },
          "sortable_name": {
            "type": "string",
            "description": "last name of user"
          },
          "addressable_name": {
            "type": "string",
            "description": "first name of user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "email address"
          },
          "sf_contact_id": {
            "type": "string",
            "pattern": "^003E[a-zA-Z0-9](?:.{15}|.{18})$",
            "format": "string",
            "description": "salesforce contact ID"
          },
          "phone_number": {
            "type": "string",
            "format": "string",
            "description": "phone number of user"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "sortable_name",
          "addressable_name",
          "email",
          "password"
        ]
      },
      "updateUserSchema-account-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "full name of user"
          },
          "sortable_name": {
            "type": "string",
            "description": "last name of user"
          },
          "addressable_name": {
            "type": "string",
            "description": "first name of user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "email address"
          },
          "sf_contact_id": {
            "type": "string",
            "pattern": "^003E[a-zA-Z0-9](?:.{15}|.{18})$",
            "format": "string",
            "description": "salesforce contact ID"
          },
          "phone_number": {
            "type": "string",
            "format": "string",
            "description": "phone number of user"
          }
        },
        "required": [
          "name",
          "sortable_name",
          "addressable_name",
          "email"
        ]
      },
      "resultUserSchema-account-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "full name of user"
          },
          "sortable_name": {
            "type": "string",
            "description": "last name of user"
          },
          "addressable_name": {
            "type": "string",
            "description": "first name of user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "email address"
          },
          "sf_contact_id": {
            "type": "string",
            "pattern": "^003E[a-zA-Z0-9](?:.{15}|.{18})$",
            "format": "string",
            "description": "salesforce contact ID"
          },
          "phone_number": {
            "type": "string",
            "format": "string",
            "description": "phone number of user"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "createTrialUserSchema-account-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "full name of user"
          },
          "sortable_name": {
            "type": "string",
            "description": "last name of user"
          },
          "addressable_name": {
            "type": "string",
            "description": "first name of user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "email address"
          },
          "sf_contact_id": {
            "type": "string",
            "pattern": "^003E[a-zA-Z0-9](?:.{15}|.{18})$",
            "format": "string",
            "description": "salesforce contact ID"
          },
          "phone_number": {
            "type": "string",
            "format": "string",
            "description": "phone number of user"
          },
          "password": {
            "type": "string"
          },
          "legacy_team_id": {
            "type": "integer"
          }
        },
        "required": [
          "name",
          "sortable_name",
          "addressable_name",
          "email",
          "password"
        ]
      },
      "resultTrialUserSchema-account-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "full name of user"
          },
          "sortable_name": {
            "type": "string",
            "description": "last name of user"
          },
          "addressable_name": {
            "type": "string",
            "description": "first name of user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "email address"
          },
          "sf_contact_id": {
            "type": "string",
            "pattern": "^003E[a-zA-Z0-9](?:.{15}|.{18})$",
            "format": "string",
            "description": "salesforce contact ID"
          },
          "phone_number": {
            "type": "string",
            "format": "string",
            "description": "phone number of user"
          },
          "id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          },
          "account_id": {
            "type": "string"
          }
        }
      },
      "patchUserSchema-account-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "full name of user"
          },
          "sortable_name": {
            "type": "string",
            "description": "last name of user"
          },
          "addressable_name": {
            "type": "string",
            "description": "first name of user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "email address"
          },
          "sf_contact_id": {
            "type": "string",
            "pattern": "^003E[a-zA-Z0-9](?:.{15}|.{18})$",
            "format": "string",
            "description": "salesforce contact ID"
          },
          "phone_number": {
            "type": "string",
            "format": "string",
            "description": "phone number of user"
          },
          "account_id": {
            "type": "string"
          }
        }
      },
      "app-account-service": {
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string"
          },
          "settings": {
            "type": "string"
          },
          "failed": {
            "type": "string"
          }
        },
        "required": [
          "app_id",
          "settings"
        ]
      },
      "aisle_diff-diagram-service": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer"
          },
          "floorElementsBetween": {
            "type": "integer"
          }
        }
      },
      "aisle-diagram-service": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer"
          },
          "floorElementsBetween": {
            "type": "integer"
          }
        },
        "required": [
          "width"
        ]
      },
      "aisles_diff-diagram-service": {
        "type": "object",
        "properties": {
          "vertical": {
            "$ref": "#/definitions/aisle_diff-diagram-service"
          },
          "horizontal": {
            "$ref": "#/definitions/aisle_diff-diagram-service"
          }
        }
      },
      "aisles-diagram-service": {
        "type": "object",
        "properties": {
          "vertical": {
            "$ref": "#/definitions/aisle-diagram-service"
          },
          "horizontal": {
            "$ref": "#/definitions/aisle-diagram-service"
          }
        },
        "required": [
          "vertical",
          "horizontal"
        ]
      },
      "chair_diff-diagram-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "dimensions": {
            "$ref": "#/definitions/chair_dimensions_diff-diagram-service"
          },
          "side": {
            "type": "integer"
          },
          "side_index": {
            "type": "integer"
          },
          "orientation": {
            "type": "string",
            "enum": [
              "top",
              "bottom",
              "left",
              "right",
              "default"
            ]
          },
          "guest_id": {
            "type": "string"
          },
          "custom_chair_id": {
            "type": "string"
          }
        }
      },
      "chair_dimensions_diff-diagram-service": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer"
          },
          "length": {
            "type": "integer"
          }
        }
      },
      "chair_dimensions-diagram-service": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer"
          },
          "length": {
            "type": "integer"
          }
        },
        "required": [
          "width",
          "length"
        ]
      },
      "chair_sides-diagram-service": {
        "type": "object",
        "properties": {
          "side_1_count": {
            "type": "integer"
          },
          "side_2_count": {
            "type": "integer"
          },
          "side_3_count": {
            "type": "integer"
          },
          "side_4_count": {
            "type": "integer"
          }
        }
      },
      "chair_template-diagram-service": {
        "type": "object",
        "properties": {
          "size": {
            "$ref": "#/definitions/chair_dimensions_diff-diagram-service"
          }
        }
      },
      "chair-diagram-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "dimensions": {
            "$ref": "#/definitions/chair_dimensions-diagram-service"
          },
          "side": {
            "type": "integer"
          },
          "side_index": {
            "type": "integer"
          },
          "orientation": {
            "type": "string",
            "enum": [
              "top",
              "bottom",
              "left",
              "right",
              "default"
            ]
          },
          "guest_id": {
            "type": "string"
          },
          "custom_chair_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "side_index"
        ]
      },
      "column-diagram-service": {
        "type": "object",
        "properties": {
          "spacing": {
            "type": "integer"
          }
        }
      },
      "diagram_auto_seat-diagram-service": {
        "type": "object",
        "properties": {
          "guests": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/guest-diagram-service"
            }
          },
          "floor_elements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "update_id": {
            "type": "string"
          }
        },
        "required": [
          "guests"
        ]
      },
      "diagram_clone-diagram-service": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "integer"
          },
          "event_id": {
            "type": "string"
          },
          "legacy_event_id": {
            "type": "integer"
          }
        },
        "required": [
          "space_id"
        ]
      },
      "diagram_patch-diagram-service": {
        "type": "object",
        "properties": {
          "external_diagram_id": {
            "type": "string"
          },
          "external_event_id": {
            "type": "string"
          },
          "guestlist_id": {
            "type": "string"
          },
          "floor_elements": {
            "type": "object",
            "properties": {
              "updates": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/floor_element_diff-diagram-service"
                }
              },
              "inserts": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/floor_element-diagram-service"
                }
              },
              "deletes": {
                "type": "object",
                "additionalProperties": {
                  "type": "boolean"
                }
              }
            }
          },
          "groups": {
            "type": "object",
            "properties": {
              "updates": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/group_diff-diagram-service"
                }
              },
              "inserts": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/groups-diagram-service"
                }
              },
              "deletes": {
                "type": "object",
                "additionalProperties": {
                  "type": "boolean"
                }
              }
            }
          },
          "sections": {
            "type": "object",
            "properties": {
              "updates": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/section_diff-diagram-service"
                }
              },
              "inserts": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/sections-diagram-service"
                }
              },
              "deletes": {
                "type": "object",
                "additionalProperties": {
                  "type": "boolean"
                }
              }
            }
          },
          "floorPlan": {
            "$ref": "#/definitions/floor_plan-diagram-service"
          },
          "name": {
            "type": "string"
          },
          "team_uploads_id": {
            "type": "string"
          },
          "width": {
            "type": "number"
          },
          "length": {
            "type": "number"
          },
          "deleted": {
            "type": "boolean"
          },
          "rotation": {
            "type": "integer"
          },
          "prefunction_perimeter": {
            "type": "integer"
          },
          "service_perimeter": {
            "type": "integer"
          },
          "notes": {
            "type": "string"
          },
          "update_id": {
            "type": "string"
          },
          "layout_id": {
            "type": "string"
          },
          "return_diagram": {
            "type": "boolean"
          },
          "table_numbering": {
            "$ref": "#/definitions/table_numbering-diagram-service"
          },
          "boundary_visibility": {
            "type": "object",
            "properties": {
              "inserts": {
                "type": "object",
                "additionalProperties": {
                  "type": "boolean"
                }
              },
              "updates": {
                "type": "object",
                "additionalProperties": {
                  "type": "boolean"
                }
              },
              "deletes": {
                "type": "object",
                "additionalProperties": {
                  "type": "boolean"
                }
              }
            }
          },
          "roomSettings": {
            "$ref": "#/definitions/room_settings-diagram-service"
          }
        }
      },
      "diagram_reorder_result-diagram-service": {
        "type": "object",
        "properties": {
          "sort_order": {
            "type": "number"
          }
        },
        "required": [
          "sort_order"
        ]
      },
      "diagram_reorder-diagram-service": {
        "type": "object",
        "properties": {
          "targetIndex": {
            "type": "integer"
          }
        },
        "required": [
          "targetIndex"
        ]
      },
      "diagram_seat-diagram-service": {
        "type": "object",
        "properties": {
          "guest_seats": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/guest_seat-diagram-service"
            }
          },
          "update_id": {
            "type": "string"
          }
        },
        "required": [
          "guest_seats"
        ]
      },
      "diagram-diagram-service": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "integer"
          },
          "session_id": {
            "type": "string"
          },
          "team_uploads_id": {
            "type": "string"
          },
          "event_id": {
            "type": "string"
          },
          "legacy_event_id": {
            "type": "integer"
          },
          "team_id": {
            "type": "string"
          },
          "guestlist_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "floorPlan": {
            "$ref": "#/definitions/floor_plan-diagram-service"
          },
          "width": {
            "type": "number"
          },
          "length": {
            "type": "number"
          },
          "rotation": {
            "type": "integer"
          },
          "prefunction_perimeter": {
            "type": "integer"
          },
          "service_perimeter": {
            "type": "integer"
          },
          "notes": {
            "type": "string"
          },
          "floor_elements": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/floor_element-diagram-service"
            }
          },
          "groups": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/groups-diagram-service"
            }
          },
          "sections": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/sections-diagram-service"
            }
          },
          "update_id": {
            "type": "string"
          },
          "layout_id": {
            "type": "string"
          },
          "return_diagram": {
            "type": "boolean"
          },
          "table_numbering": {
            "$ref": "#/definitions/table_numbering-diagram-service"
          },
          "boundary_visibility": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "sort_order": {
            "type": "number"
          },
          "external_diagram_id": {
            "type": "string"
          },
          "external_event_id": {
            "type": "string"
          }
        },
        "required": [
          "event_id"
        ]
      },
      "diagrams_clone-diagram-service": {
        "type": "object",
        "properties": {
          "event_id": {
            "type": "string"
          },
          "legacy_event_id": {
            "type": "integer"
          },
          "old_to_new_space_id_map": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          }
        },
        "required": [
          "event_id",
          "old_to_new_space_id_map"
        ]
      },
      "dimensions-diagram-service": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer"
          },
          "length": {
            "type": "integer"
          },
          "radius": {
            "type": "integer"
          }
        }
      },
      "favorite_patch-diagram-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "favorite-diagram-service": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          },
          "legacy_user_id": {
            "type": "integer"
          },
          "team_id": {
            "type": "string"
          },
          "legacy_team_id": {
            "type": "integer"
          },
          "space_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "floor_elements": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/floor_element-diagram-service"
            }
          }
        },
        "required": [
          "name",
          "floor_elements"
        ]
      },
      "fire_code-diagram-service": {
        "type": "object",
        "properties": {
          "attendeeCount": {
            "type": "integer"
          },
          "maxCapacity": {
            "type": "integer"
          },
          "exitingRequired": {
            "type": "integer"
          },
          "totalExiting": {
            "type": "integer"
          },
          "usableSpace": {
            "type": "integer"
          }
        }
      },
      "floor_element_diff-diagram-service": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string"
          },
          "dimensions": {
            "$ref": "#/definitions/dimensions-diagram-service"
          },
          "group_id": {
            "type": "string"
          },
          "section_id": {
            "type": "string"
          },
          "is_locked": {
            "type": "boolean"
          },
          "deleted": {
            "type": "boolean"
          },
          "layer": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "number": {
            "type": "integer"
          },
          "object_meta": {
            "$ref": "#/definitions/object_meta_diff-diagram-service"
          },
          "table_meta": {
            "$ref": "#/definitions/table_meta_diff-diagram-service"
          },
          "position": {
            "$ref": "#/definitions/position_diff-diagram-service"
          },
          "rotation": {
            "type": "integer"
          },
          "layout": {
            "type": "string"
          },
          "font_size": {
            "type": "integer"
          },
          "objectLabelType": {
            "type": "string",
            "enum": [
              "text",
              "icon"
            ]
          },
          "isObjectLabelToggled": {
            "type": "boolean"
          },
          "objectLabelSize": {
            "type": "integer"
          }
        }
      },
      "floor_element-diagram-service": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string"
          },
          "dimensions": {
            "$ref": "#/definitions/dimensions-diagram-service"
          },
          "group_id": {
            "type": "string"
          },
          "section_id": {
            "type": "string"
          },
          "is_locked": {
            "type": "boolean"
          },
          "layer": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "number": {
            "type": "integer"
          },
          "object_meta": {
            "$ref": "#/definitions/object_meta-diagram-service"
          },
          "table_meta": {
            "$ref": "#/definitions/table_meta-diagram-service"
          },
          "position": {
            "$ref": "#/definitions/position-diagram-service"
          },
          "rotation": {
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "layout": {
            "type": "string"
          },
          "font_size": {
            "type": "integer"
          },
          "objectLabelType": {
            "type": "string",
            "enum": [
              "text",
              "icon"
            ]
          },
          "isObjectLabelToggled": {
            "type": "boolean"
          },
          "objectLabelSize": {
            "type": "integer"
          }
        },
        "required": [
          "color",
          "dimensions",
          "layer",
          "position",
          "rotation",
          "id",
          "layout"
        ]
      },
      "floor_plan-diagram-service": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "bookableRoom",
              "spaceTemplate",
              "image",
              "background"
            ]
          },
          "id": {
            "type": "integer"
          },
          "url": {
            "type": "string"
          },
          "background_type": {
            "type": "string"
          }
        }
      },
      "full_line_connection-diagram-service": {
        "type": "object",
        "properties": {
          "head": {
            "$ref": "#/definitions/line_connection-diagram-service"
          },
          "tail": {
            "$ref": "#/definitions/line_connection-diagram-service"
          }
        },
        "required": [
          "head",
          "tail"
        ]
      },
      "group_diff-diagram-service": {
        "type": "object",
        "properties": {
          "template_config": {
            "$ref": "#/definitions/template_config_diff-diagram-service"
          },
          "favorite_id": {
            "type": "string"
          },
          "groupRotation": {
            "type": "integer"
          }
        }
      },
      "groups-diagram-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "favorite_id": {
            "type": "string"
          },
          "template_config": {
            "$ref": "#/definitions/template_config-diagram-service"
          },
          "groupRotation": {
            "type": "integer"
          }
        },
        "required": [
          "id"
        ]
      },
      "guest_seat-diagram-service": {
        "type": "object",
        "properties": {
          "floor_element_id": {
            "type": "string"
          },
          "chair_id": {
            "type": "string"
          },
          "guest_id": {
            "type": "string"
          }
        },
        "required": [
          "floor_element_id",
          "chair_id"
        ]
      },
      "guest-diagram-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "group_id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "head_line_connection-diagram-service": {
        "type": "object",
        "properties": {
          "head": {
            "$ref": "#/definitions/line_connection-diagram-service"
          },
          "tail": {
            "$ref": "#/definitions/line_connection-diagram-service"
          }
        },
        "required": [
          "head"
        ]
      },
      "layout_clone-diagram-service": {
        "type": "object",
        "properties": {
          "team_id": {
            "type": "string"
          },
          "legacy_team_id": {
            "type": "integer"
          }
        }
      },
      "layout_patch-diagram-service": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "proposeMetadata": {
            "type": "object",
            "properties": {
              "capacity": {
                "type": "integer"
              }
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "layout-diagram-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "rotation": {
            "type": "integer"
          },
          "length": {
            "type": "integer"
          },
          "width": {
            "type": "integer"
          },
          "team_id": {
            "type": "string"
          },
          "space_id": {
            "type": "integer"
          },
          "legacy_team_id": {
            "type": "integer"
          },
          "space_template_id": {
            "type": "integer"
          },
          "bookable_room_id": {
            "type": "integer"
          },
          "floor_elements": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/floor_element-diagram-service"
            }
          },
          "groups": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/groups-diagram-service"
            }
          }
        },
        "required": [
          "name",
          "floor_elements"
        ]
      },
      "line_connection-diagram-service": {
        "type": "object",
        "properties": {
          "object_id": {
            "type": "string"
          },
          "ratio_x": {
            "type": "integer"
          },
          "ratio_y": {
            "type": "integer"
          }
        },
        "required": [
          "object_id",
          "ratio_x",
          "ratio_y"
        ]
      },
      "line_connections-diagram-service": {
        "type": "object",
        "$ref": "#/definitions/full_line_connection-diagram-service"
      },
      "meta_diff-diagram-service": {
        "type": "object",
        "properties": {
          "rows": {
            "type": "integer"
          },
          "cols": {
            "type": "integer"
          }
        }
      },
      "meta-diagram-service": {
        "type": "object",
        "properties": {
          "rows": {
            "type": "integer"
          },
          "cols": {
            "type": "integer"
          }
        },
        "required": [
          "rows",
          "cols"
        ]
      },
      "object_meta_diff-diagram-service": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string"
          },
          "legacy_id": {
            "type": "integer"
          },
          "path_def": {
            "type": "string"
          },
          "steps": {
            "type": "integer"
          },
          "tile_dimensions": {
            "$ref": "#/definitions/dimensions-diagram-service"
          },
          "line_thickness": {
            "type": "integer"
          },
          "tents": {
            "$ref": "#/definitions/tents_diff-diagram-service"
          },
          "rope_number": {
            "type": "integer"
          },
          "connections": {
            "$ref": "#/definitions/line_connections-diagram-service"
          },
          "projector_image_type": {
            "type": "string"
          }
        }
      },
      "object_meta-diagram-service": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string"
          },
          "legacy_id": {
            "type": "integer"
          },
          "path_def": {
            "type": "string"
          },
          "steps": {
            "type": "integer"
          },
          "tile_dimensions": {
            "$ref": "#/definitions/dimensions-diagram-service"
          },
          "line_thickness": {
            "type": "integer"
          },
          "tents": {
            "$ref": "#/definitions/tents-diagram-service"
          },
          "rope_number": {
            "type": "integer"
          },
          "connections": {
            "$ref": "#/definitions/line_connections-diagram-service"
          },
          "projector_image_type": {
            "type": "string"
          }
        }
      },
      "position_diff-diagram-service": {
        "type": "object",
        "properties": {
          "x": {
            "type": "integer"
          },
          "y": {
            "type": "integer"
          }
        }
      },
      "position-diagram-service": {
        "type": "object",
        "properties": {
          "x": {
            "type": "integer"
          },
          "y": {
            "type": "integer"
          }
        },
        "required": [
          "x",
          "y"
        ]
      },
      "room_details-diagram-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "width": {
            "type": "integer"
          },
          "length": {
            "type": "integer"
          },
          "rotation": {
            "type": "integer"
          },
          "serviceAreaPerimeter": {
            "type": "integer"
          },
          "addedDimension": {
            "type": "integer"
          }
        }
      },
      "room_settings-diagram-service": {
        "type": "object",
        "properties": {
          "fireCode": {
            "$ref": "#/definitions/fire_code-diagram-service"
          },
          "details": {
            "$ref": "#/definitions/room_details-diagram-service"
          }
        }
      },
      "section_diff-diagram-service": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "template_config": {
            "$ref": "#/definitions/template_config_diff-diagram-service"
          }
        }
      },
      "sections-diagram-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "template_config": {
            "$ref": "#/definitions/template_config-diagram-service"
          }
        },
        "required": [
          "id"
        ]
      },
      "spacing_diff-diagram-service": {
        "type": "object",
        "properties": {
          "x": {
            "type": "integer"
          },
          "y": {
            "type": "integer"
          }
        }
      },
      "spacing-diagram-service": {
        "type": "object",
        "properties": {
          "x": {
            "type": "integer"
          },
          "y": {
            "type": "integer"
          }
        },
        "required": [
          "x",
          "y"
        ]
      },
      "table_diff-diagram-service": {
        "type": "object",
        "properties": {
          "size": {
            "$ref": "#/definitions/dimensions-diagram-service"
          },
          "spacing": {
            "$ref": "#/definitions/spacing_diff-diagram-service"
          },
          "rotation": {
            "type": "integer"
          }
        }
      },
      "table_meta_diff-diagram-service": {
        "type": "object",
        "properties": {
          "chairs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/chair_diff-diagram-service"
            }
          },
          "legacy_id": {
            "type": "integer"
          },
          "removed": {
            "type": "integer"
          },
          "theater_curve": {
            "type": "integer"
          },
          "useCustomSeatNumbering": {
            "type": "boolean"
          },
          "theaterChairNumberOffset": {
            "type": "integer"
          },
          "theaterChairNumberIsOddEven": {
            "type": "string",
            "enum": [
              "odd",
              "even",
              true,
              false
            ]
          },
          "theaterChairNumberIsReverse": {
            "type": "boolean"
          },
          "sectionLabelling": {
            "type": "string"
          },
          "useCustomSectionLabelling": {
            "type": "boolean"
          }
        }
      },
      "table_meta-diagram-service": {
        "type": "object",
        "properties": {
          "chairs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/chair-diagram-service"
            }
          },
          "legacy_id": {
            "type": "integer"
          },
          "removed": {
            "type": "integer"
          },
          "theater_curve": {
            "type": "integer"
          },
          "useCustomSeatNumbering": {
            "type": "boolean"
          },
          "theaterChairNumberOffset": {
            "type": "integer"
          },
          "theaterChairNumberIsOddEven": {
            "type": "string",
            "enum": [
              "odd",
              "even",
              true,
              false
            ]
          },
          "theaterChairNumberIsReverse": {
            "type": "boolean"
          },
          "sectionLabelling": {
            "type": "string"
          },
          "useCustomSectionLabelling": {
            "type": "boolean"
          }
        },
        "required": [
          "chairs"
        ]
      },
      "table_numbering-diagram-service": {
        "type": "object",
        "properties": {
          "allowRepeats": {
            "type": "boolean"
          },
          "evenOnly": {
            "type": "boolean"
          },
          "oddOnly": {
            "type": "boolean"
          },
          "skipNumbers": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "skipNumbersWith": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "startingNumber": {
            "type": "integer"
          }
        }
      },
      "table-diagram-service": {
        "type": "object",
        "properties": {
          "size": {
            "$ref": "#/definitions/dimensions-diagram-service"
          },
          "spacing": {
            "$ref": "#/definitions/spacing-diagram-service"
          },
          "rotation": {
            "type": "integer"
          }
        }
      },
      "tail_line_connection-diagram-service": {
        "type": "object",
        "properties": {
          "head": {
            "$ref": "#/definitions/line_connection-diagram-service"
          },
          "tail": {
            "$ref": "#/definitions/line_connection-diagram-service"
          }
        },
        "required": [
          "tail"
        ]
      },
      "template_config_diff-diagram-service": {
        "type": "object",
        "properties": {
          "setup": {
            "type": "string"
          },
          "table": {
            "$ref": "#/definitions/table_diff-diagram-service"
          },
          "aisles": {
            "$ref": "#/definitions/aisles_diff-diagram-service"
          },
          "meta": {
            "$ref": "#/definitions/meta_diff-diagram-service"
          },
          "column": {
            "$ref": "#/definitions/column-diagram-service"
          },
          "chair": {
            "$ref": "#/definitions/chair_template-diagram-service"
          },
          "chairOrientation": {
            "type": "string"
          },
          "chairType": {
            "type": "string"
          },
          "chevronAngle": {
            "type": "integer"
          },
          "rotation": {
            "type": "integer"
          },
          "relativeRotation": {
            "type": "integer"
          },
          "chairs": {
            "type": "integer"
          },
          "chairSides": {
            "$ref": "#/definitions/chair_sides-diagram-service"
          },
          "floorElementType": {
            "type": "string"
          },
          "locations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "theaterChairNumberOffset": {
            "type": "integer"
          },
          "theaterChairNumberIsOddEven": {
            "type": "string",
            "enum": [
              "odd",
              "even",
              true,
              false
            ]
          },
          "theaterChairNumberIsReverse": {
            "type": "boolean"
          },
          "theaterChairNumbersOmitted": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "theaterCurve": {
            "type": "integer"
          },
          "sectionName": {
            "type": "string"
          },
          "sectionLabelling": {
            "type": "string",
            "enum": [
              "alphabetical",
              "numerical",
              "none"
            ]
          },
          "sectionLabellingRowOffset": {
            "type": "integer"
          },
          "sectionLabellingRowIsReverse": {
            "type": "boolean"
          },
          "sectionLabellingRowsOmitted": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "template_config-diagram-service": {
        "type": "object",
        "properties": {
          "setup": {
            "type": "string"
          },
          "table": {
            "$ref": "#/definitions/table-diagram-service"
          },
          "aisles": {
            "$ref": "#/definitions/aisles-diagram-service"
          },
          "meta": {
            "$ref": "#/definitions/meta-diagram-service"
          },
          "column": {
            "$ref": "#/definitions/column-diagram-service"
          },
          "chevronAngle": {
            "type": "integer"
          },
          "rotation": {
            "type": "integer"
          },
          "relativeRotation": {
            "type": "integer"
          },
          "chair": {
            "$ref": "#/definitions/chair_template-diagram-service"
          },
          "chairs": {
            "type": "integer"
          },
          "chairSides": {
            "$ref": "#/definitions/chair_sides-diagram-service"
          },
          "chairOrientation": {
            "type": "string"
          },
          "chairType": {
            "type": "string"
          },
          "floorElementType": {
            "type": "string"
          },
          "locations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "theaterChairNumberOffset": {
            "type": "integer"
          },
          "theaterChairNumberIsOddEven": {
            "type": "string",
            "enum": [
              "odd",
              "even",
              true,
              false
            ]
          },
          "theaterChairNumberIsReverse": {
            "type": "boolean"
          },
          "theaterChairNumbersOmitted": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "theaterCurve": {
            "type": "integer"
          },
          "sectionName": {
            "type": "string"
          },
          "sectionLabelling": {
            "type": "string",
            "enum": [
              "alphabetical",
              "numerical",
              "none"
            ]
          },
          "sectionLabellingRowOffset": {
            "type": "integer"
          },
          "sectionLabellingRowIsReverse": {
            "type": "boolean"
          },
          "sectionLabellingRowsOmitted": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "setup"
        ]
      },
      "tents_diff-diagram-service": {
        "type": "object",
        "properties": {
          "hor": {
            "type": "integer"
          },
          "ver": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "tents-diagram-service": {
        "type": "object",
        "properties": {
          "hor": {
            "type": "integer"
          },
          "ver": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "hor",
          "ver",
          "type"
        ]
      },
      "bookableRoomItem-property-ingest": {
        "type": "object",
        "description": "an object with information about a bookable room",
        "properties": {
          "name": {
            "type": "string",
            "description": "the name of the bookable room"
          },
          "internal_location": {
            "type": "string",
            "description": "the location of the room within the building"
          },
          "max_capacity": {
            "type": "integer",
            "minimum": 0,
            "description": "the maximum capacity of the bookable room"
          },
          "description": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/itemDescription-property-ingest"
            },
            "description": "an array of bookable room descriptions in different languages"
          },
          "accessibility": {
            "type": "array",
            "description": "an array of strings indicating the bookable room's accessibility",
            "items": {
              "type": "string",
              "enum": [
                "wheelchair_access",
                "hearing_impaired",
                "vision_impaired",
                "in-room_accessibility",
                "accessible_bathroom",
                "roll-in_shower"
              ]
            }
          },
          "setups": {
            "type": "array",
            "description": "an array of objects describing different setups for the bookable room",
            "items": {
              "type": "object",
              "description": "an object with name and capacity information for a setup",
              "properties": {
                "name": {
                  "type": "string",
                  "enum": [
                    "banquet",
                    "reception",
                    "theater",
                    "classroom",
                    "boardroom",
                    "exhibit",
                    "hollow-square",
                    "u-shape",
                    "cocktail-rounds",
                    "crescent-rounds",
                    "e-shape",
                    "perimeter-seating",
                    "royal-conference",
                    "talk-show",
                    "t-shape"
                  ],
                  "description": "the name of the room setup"
                },
                "capacity": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "the capacity of the room using this setup"
                }
              },
              "required": [
                "name",
                "capacity"
              ]
            }
          },
          "dimensions": {
            "type": "object",
            "description": "object describing the dimensions of the room",
            "properties": {
              "sq_ft": {
                "type": "number",
                "minimum": 0,
                "description": "the square footage of the room"
              },
              "width_in_ft": {
                "type": "number",
                "minimum": 0,
                "description": "the width of the room in feet"
              },
              "length_in_ft": {
                "type": "number",
                "minimum": 0,
                "description": "the length of the room in feet"
              },
              "ceiling_height_in_ft": {
                "type": "number",
                "minimum": 0,
                "description": "the height of the ceiling in feet"
              }
            }
          }
        }
      },
      "customFieldItem-property-ingest": {
        "type": "object",
        "description": "an object describing the custom field",
        "properties": {
          "field_type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "boolean"
            ],
            "description": "the type of the field"
          },
          "field_name": {
            "type": "string",
            "description": "the name of the field"
          },
          "field_display_name": {
            "type": "string",
            "description": "the display name of the field"
          },
          "field_value": {
            "type": "string",
            "description": "the value of the fields"
          }
        },
        "required": [
          "field_type",
          "field_name",
          "field_display_name",
          "field_value"
        ]
      },
      "eventType-property-ingest": {
        "type": "string",
        "enum": [
          "Athletic",
          "Catered Meal",
          "Ceremony",
          "Class/Lecture",
          "Concert",
          "Conference",
          "Exhibit",
          "Meeting",
          "Networking",
          "Press Conference",
          "Reception",
          "Seminar",
          "Team Building",
          "Trade Fair",
          "Training"
        ]
      },
      "itemDescription-property-ingest": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "description": "the language of the description",
            "enum": [
              "en_US",
              "en_GB",
              "ar_SA",
              "zh_CN",
              "zh_TW",
              "nl_NL",
              "fr_FR",
              "de_DE",
              "iw_IL",
              "it_IT",
              "ja_JP",
              "ko_KR",
              "th_TH",
              "in_ID",
              "pt_PT",
              "ru_RU",
              "es_ES",
              "tr_TR"
            ]
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "language",
          "description"
        ]
      },
      "Properties-property-ingest": {
        "type": "object",
        "properties": {
          "property_id": {
            "type": "string"
          },
          "property_name": {
            "type": "string"
          },
          "brand": {
            "type": "string"
          },
          "disable_claim_listing_cta": {
            "type": "boolean"
          },
          "selected_hero_image_id": {
            "type": "string"
          },
          "location": {
            "$ref": "#/definitions/location-property-ingest"
          },
          "property_info": {
            "$ref": "#/definitions/property_info-property-ingest"
          },
          "property_contact": {
            "$ref": "#/definitions/property_contact-property-ingest"
          },
          "property_meeting_info": {
            "$ref": "#/definitions/property_meeting_info-property-ingest"
          },
          "custom_fields": {
            "$ref": "#/definitions/custom_fields-property-ingest"
          }
        },
        "required": [
          "property_id",
          "property_name",
          "brand",
          "location",
          "property_info",
          "property_contact",
          "property_meeting_info"
        ]
      },
      "location-property-ingest": {
        "description": "information about the location of the property",
        "type": "object",
        "properties": {
          "address_line_one": {
            "type": "string",
            "description": "the address of the property"
          },
          "address_line_two": {
            "type": "string",
            "description": "the address of the property(continued)"
          },
          "city": {
            "type": "string",
            "description": "the city that the property is in"
          },
          "state": {
            "type": "string",
            "description": "the state or province that the property is in (for properties in a state or province)"
          },
          "postal_code": {
            "type": "string",
            "description": "the postal code where the property is located"
          },
          "country": {
            "type": "string",
            "description": "the country where the property is located"
          },
          "iso_country": {
            "type": "string",
            "description": "the country in ISO-3166 format"
          },
          "iso_state": {
            "type": "string",
            "description": "the state/province/division in ISO-3166 format"
          },
          "coordinates": {
            "type": "object",
            "description": "the coordinates of the property",
            "properties": {
              "longitude": {
                "type": "number",
                "description": "the longitude of the property"
              },
              "latitude": {
                "type": "number",
                "description": "the latitude of the property"
              }
            }
          }
        },
        "required": [
          "address_line_one",
          "city",
          "country"
        ]
      },
      "property_info-property-ingest": {
        "type": "object",
        "description": "information about the property including its ameneties, accessibility, rooms and more",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "open",
              "closed",
              "opening_soon",
              "new"
            ],
            "description": "the availability status of the property"
          },
          "accepting_rfp": {
            "type": "boolean",
            "description": "flag indicating if hotel is accepting rfps"
          },
          "opening_date": {
            "type": "string",
            "format": "date-time",
            "description": "The date that the hotel opens"
          },
          "property_description": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/itemDescription-property-ingest"
            },
            "description": "an array of property descriptions in different languages"
          },
          "accessibility": {
            "type": "array",
            "description": "an array of strings indicating the bookable room's accessibility",
            "items": {
              "type": "string",
              "enum": [
                "wheelchair_access",
                "hearing_impaired",
                "vision_impaired",
                "in-room_accessibility",
                "accessible_bathroom",
                "roll-in_shower"
              ]
            }
          },
          "amenities": {
            "type": "array",
            "description": "an array of objects indicating a property's ameneties and their costs",
            "items": {
              "type": "object",
              "properties": {
                "amenity": {
                  "type": "string",
                  "description": "the name of the amenity",
                  "enum": [
                    "dance_floors",
                    "loading_dock",
                    "piano",
                    "portable_heaters",
                    "staging",
                    "a/v_capabilities",
                    "screen_and_projectors",
                    "onsite_catering",
                    "onsite_security",
                    "onsite_meeting_planner",
                    "wifi",
                    "concierge",
                    "multilingual_staff",
                    "room_service",
                    "meeting_rooms",
                    "laundry_service",
                    "dry_cleaning",
                    "complimentary_breakfast",
                    "baggage_storage",
                    "non_smoking_rooms",
                    "heat",
                    "air_conditioning",
                    "desk/workspace",
                    "complimentary_toiletries",
                    "coffee_maker",
                    "cable_tv",
                    "family_friendly_hotel",
                    "childcare",
                    "cribs_available",
                    "rollaway/extra_beds_available",
                    "pet_friendly",
                    "pets_not_allowed",
                    "conference_facilities",
                    "meeting_app",
                    "business_center",
                    "kitchenette",
                    "full_kitchen",
                    "kids_eat_free",
                    "onsite_restaurant",
                    "spa",
                    "health_and_fitness_center",
                    "indoor_pool",
                    "outdoor_pool",
                    "beach",
                    "hot_tub_jacuzzi",
                    "tennis_court",
                    "salon",
                    "hiking",
                    "skiing",
                    "golf_course",
                    "water_park",
                    "handicap_accessible",
                    "free_local_calls",
                    "free_toll_free_calls",
                    "voicemail_box",
                    "gift_shop_on_site",
                    "rental_car_service",
                    "extended_stay",
                    "outdoor_space",
                    "oceanwater_views",
                    "mountain_views",
                    "garden_views",
                    "urban_views",
                    "outside_caterers_allowed",
                    "passkey_enabled",
                    "video_conferencing",
                    "vip_service",
                    "water_sports",
                    "portable_walls",
                    "casino",
                    "semi_private_space",
                    "hip_trendy",
                    "modern_contemporary",
                    "corporate_business",
                    "bar_lounge",
                    "elegant_upscale",
                    "american",
                    "asian",
                    "barbecue",
                    "belgian",
                    "brazilian",
                    "british",
                    "chinese",
                    "comfort_food",
                    "contemporary",
                    "continental",
                    "creole_cajun_southern",
                    "ethiopian",
                    "eurasian",
                    "european",
                    "fondue",
                    "french",
                    "fusion_eclectic",
                    "german",
                    "global",
                    "greek",
                    "indian",
                    "irish",
                    "italian",
                    "japanese",
                    "kosher",
                    "korean",
                    "latin_american",
                    "lebanese",
                    "mediterranean",
                    "mexican_southwestern",
                    "middle_eastern",
                    "moroccan",
                    "seafood",
                    "steakhouse",
                    "sushi",
                    "tapas",
                    "thai",
                    "turkish",
                    "vegetarian",
                    "kitchen_onsite",
                    "alcohol_allowed",
                    "preferred_vendors_only",
                    "all_inclusive",
                    "environmentally_friendly"
                  ]
                },
                "amenity_group": {
                  "type": "string",
                  "description": "the group of the amenity",
                  "enum": [
                    "general_amenities",
                    "event_amenities",
                    "room_amenities",
                    "family_friendly_amenities",
                    "things_to_do",
                    "cuisines"
                  ]
                },
                "cost": {
                  "type": "string",
                  "description": "the cost of the amenity",
                  "enum": [
                    "free",
                    "paid"
                  ]
                }
              },
              "required": [
                "amenity",
                "cost"
              ]
            }
          },
          "location_type": {
            "type": "array",
            "description": "an array of strings indicating a property's location type",
            "items": {
              "type": "string"
            }
          },
          "loyalty_programs": {
            "type": "array",
            "description": "an array of strings indicating a property's loyaly programs",
            "items": {
              "type": "string"
            }
          },
          "price_bracket": {
            "type": "integer",
            "minimum": 1,
            "maximum": 4,
            "description": "a number from 1 to 4 indicating the price range of a property"
          },
          "star_rating": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "description": "the star rating of a hotel"
          },
          "number_guest_rooms": {
            "type": "integer",
            "minimum": 0,
            "description": "the number of guest rooms at a property"
          },
          "number_accessible_guest_rooms": {
            "type": "integer",
            "minimum": 0,
            "description": "the number of accessible guest rooms at a property"
          },
          "parking": {
            "type": "array",
            "description": "an array of strings indicating a property's parking type(s)",
            "items": {
              "type": "object",
              "description": "an object that includes a parking type and cost",
              "properties": {
                "parking_type": {
                  "type": "string",
                  "description": "the type of parking",
                  "enum": [
                    "onsite_parking",
                    "valet_parking",
                    "accessible_parking",
                    "electric_vehicle_charging_station",
                    "airport_shuttle",
                    "area_shuttle",
                    "metro_access",
                    "taxi_service",
                    "car_service",
                    "bus_access",
                    "train_access",
                    "street_parking",
                    "bus_parking"
                  ]
                },
                "cost": {
                  "type": "string",
                  "description": "the cost of parking",
                  "enum": [
                    "free",
                    "paid"
                  ]
                }
              },
              "required": [
                "parking_type",
                "cost"
              ]
            }
          },
          "brand_hierarchy": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "description": "a number indicating where a property falls within the brand hierarchy(higher is better)"
          }
        },
        "required": [
          "status",
          "property_description",
          "number_guest_rooms"
        ]
      },
      "property_contact-property-ingest": {
        "type": "object",
        "description": "contact information for a property",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "the phone number for the property"
          },
          "email_address": {
            "type": "string",
            "format": "email",
            "description": "the email address for the property"
          },
          "social_media": {
            "type": "object",
            "description": "social media information for the company",
            "properties": {
              "facebook": {
                "type": "string",
                "description": "The facebook page of the property"
              },
              "twitter": {
                "type": "string",
                "description": "the twitter page of the property"
              }
            }
          }
        },
        "required": [
          "phone_number",
          "email_address"
        ]
      },
      "property_meeting_info-property-ingest": {
        "type": "object",
        "description": "information about the property pertaining to its meeting space",
        "properties": {
          "max_capacity": {
            "type": "integer",
            "minimum": 0,
            "description": "the max capacity of the all the property's meeting space"
          },
          "number_of_rooms": {
            "type": "integer",
            "minimum": 0,
            "description": "the number of bookable rooms for meetings"
          },
          "total_meeting_space": {
            "type": "number",
            "minimum": 0,
            "description": "the total amount of meeting space in square feet"
          },
          "largest_meeting_room_capacity": {
            "type": "integer",
            "minimum": 0,
            "description": "the capacity of the largest meeting room"
          },
          "certification": {
            "type": "array",
            "description": "an array of strings indicating the property's certifications",
            "items": {
              "type": "string"
            }
          },
          "event_types": {
            "type": "array",
            "description": "an array of strings indicating the event types the property can host",
            "items": {
              "$ref": "#/definitions/eventType-property-ingest"
            }
          },
          "bookable_rooms": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/bookableRoomItem-property-ingest"
            }
          }
        },
        "required": [
          "max_capacity",
          "number_of_rooms",
          "total_meeting_space",
          "bookable_rooms"
        ]
      },
      "custom_fields-property-ingest": {
        "type": "array",
        "description": "an array of objects describing custom fields for a property",
        "items": {
          "$ref": "#/definitions/customFieldItem-property-ingest"
        }
      },
      "Response-property-ingest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "event-settings-event-service": {
        "type": "object",
        "properties": {
          "event_id": {
            "type": "string",
            "description": "id of event"
          },
          "namespace": {
            "type": "string",
            "description": "namespace for an event setting"
          },
          "settings": {
            "type": "object",
            "description": "settings of an namespace for an event"
          }
        },
        "required": [
          "event_id",
          "namespace",
          "settings"
        ]
      },
      "event-settings-settings-event-service": {
        "type": "object",
        "additionalProperties": {
          
        }
      },
      "event-event-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of event"
          },
          "description": {
            "type": "string",
            "description": "description of event"
          },
          "status": {
            "type": "string",
            "description": "status of event"
          },
          "event_id": {
            "type": "string",
            "description": "id of event"
          },
          "start_epoch": {
            "type": "integer",
            "description": "start of epoch"
          },
          "end_epoch": {
            "type": "integer",
            "description": "end of epoch"
          },
          "industry": {
            "type": "string",
            "description": "industry of event"
          },
          "archived": {
            "type": "boolean",
            "description": "archived"
          },
          "deleted": {
            "type": "boolean",
            "description": "deleted"
          },
          "legacy_id": {
            "type": "integer",
            "description": "id map to legacy event"
          },
          "is_public": {
            "type": "boolean",
            "description": "flag if event is public or not"
          }
        },
        "required": [
          "name",
          "event_id",
          "archived",
          "deleted"
        ]
      },
      "industry-event-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of industry"
          },
          "name": {
            "type": "string",
            "description": "name of industry"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "session-event-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of session"
          },
          "description": {
            "type": "string",
            "description": "description of session"
          },
          "status": {
            "type": "string",
            "description": "status of session"
          },
          "id": {
            "type": "string",
            "description": "id of session"
          },
          "event_id": {
            "type": "string",
            "description": "id of event"
          },
          "place_id": {
            "type": "string",
            "description": "id of place"
          },
          "parent_id": {
            "type": "string",
            "description": "id of parent"
          },
          "start_epoch": {
            "type": "integer",
            "description": "start of epoch"
          },
          "end_epoch": {
            "type": "integer",
            "description": "end of epoch"
          },
          "archived": {
            "type": "boolean",
            "description": "archived"
          },
          "deleted": {
            "type": "boolean",
            "description": "deleted"
          }
        },
        "required": [
          "name",
          "id",
          "archived",
          "deleted"
        ]
      },
      "user-event-service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "full name of user"
          },
          "sortable_name": {
            "type": "string",
            "description": "last name of user"
          },
          "addressable_name": {
            "type": "string",
            "description": "first name of user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "email address"
          }
        },
        "required": [
          "name",
          "sortable_name",
          "addressable_name",
          "email"
        ]
      },
      "checkinBulk-guest-list-service": {
        "properties": {
          "guests": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of Guest IDs"
          },
          "checked_in": {
            "type": "integer",
            "enum": [
              0,
              1,
              2
            ],
            "description": "0 = Check-in reset, 1 = Check-in, 2 = Check-out"
          }
        },
        "required": [
          "guests"
        ],
        "example": {
          "guests": [
            "99b4ae20-2779-11e6-b0b7-13c2616041ae",
            "99b4ae21-2779-11e6-b0b7-13c2616041ae"
          ],
          "checked_in": 1
        }
      },
      "group-guest-list-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "guestlist_id": {
            "type": "string"
          },
          "guest_count": {
            "type": "integer"
          },
          "is_named": {
            "type": "boolean"
          },
          "guests": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/guests-guest-list-service"
            }
          }
        },
        "required": [
          "id"
        ],
        "example": {
          "id": "1db84340-2779-11e6-88c6-db7134cc99b6",
          "name": "Group A",
          "guestlist_id": "1dad46c0-2779-11e6-88c6-db7134cc99b6",
          "guest_count": 2,
          "guests": [
            {
              "id": "1db18c80-2779-11e6-88c6-db7134cc99b6",
              "guestlist_id": "1dad46c0-2779-11e6-88c6-db7134cc99b6",
              "first_name": "Test",
              "last_name": "One"
            },
            {
              "id": "1db18c81-2779-11e6-88c6-db7134cc99b6",
              "guestlist_id": "1dad46c0-2779-11e6-88c6-db7134cc99b6",
              "first_name": "Test",
              "last_name": "Two"
            }
          ]
        }
      },
      "groupBulk-guest-list-service": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "CREATE",
              "DELETE"
            ]
          },
          "guests": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/guests-guest-list-service"
            }
          }
        },
        "required": [
          "guests",
          "action"
        ],
        "example": {
          "action": "CREATE | DELETE",
          "guests": [
            "99b4ae20-2779-11e6-b0b7-13c2616041ae",
            "99b4ae21-2779-11e6-b0b7-13c2616041ae"
          ]
        }
      },
      "groupCreate-guest-list-service": {
        "type": "object",
        "properties": {
          "guests": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "id of guest"
            }
          }
        },
        "required": [
          "guests"
        ],
        "example": {
          "guests": [
            "99b4ae20-2779-11e6-b0b7-13c2616041ae",
            "99b4ae21-2779-11e6-b0b7-13c2616041ae"
          ]
        }
      },
      "guestlists-guest-list-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of guestlists"
          },
          "session_id": {
            "type": "string",
            "description": "session_id of guestlists"
          },
          "event_id": {
            "type": "string",
            "description": "event_id"
          },
          "name": {
            "type": "string",
            "description": "name"
          },
          "deleted": {
            "type": "integer",
            "description": "name"
          }
        },
        "required": [
          "id",
          "name",
          "event_id"
        ]
      },
      "guests-guest-list-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of guest"
          },
          "first_name": {
            "type": "string",
            "description": "first name of guest"
          },
          "last_name": {
            "type": "string",
            "description": "last name of guest"
          },
          "email": {
            "type": "string",
            "description": "email address"
          },
          "checked_in_status": {
            "type": "object",
            "description": "checkin data",
            "properties": {
              "checked_in": {
                "type": "integer"
              },
              "checked_in_at": {
                "type": "string",
                "format": "date-time"
              },
              "checked_out_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/tags-guest-list-service"
            }
          },
          "meals": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/meals-guest-list-service"
            }
          }
        },
        "required": [
          "id",
          "first_name",
          "last_name"
        ]
      },
      "meals-guest-list-service": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "name of meal"
          }
        },
        "required": [
          "title"
        ]
      },
      "tags-guest-list-service": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "title of tag"
          },
          "color": {
            "type": "string",
            "description": "color of tag"
          },
          "notifications_emails": {
            "type": "array",
            "description": "checkin update email recipients",
            "items": {
              "type": "string"
            }
          },
          "notifications_phones": {
            "type": "array",
            "description": "checkin update text recipients",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "title"
        ]
      },
      "ActiveWizardPost-layout-automation-service": {
        "properties": {
          "attendee_management": {
            "type": "boolean"
          },
          "category": {
            "type": "string"
          },
          "end_time": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "start_time": {
            "format": "date-time",
            "type": "string"
          },
          "uses_metric": {
            "type": "boolean"
          },
          "spaces": {
            "items": {
              "$ref": "#/definitions/Space-layout-automation-service"
            },
            "type": "array"
          },
          "venue_mapper_version": {
            "type": "integer"
          }
        },
        "required": [
          "name",
          "category",
          "spaces"
        ],
        "type": "object"
      },
      "ActiveWizardResponse-layout-automation-service": {
        "type": "object"
      },
      "ActiveCustomSetupWizardPost-layout-automation-service": {
        "properties": {
          "attendee_management": {
            "type": "boolean"
          },
          "category": {
            "type": "string"
          },
          "end_time": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "start_time": {
            "format": "date-time",
            "type": "string"
          },
          "uses_metric": {
            "type": "boolean"
          },
          "spaces": {
            "items": {
              "$ref": "#/definitions/SpaceCustomSetup-layout-automation-service"
            },
            "type": "array"
          },
          "venue_mapper_version": {
            "type": "integer"
          }
        },
        "required": [
          "name",
          "category",
          "spaces"
        ],
        "type": "object"
      },
      "Aisles-layout-automation-service": {
        "properties": {
          "floorElementsBetween": {
            "type": "integer"
          },
          "width": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LayoutTemplate-layout-automation-service": {
        "properties": {
          "config": {
            "$ref": "#/definitions/FPABaseConfig-layout-automation-service"
          },
          "startPos": {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/definitions/TablePosition-layout-automation-service"
                },
                "type": "array"
              },
              "meta": {
                "properties": {
                  "cols": {
                    "type": "integer"
                  },
                  "rows": {
                    "type": "integer"
                  }
                }
              },
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "PassiveWizardPost-layout-automation-service": {
        "properties": {
          "spaceId": {
            "type": "integer"
          },
          "wizard": {
            "$ref": "#/definitions/FPABaseConfig-layout-automation-service"
          }
        },
        "required": [
          "spaceId",
          "wizard"
        ],
        "type": "object"
      },
      "PassiveWizardResponse-layout-automation-service": {
        "properties": {
          "template": {
            "$ref": "#/definitions/LayoutTemplate-layout-automation-service"
          }
        },
        "type": "object"
      },
      "Space-layout-automation-service": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "venue_id": {
            "type": "string"
          },
          "attendees": {
            "type": "integer"
          },
          "external_diagram_id": {
            "type": "string"
          },
          "external_event_id": {
            "type": "string"
          },
          "wizard": {
            "$ref": "#/definitions/FPABaseConfig-layout-automation-service"
          }
        }
      },
      "SpaceCustomSetup-layout-automation-service": {
        "type": "object",
        "required": [
          "name",
          "custom_setup",
          "attendees"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "venue_id": {
            "type": "string"
          },
          "custom_setup": {
            "type": "string"
          },
          "attendees": {
            "type": "integer"
          },
          "external_diagram_id": {
            "type": "string"
          },
          "external_event_id": {
            "type": "string"
          }
        }
      },
      "Spacing-layout-automation-service": {
        "type": "object",
        "required": [
          "x",
          "y"
        ],
        "properties": {
          "x": {
            "type": "integer"
          },
          "y": {
            "type": "integer"
          }
        }
      },
      "Table-layout-automation-service": {
        "properties": {
          "aisles": {
            "properties": {
              "horizontal": {
                "$ref": "#/definitions/Aisles-layout-automation-service"
              },
              "vertical": {
                "$ref": "#/definitions/Aisles-layout-automation-service"
              }
            },
            "type": "object"
          },
          "chairs": {
            "type": "integer"
          },
          "chevronAngle": {
            "type": "integer"
          },
          "rotation": {
            "type": "integer"
          },
          "removedChairs": {
            "type": "integer"
          },
          "rotateCrescent": {
            "type": "integer"
          },
          "size": {
            "$ref": "#/definitions/TableSize-layout-automation-service"
          },
          "spacing": {
            "$ref": "#/definitions/Spacing-layout-automation-service"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "chairs",
          "size"
        ],
        "type": "object"
      },
      "TablePosition-layout-automation-service": {
        "properties": {
          "rotation": {
            "format": "int32",
            "type": "integer"
          },
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "TableSize-layout-automation-service": {
        "properties": {
          "length": {
            "type": "integer"
          },
          "radius": {
            "format": "double",
            "type": "number"
          },
          "width": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Chair-layout-automation-service": {
        "properties": {
          "size": {
            "properties": {
              "length": {
                "format": "double",
                "type": "number"
              },
              "width": {
                "format": "double",
                "type": "number"
              }
            },
            "type": "object"
          }
        }
      },
      "FPABaseConfig-layout-automation-service": {
        "type": "object",
        "properties": {
          "setup": {
            "type": "string",
            "enum": [
              "aligned",
              "classroom",
              "conference-table",
              "hollow",
              "keynote",
              "staggered",
              "trade-show",
              "u-shape",
              "theatre",
              "theater",
              "hollow-square",
              "reception",
              "registration"
            ],
            "default": "aligned"
          },
          "layoutType": {
            "type": "string",
            "description": "not actually required, but necessary for polymorphism support under the OpenAPI specification"
          }
        },
        "required": [
          "setup",
          "layoutType"
        ],
        "discriminator": "layoutType"
      },
      "FPATemplateConfig-layout-automation-service": {
        "type": "object",
        "properties": {
          "attendees": {
            "type": "integer"
          },
          "rotation": {
            "type": "number",
            "default": 0
          },
          "chevronAngle": {
            "type": "number",
            "default": 0
          },
          "table": {
            "type": "object",
            "required": [
              "chairs",
              "size",
              "spacing"
            ],
            "properties": {
              "chairs": {
                "type": "integer"
              },
              "spacing": {
                "type": "object",
                "required": [
                  "x",
                  "y"
                ],
                "default": {
                  
                },
                "properties": {
                  "x": {
                    "type": "number",
                    "default": 0
                  },
                  "y": {
                    "type": "number",
                    "default": 0
                  }
                }
              },
              "type": {
                "$ref": "#/definitions/floorElementType-layout-automation-service"
              },
              "position": {
                "$ref": "#/definitions/positionString-layout-automation-service"
              }
            },
            "default": {
              "chairs": 2,
              "size": {
                "width": 24,
                "length": 12,
                "radius": 20
              },
              "spacing": {
                "x": 0,
                "y": 0
              }
            }
          },
          "aisles": {
            "type": "object",
            "required": [
              "horizontal",
              "vertical"
            ],
            "properties": {
              "horizontal": {
                "$ref": "#/definitions/aisleOptions-layout-automation-service"
              },
              "vertical": {
                "$ref": "#/definitions/aisleOptions-layout-automation-service",
                "default": {
                  "width": 36,
                  "floorElementsBetween": 15
                }
              }
            },
            "default": {
              "horizontal": {
                
              },
              "vertical": {
                
              }
            }
          },
          "chair": {
            "type": "object",
            "required": [
              "size"
            ],
            "properties": {
              "size": {
                "type": "object",
                "required": [
                  "length",
                  "width"
                ],
                "properties": {
                  "length": {
                    "type": "number"
                  },
                  "width": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "chairType": {
            "type": "string",
            "enum": [
              "banquet",
              "chiavari",
              "ghost"
            ]
          }
        },
        "required": [
          "attendees"
        ],
        "allOf": [
          {
            "$ref": "#/definitions/FPABaseConfig-layout-automation-service"
          }
        ]
      },
      "FPAReceptionConfig-layout-automation-service": {
        "type": "object",
        "properties": {
          "attendees": {
            "type": "integer"
          },
          "standing_coefficient": {
            "type": "number",
            "default": 0.33
          },
          "seating_coefficient": {
            "type": "number",
            "default": 0.33
          },
          "table": {
            "required": [
              "spacing"
            ],
            "properties": {
              "spacing": {
                "type": [
                  "number",
                  "object"
                ],
                "default": 96
              }
            },
            "default": {
              
            }
          }
        },
        "default": {
          
        },
        "required": [
          "attendees",
          "table"
        ],
        "allOf": [
          {
            "$ref": "#/definitions/FPABaseConfig-layout-automation-service"
          }
        ]
      },
      "FPARegistrationConfig-layout-automation-service": {
        "type": "object",
        "properties": {
          "table": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "default": 2
              },
              "position": {
                "$ref": "#/definitions/positionString-layout-automation-service",
                "default": "n"
              }
            },
            "required": [
              "count",
              "position"
            ],
            "default": {
              "count": 2,
              "position": "n"
            }
          }
        },
        "required": [
          "table"
        ],
        "allOf": [
          {
            "$ref": "#/definitions/FPABaseConfig-layout-automation-service"
          }
        ]
      },
      "aisleOptions-layout-automation-service": {
        "type": "object",
        "required": [
          "floorElementsBetween",
          "width"
        ],
        "properties": {
          "floorElementsBetween": {
            "type": "integer",
            "default": 0
          },
          "width": {
            "type": "number",
            "default": 0
          }
        }
      },
      "positionString-layout-automation-service": {
        "type": "string",
        "enum": [
          "center",
          "nw",
          "sw",
          "ne",
          "se",
          "n",
          "s",
          "e",
          "w"
        ],
        "default": "center"
      },
      "floorElementType-layout-automation-service": {
        "type": "string",
        "enum": [
          "circle-table",
          "circle",
          "rectangle-table",
          "rectangle",
          "square-table",
          "square",
          "crescent-table",
          "crescent",
          "oval-table",
          "oval",
          "serpentine-table",
          "serpentine",
          "half-circle-table",
          "theatre",
          "chair",
          "high-boy"
        ]
      },
      "genericJSONSchema-social-tables-api": {
        "type": "object"
      },
      "data-social-tables-api": {
        "properties": {
          
        }
      },
      "PostTeamsTeamEventsEventAttendeesBody-social-tables-api": {
        "properties": {
          "first_name": {
            "type": "string",
            "description": "First name of the attendee "
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the attendee "
          },
          "organization": {
            "type": "string",
            "description": "Organization the attendee is representing "
          },
          "event_table_id": {
            "type": "number",
            "description": "ID of the table the attendee is seated at "
          },
          "seat_number": {
            "type": "number",
            "description": "Number of the seat the attendee is seated at "
          },
          "email_address": {
            "type": "string",
            "description": "Email address of the attendee "
          },
          "check_in": {
            "type": "boolean",
            "description": "Whether or not the user has checked in "
          },
          "chain": {
            "type": "number",
            "description": "ID of the &quot;group&quot; the attendee is in "
          },
          "creator_id": {
            "type": "number",
            "description": "ID of the creating user "
          },
          "title": {
            "type": "string",
            "description": "Title for the attendee "
          },
          "notes": {
            "type": "string",
            "description": "Any notes regarding the specific attendee "
          },
          "meal_id": {
            "type": "number",
            "description": "Meal assigned to the attendee "
          },
          "gender": {
            "type": "string",
            "description": "Gender of the attendee "
          },
          "honorific": {
            "type": "string",
            "description": "Honorific prefix for addressing the attendee "
          },
          "guest_avatar": {
            "type": "string",
            "description": "URL to an avatar image for the attendee "
          },
          "custom1": {
            "type": "string",
            "description": "Data for Attendee Manager custom field 1 "
          },
          "custom2": {
            "type": "string",
            "description": "Data for Attendee Manager custom field 2 "
          },
          "custom3": {
            "type": "string",
            "description": "Data for Attendee Manager custom field 3 "
          },
          "space_id": {
            "type": "number",
            "description": "ID of the space in which to place the attendee "
          },
          "checkin_time": {
            "type": "string",
            "description": "When the attendee checked in "
          },
          "random_id": {
            "type": "string",
            "description": "Random-number GUID to identify the attendee "
          },
          "meal_ids": {
            "type": "string",
            "description": "Comma-separated list of meal IDs for the attendee "
          },
          "tag_ids": {
            "type": "string",
            "description": "Comma-separated list of tag IDs for the attendee "
          },
          "wheel_chair": {
            "type": "boolean",
            "description": "Whether the attendee requires a wheelchair "
          },
          "checkin_user_email": {
            "type": "string",
            "description": "Email address of the user who checked in the attendee "
          }
        }
      },
      "PutTeamsTeamEventsEventAttendeesAttendeeBody-social-tables-api": {
        "properties": {
          "first_name": {
            "type": "string",
            "description": "First name of the attendee "
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the attendee "
          },
          "organization": {
            "type": "string",
            "description": "Organization the attendee is representing "
          },
          "event_table_id": {
            "type": "number",
            "description": "ID of the table the attendee is seated at "
          },
          "seat_number": {
            "type": "number",
            "description": "Number of the seat the attendee is seated at "
          },
          "email_address": {
            "type": "string",
            "description": "Email address of the attendee "
          },
          "check_in": {
            "type": "boolean",
            "description": "Whether or not the user has checked in "
          },
          "chain": {
            "type": "number",
            "description": "ID of the &quot;group&quot; the attendee is in "
          },
          "creator_id": {
            "type": "number",
            "description": "ID of the creating user "
          },
          "title": {
            "type": "string",
            "description": "Title for the attendee "
          },
          "notes": {
            "type": "string",
            "description": "Any notes regarding the specific attendee "
          },
          "meal_id": {
            "type": "number",
            "description": "Meal assigned to the attendee "
          },
          "gender": {
            "type": "string",
            "description": "Gender of the attendee "
          },
          "honorific": {
            "type": "string",
            "description": "Honorific prefix for addressing the attendee "
          },
          "guest_avatar": {
            "type": "string",
            "description": "URL to an avatar image for the attendee "
          },
          "custom1": {
            "type": "string",
            "description": "Data for Attendee Manager custom field 1 "
          },
          "custom2": {
            "type": "string",
            "description": "Data for Attendee Manager custom field 2 "
          },
          "custom3": {
            "type": "string",
            "description": "Data for Attendee Manager custom field 3 "
          },
          "space_id": {
            "type": "number",
            "description": "ID of the space in which to place the attendee "
          },
          "checkin_time": {
            "type": "string",
            "description": "When the attendee checked in "
          },
          "random_id": {
            "type": "string",
            "description": "Random-number GUID to identify the attendee "
          },
          "meal_ids": {
            "type": "string",
            "description": "Comma-separated list of meal IDs for the attendee "
          },
          "tag_ids": {
            "type": "string",
            "description": "Comma-separated list of tag IDs for the attendee "
          },
          "wheel_chair": {
            "type": "boolean",
            "description": "Whether the attendee requires a wheelchair "
          },
          "checkin_user_email": {
            "type": "string",
            "description": "Email address of the user who checked in the attendee "
          }
        }
      },
      "PostTeamsTeamEventsEventAttendeeAttendeeAvatarBody-social-tables-api": {
        "properties": {
          "Raw": {
            "type": "string",
            "description": "file data submitted using multipart/form-data encoding. This endpoint expects image files -- we suggest JPEG or PNG format. "
          }
        },
        "required": [
          "Raw"
        ]
      },
      "PostPropertiesPropertyBuildingsBuildingFloorsFloorBookableRoomsBookable_roomBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the bookable room "
          },
          "rooms": {
            "type": "string",
            "description": "Array of IDs for the rooms the bookable room contains "
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the bookable room is archived "
          },
          "description": {
            "type": "string",
            "description": "Description of the bookable room "
          },
          "images": {
            "type": "object",
            "description": "Object describing the images available for the bookable room "
          },
          "event_types": {
            "type": "string",
            "description": "Array of types of events that the room supports "
          },
          "floor_id": {
            "type": "number",
            "description": "ID of the floor containing the bookable room "
          },
          "rotation": {
            "type": "number",
            "description": "Degrees of rotation for the bookable room floorplan "
          },
          "onsite": {
            "type": "boolean",
            "description": "Whether the bookable room is part of an Onsite "
          }
        },
        "required": [
          "name",
          "rooms",
          "archived",
          "description",
          "images",
          "event_types",
          "floor_id",
          "rotation",
          "onsite"
        ]
      },
      "PostBookableroomsBookable_roomMetadataBody-social-tables-api": {
        "properties": {
          "bookable_room_data": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "bookable_room_data"
        ]
      },
      "PostPropertiesPropertyBuildingsBuildingFloorsFloorBookableRoomsBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the new bookable room "
          },
          "rooms": {
            "type": "string",
            "description": "Array of IDs for the rooms the bookable room contains "
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the bookable room is archived "
          },
          "description": {
            "type": "string",
            "description": "Description of the bookable room "
          },
          "images": {
            "type": "object",
            "description": "Object describing the images available for the bookable room "
          },
          "event_types": {
            "type": "string",
            "description": "Array of types of events that the room supports "
          },
          "floor_id": {
            "type": "number",
            "description": "ID of the floor containing the bookable room "
          },
          "rotation": {
            "type": "number",
            "description": "Degrees of rotation for the bookable room floorplan "
          },
          "onsite": {
            "type": "boolean",
            "description": "Whether the bookable room is part of an Onsite "
          }
        },
        "required": [
          "name",
          "rooms",
          "archived",
          "description",
          "images",
          "event_types",
          "floor_id",
          "rotation",
          "onsite"
        ]
      },
      "PostPropertiesPropertyBuildingsBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the building "
          },
          "address": {
            "type": "string",
            "description": "Address of the building "
          }
        },
        "required": [
          "name",
          "address"
        ]
      },
      "PostPropertiesPropertyBuildingsBuildingBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the building "
          },
          "address": {
            "type": "string",
            "description": "Address of the building "
          }
        },
        "required": [
          "name",
          "address"
        ]
      },
      "PutCatalogsCatalogBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this catalog "
          },
          "team_id": {
            "type": "number",
            "description": "ID of the team that &quot;owns&quot; this catalog "
          },
          "view_type": {
            "type": "string",
            "description": "Visibility of this catalog "
          },
          "published": {
            "type": "boolean",
            "description": "Whether or not the catalog is published "
          },
          "published_by": {
            "type": "number",
            "description": "ID of the user that published the catalog "
          }
        }
      },
      "PutCatalogsCatalogCategoriesCategoryBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this category "
          }
        },
        "required": [
          "name"
        ]
      },
      "PutCatalogsCatalogCategoriesCategoryTypesTypeBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this type "
          },
          "attributes": {
            "type": "object",
            "description": "An Object describing the type&#39;s attributes "
          },
          "schema": {
            "type": "string",
            "description": "Whether the type is a &#39;table&#39; (seatable) or &#39;object&#39; (non-             seatable) item. Most types should be objects. "
          },
          "thumbnail": {
            "type": "string",
            "description": "Path to the type&#39;s thumbnail image "
          },
          "shape": {
            "type": "string",
            "description": "Shape that dictates the type&#39;s             behavior, e.g. circle-shaped types change size with their radius while rectangle-shaped types change size based on             width and length attributes. "
          }
        }
      },
      "PutCatalogsCatalogCategoriesCategoryTypesTypeItemsItemBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this item "
          },
          "attributes": {
            "type": "object",
            "description": "An Object describing the item&#39;s attributes             (inherited from the parent type) "
          },
          "two_view": {
            "type": "object",
            "description": "An Object describing the WebGL data necessary to             render the object in 2D -- this requires meshes and icons fields, at least. "
          },
          "three_view": {
            "type": "object",
            "description": "An Object describing the WebGL data necessary to             render the object in 3D -- this requires at least a mesh field. "
          },
          "thumbnail": {
            "type": "string",
            "description": "Path to the item&#39;s thumbnail image "
          }
        }
      },
      "PostCatalogsCatalogBlacklisted_teamsTeamBody-social-tables-api": {
        "properties": {
          "data": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "data"
        ]
      },
      "PostCatalogsBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this catalog "
          },
          "team_id": {
            "type": "number",
            "description": "ID of the team that &quot;owns&quot; this catalog "
          },
          "view_type": {
            "type": "string",
            "description": "Visibility of this catalog "
          },
          "published": {
            "type": "boolean",
            "description": "Whether or not the catalog is published "
          },
          "published_by": {
            "type": "number",
            "description": "ID of the user that published the catalog "
          }
        },
        "required": [
          "name",
          "team_id",
          "view_type",
          "published",
          "published_by"
        ]
      },
      "PostCatalogsCatalogCategoriesBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this category "
          }
        },
        "required": [
          "name"
        ]
      },
      "PostCatalogsCatalogCategoriesCategoryTypesBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this type "
          },
          "attributes": {
            "type": "object",
            "description": "An Object describing the type&#39;s attributes -- this is a map of attribute             names to nested objects holding the value and whether or not the attribute is &quot;fixed&quot; i.e. editable. "
          },
          "schema": {
            "type": "string",
            "description": "Whether the type is a &#39;table&#39; (seatable) or &#39;object&#39; (non-             seatable) item. Most types should be objects. "
          },
          "thumbnail": {
            "type": "string",
            "description": "Path to the type&#39;s thumbnail image "
          },
          "shape": {
            "type": "string",
            "description": "Shape that dictates the type&#39;s             behavior, e.g. circle-shaped types change size with their radius while rectangle-shaped types change size based on             width and length attributes. "
          }
        },
        "required": [
          "name",
          "attributes",
          "schema",
          "thumbnail",
          "shape"
        ]
      },
      "PostCatalogsCatalogCategoriesCategoryTypesTypeItemsBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this item "
          },
          "attributes": {
            "type": "object",
            "description": "An Object describing the item&#39;s attributes             (inherited from the parent type) "
          },
          "two_view": {
            "type": "object",
            "description": "An Object describing the WebGL data necessary to             render the object in 2D -- this requires meshes and icons fields, at least. "
          },
          "three_view": {
            "type": "object",
            "description": "An Object describing the WebGL data necessary to             render the object in 3D -- this requires at least a mesh field. "
          },
          "thumbnail": {
            "type": "string",
            "description": "Path to the item&#39;s thumbnail image "
          }
        },
        "required": [
          "name",
          "attributes",
          "two_view",
          "three_view",
          "thumbnail"
        ]
      },
      "PostEventsEventidCollaboratorsBody-social-tables-api": {
        "properties": {
          "email_address": {
            "type": "string",
            "description": "Address of the user to add. An             email will be sent to this address with a link to the shared event. "
          },
          "role_id": {
            "type": "number",
            "description": "ID of the role to give this collaborator "
          }
        },
        "required": [
          "email_address",
          "role_id"
        ]
      },
      "PostEventsEventidRolesBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A memorable name for this role "
          },
          "permission_level": {
            "type": "string",
            "description": "Short             description of the permissions to give this role for this event, i.e.         - `view` means the collaborator can only view the event, but not edit it         - `manipulate` means the collaborator can update objects that are currently             in the event, but not create new objects or spaces         - `edit` means the collaborator has full editing privileges "
          }
        },
        "required": [
          "name",
          "permission_level"
        ]
      },
      "PutEventEventSettingsNameBody-social-tables-api": {
        "properties": {
          "data": {
            "type": "object",
            "description": "describing the setting "
          }
        },
        "required": [
          "data"
        ]
      },
      "PutEventsEventidCollaboratorsCollaboratoridBody-social-tables-api": {
        "properties": {
          "new": {
            "type": "number",
            "description": "role_id ID of the collaborator "
          },
          "previous_role_id": {
            "type": "number",
            "description": "current role_id of collaborator "
          }
        },
        "required": [
          "new",
          "previous_role_id"
        ]
      },
      "PutTeamsTeamEventsEventBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the event "
          },
          "category": {
            "type": "string",
            "description": "Category describing the event "
          },
          "public": {
            "type": "boolean",
            "description": "Whether the event is publicly viewable or not "
          },
          "attendee_management": {
            "type": "boolean",
            "description": "Whether to activate attendee management for the event "
          },
          "start_time": {
            "type": "string",
            "description": "The event&#39;s start time. Note that this must be in ISO-8601 format, in UTC (YYYY-MM-DDTHH:mm:ss.sssZ) "
          },
          "end_time": {
            "type": "string",
            "description": "The event&#39;s end time. Note that this must be in ISO-8601 format (see above) "
          },
          "uses_metric": {
            "type": "boolean",
            "description": "Whether to use metric measurements "
          },
          "collaborators_expire_at": {
            "type": "string",
            "description": "Date when collaborators&#39; access expires. If provided, this must be in ISO-8601 format (see above). "
          },
          "screenshot_url": {
            "type": "string",
            "description": "URL where a screenshot of the event floor can be found "
          },
          "is_archived": {
            "type": "number",
            "description": "If 0, the event is unarchived. If 1, the event is archived "
          },
          "user_id": {
            "type": "number",
            "description": "The id of the Social Tables user to associate with the event "
          },
          "team_id": {
            "type": "number",
            "description": "The id of the Social Tables team to associate with the event "
          }
        }
      },
      "PostTeamsTeamEventsBody-social-tables-api": {
        "type": "object",
        "required": [
          "name",
          "category",
          "spaces"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "attendee_management": {
            "type": "boolean"
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          },
          "uses_metric": {
            "type": "boolean"
          },
          "venue_mapper_version": {
            "type": "integer"
          },
          "spaces": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Space-social-tables-api"
            }
          }
        }
      },
      "PostEventsEventCloneBody-social-tables-api": {
        "properties": {
          "data": {
            "type": "string",
            "description": "body params "
          }
        },
        "required": [
          "data"
        ]
      },
      "PutTeamsTeamFavoritesFavoriteBody-social-tables-api": {
        "properties": {
          "data": {
            "type": "string",
            "description": "See the POST endpoint for details on which fields are accepted. "
          }
        }
      },
      "PutUserUserFavoritesFavoriteBody-social-tables-api": {
        "properties": {
          "favorite_data": {
            "type": "string",
            "description": "See the POST endpoint for what fields are accepted. "
          }
        },
        "required": [
          "favorite_data"
        ]
      },
      "PostTeamsTeamFavoritesBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the favorite "
          },
          "is_table": {
            "type": "boolean",
            "description": "Whether the favorite is a table "
          },
          "data": {
            "type": "string",
            "description": "JSON-serialized data describing the favorite "
          },
          "order": {
            "type": "number",
            "description": "Order in which the favorite should appear in the list of favorites "
          },
          "product": {
            "type": "string",
            "description": "Product for which the favorite should be available "
          }
        },
        "required": [
          "name",
          "is_table",
          "data",
          "order",
          "product"
        ]
      },
      "PostUsersUserFavoritesBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the favorite "
          },
          "is_table": {
            "type": "boolean",
            "description": "Whether the favorite is a table "
          },
          "data": {
            "type": "string",
            "description": "JSON-serialized data describing the favorite "
          },
          "order": {
            "type": "number",
            "description": "Order in which the favorite should appear in the list of favorites "
          },
          "product": {
            "type": "string",
            "description": "Product for which the favorite should be available "
          }
        },
        "required": [
          "name",
          "is_table",
          "data",
          "order",
          "product"
        ]
      },
      "PostTeamsTeamFeaturesFeatureBody-social-tables-api": {
        "properties": {
          "start_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "end_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "expiration_type": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "start_date",
          "end_date",
          "expiration_type"
        ]
      },
      "PutTeamsTeamFeaturesFeatureBody-social-tables-api": {
        "properties": {
          "start_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "end_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "expiration_type": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "start_date",
          "end_date",
          "expiration_type"
        ]
      },
      "PostTeamsTeamFeaturesBody-social-tables-api": {
        "properties": {
          "products": {
            "type": "object",
            "description": "Object describing the feature-set to create, with a             feature name as the key and an object containing feature data as the value. Each feature             entry is described under the Products sub-description. "
          },
          "package": {
            "type": "object",
            "description": "Object describing a bundle of features to assign. "
          },
          "start_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "end_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "expiration_type": {
            "type": "string",
            "description": ""
          },
          "package_type": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "start_date",
          "end_date",
          "expiration_type",
          "package_type"
        ]
      },
      "PutTeamsTeamFeaturesBody-social-tables-api": {
        "properties": {
          "products": {
            "type": "object",
            "description": "Object describing the feature-set to create, with a             feature name as the key and an object containing feature data as the value. Each feature             entry is described under the Products sub-description. "
          },
          "package": {
            "type": "object",
            "description": "Object describing a bundle of features to assign. "
          },
          "start_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "end_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "expiration_type": {
            "type": "string",
            "description": ""
          },
          "package_type": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "start_date",
          "end_date",
          "expiration_type",
          "package_type"
        ]
      },
      "PutSpacesSpaceidElementGroupsGroupidBody-social-tables-api": {
        "properties": {
          "color": {
            "type": "string",
            "description": "Color to associate with the group (e.g. in a listing or overlay) -- this must be one of the HTML-safe colors as described here: http://www.w3schools.com/html/html_colornames.asp "
          },
          "name": {
            "type": "string",
            "description": "Name for the group "
          },
          "json": {
            "type": "object",
            "description": "Any data structured as an object to be associated with the group "
          }
        }
      },
      "PostSpacesSpaceidElementGroupsBody-social-tables-api": {
        "properties": {
          "color": {
            "type": "string",
            "description": "Color to associate with the group (e.g. in a listing or overlay) -- this must be one of the HTML-safe colors as described here: http://www.w3schools.com/html/html_colornames.asp "
          },
          "name": {
            "type": "string",
            "description": "Name for the group "
          },
          "json": {
            "type": "object",
            "description": "Any data structured as an object to be associated with the group "
          }
        },
        "required": [
          "name",
          "json"
        ]
      },
      "PostTeamsTeamEventsEventElementsBody-social-tables-api": {
        "properties": {
          "fetch_updates": {
            "type": "string",
            "description": "Fetches all created records back from the database to return and send out through the real-time update channel. Otherwise, responds with the sent data immediately -- note this is much faster, so set this to false if performance is a concern. "
          },
          "array": {
            "type": "string",
            "description": "An array of floor-elements, either Table or Object objects, as described below: "
          },
          "layout": {
            "type": "string",
            "description": "The &quot;layout&quot; for the element, describing its shape and size -- for example, table-circle-60 describes a circular table with a 60-inch radius. "
          },
          "space_id": {
            "type": "number",
            "description": "The ID of the space the floor-element should be placed in. "
          },
          "name": {
            "type": "string",
            "description": "A name for the floor-element. "
          },
          "pos_x": {
            "type": "number",
            "description": "The x-coordinate for the element on the floor plan. "
          },
          "pos_y": {
            "type": "number",
            "description": "The y-coordinate for the element on the floor plan. "
          },
          "chair_count": {
            "type": "number",
            "description": "The number of chairs at the table. "
          },
          "side_1_count": {
            "type": "number",
            "description": "The number of chairs on the &#39;left&#39; side of the table. Note that for circular tables, this should be equal to chair_count, and none of the other sides should have chairs. "
          },
          "side_2_count": {
            "type": "number",
            "description": "The number of chairs on the &#39;top&#39; side of the table. "
          },
          "side_3_count": {
            "type": "number",
            "description": "The number of chairs on the &#39;right&#39; side of the table. "
          },
          "side_4_count": {
            "type": "number",
            "description": "The number of chairs on the &#39;bottom&#39; side of the table. "
          },
          "rotation": {
            "type": "number",
            "description": "The amount of rotation of the table, in degrees clockwise. "
          },
          "color": {
            "type": "string",
            "description": "The color to fill the table with. "
          },
          "logo": {
            "type": "string",
            "description": "The URL to a logo image to add to the table. "
          },
          "seat_color": {
            "type": "string",
            "description": "The color to fill the table&#39;s seats with. "
          },
          "table_num": {
            "type": "number",
            "description": "The table&#39;s number, to be displayed in the floor plan. "
          },
          "seat_num_start": {
            "type": "number",
            "description": "The number at which seat-numbering starts at this table. "
          },
          "width": {
            "type": "number",
            "description": "The width of the table, in inches. "
          },
          "length": {
            "type": "number",
            "description": "The length of the table, in inches. "
          },
          "radius": {
            "type": "number",
            "description": "The radius of the table, in inches. "
          },
          "group_id": {
            "type": "number",
            "description": "The ID of a floor-element group the table is associated with. "
          },
          "font_size": {
            "type": "number",
            "description": "The size of the font used for the table&#39;s labels. "
          },
          "layer": {
            "type": "number",
            "description": "The display layer to show the table in. "
          },
          "right_to_left_seats": {
            "type": "boolean",
            "description": "Whether to number seats from right-to-left rather than the default left-to-right ordering. "
          },
          "even_odd_seats": {
            "type": "boolean",
            "description": "Whether to number seats with even numbers on one side and odd numbers on the other. "
          },
          "removed_seats": {
            "type": "number",
            "description": "The number of &quot;seat&quot; spaces removed for crescent tables. "
          },
          "random_id": {
            "type": "string",
            "description": "A randomly-generated UUID for the floor-element. "
          },
          "service_area_id": {
            "type": "number",
            "description": "The ID of the service area the table is in. "
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the table has been deleted. "
          },
          "chair_type": {
            "type": "string",
            "description": "The type of chairs to place at the table. "
          },
          "chair_width": {
            "type": "number",
            "description": "The width of the chairs at the table, in inches. "
          },
          "chair_length": {
            "type": "number",
            "description": "The length of the chairs at the table, in inches. "
          },
          "section": {
            "type": "string",
            "description": "The name of the section the table is in -- for theatre rows. "
          },
          "invId": {
            "type": "number",
            "description": "The internal inventory-tracking ID for the floor-element. "
          },
          "is_locked": {
            "type": "boolean",
            "description": "Whether the floor-element is &quot;locked&quot; from changes. "
          },
          "curvature": {
            "type": "number",
            "description": "The degree to which a theatre row should curve "
          },
          "path_def": {
            "type": "string",
            "description": "The SVG path definition for a custom-drawn object. "
          },
          "image": {
            "type": "string",
            "description": "A URL to a custom image to show, for image objects. "
          },
          "steps": {
            "type": "number",
            "description": "The number of steps on a stair object. "
          },
          "line_thickness": {
            "type": "number",
            "description": "The thickness of the line used to draw the object. "
          },
          "tile_width": {
            "type": "number",
            "description": "The width of the tiles in a dance floor object. "
          },
          "tile_length": {
            "type": "number",
            "description": "The length of the tiles in a dance floor object. "
          },
          "number": {
            "type": "number",
            "description": "The object&#39;s number on the floor plan. "
          }
        },
        "required": [
          "layout",
          "space_id"
        ]
      },
      "PutTeamsTeamEventsEventElementsBody-social-tables-api": {
        "properties": {
          "array": {
            "type": "string",
            "description": "See the POST endpoint for all the fields that are supported when updating elements. "
          }
        }
      },
      "PatchSpacesSpaceidElementsBody-social-tables-api": {
        "properties": {
          "array": {
            "type": "string",
            "description": "See the POST endpoint for all the fields that are supported when updating elements. "
          }
        }
      },
      "PostPropertiesPropertyBuildingsBuildingFloorsFloorBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the floor "
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the floor is &quot;archived&quot;, i.e. deleted. "
          },
          "floor_img": {
            "type": "string",
            "description": "URL to an image of the floor. "
          },
          "position": {
            "type": "number",
            "description": "The floor&#39;s position in the building (e.g. 3rd floor === 3) "
          },
          "scale": {
            "type": "number",
            "description": "The scale factor for the floor plan "
          },
          "building_id": {
            "type": "number",
            "description": "ID of the building the floor is in "
          },
          "property_id": {
            "type": "number",
            "description": "ID of the property the floor is in "
          },
          "save_state": {
            "type": "string",
            "description": "JSON-serialized copy of intermediate state "
          },
          "is_published": {
            "type": "boolean",
            "description": "Whether the floor should be viewable to customers "
          },
          "not_to_scale": {
            "type": "boolean",
            "description": "Whether floor plan is not to scale "
          }
        },
        "required": [
          "name",
          "archived",
          "floor_img",
          "position",
          "scale",
          "building_id",
          "property_id",
          "save_state",
          "is_published",
          "not_to_scale"
        ]
      },
      "PostPropertiesPropertyBuildingsBuildingFloorsFloorBoundariesBody-social-tables-api": {
        "properties": {
          "object": {
            "type": "object",
            "description": "See the POST endpoint for the floor for details on all the body fields that can be sent. In addition, this endpoint supports a field boundaries which can contain any number of Boundary objects. A Boundary object can contain the fields described below: "
          },
          "id": {
            "type": "number",
            "description": "ID of the boundary to update "
          },
          "floor_id": {
            "type": "number",
            "description": "ID of the floor on which to find the boundary "
          },
          "start_point_id": {
            "type": "number",
            "description": "ID of the point which is the &quot;start&quot; of the boundary "
          },
          "end_point_id": {
            "type": "number",
            "description": "ID of the point which is the &quot;end&quot; of the boundary "
          },
          "arc_height": {
            "type": "number",
            "description": "Height of the arc curve, if it is an arc boundary "
          },
          "height": {
            "type": "number",
            "description": "Height of the boundary "
          },
          "width": {
            "type": "number",
            "description": "Width of the boundary "
          },
          "type": {
            "type": "string",
            "description": "Type of the boundary "
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the boundary is deleted "
          },
          "root_id": {
            "type": "number",
            "description": "ID of the floor on which this floor is created. "
          },
          "conversion_type": {
            "type": "string",
            "description": "The type of conversion applied to cad files. eg.dxf "
          }
        },
        "required": [
          "object",
          "id",
          "floor_id",
          "start_point_id",
          "end_point_id",
          "arc_height",
          "height",
          "width",
          "type",
          "archived"
        ]
      },
      "PostPropertiesPropertyBuildingsBuildingFloorsFloorObjectsBody-social-tables-api": {
        "properties": {
          "object": {
            "type": "object",
            "description": "See the POST endpoint for the floor for details on all the body fields that can be sent. In addition, this endpoint supports a field objects which can contain any number of Object objects. An Object object can contain the fields described below: "
          },
          "id": {
            "type": "number",
            "description": "ID of the object to update "
          },
          "floor_id": {
            "type": "number",
            "description": "ID of the floor on which to place the object "
          },
          "boundary_id": {
            "type": "number",
            "description": "ID of the boundary to associate the object with "
          },
          "x": {
            "type": "number",
            "description": "X-coordinate of the object on the floor "
          },
          "y": {
            "type": "number",
            "description": "Y-coordinate of the object on the floor "
          },
          "type": {
            "type": "string",
            "description": "Type of object being sent "
          },
          "json_config": {
            "type": "string",
            "description": "JSON-serialized parameters for the object, depending on the type. "
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the object is deleted "
          }
        },
        "required": [
          "object",
          "id",
          "floor_id",
          "boundary_id",
          "x",
          "y",
          "type",
          "json_config",
          "archived"
        ]
      },
      "PostPropertiesPropertyBuildingsBuildingFloorsFloorRoomsBody-social-tables-api": {
        "properties": {
          "object": {
            "type": "object",
            "description": "See the POST endpoint for the floor for details on all the body fields that can be sent. In addition, this endpoint supports a field rooms which can contain any number of Room objects. A Room object can contain the fields described below: "
          },
          "boundaryIds": {
            "type": "string",
            "description": "Array of IDs of boundaries that are contained in the room. "
          },
          "end_boundary_id": {
            "type": "number",
            "description": "ID of the boundary that is the &#39;last&#39; in circumscribing the room. "
          },
          "floor_id": {
            "type": "number",
            "description": "ID of the floor that contains the room "
          },
          "id": {
            "type": "number",
            "description": "ID of the room to update "
          },
          "inner_rooms": {
            "type": "string",
            "description": "Array of IDs of rooms contained within the room "
          },
          "is_stairs": {
            "type": "boolean",
            "description": "Whether the room is a staircase "
          },
          "name": {
            "type": "string",
            "description": "Name for the room "
          },
          "stair_count": {
            "type": "number",
            "description": "How many stairs in the staircase "
          },
          "stair_direction": {
            "type": "number",
            "description": "Direction the stairs face "
          },
          "start_boundary_id": {
            "type": "number",
            "description": "The ID of the boundary that is the first in circumscribing the room "
          }
        },
        "required": [
          "object",
          "boundaryIds",
          "end_boundary_id",
          "floor_id",
          "id",
          "inner_rooms",
          "is_stairs",
          "name",
          "stair_count",
          "stair_direction",
          "start_boundary_id"
        ]
      },
      "PostInspectionsBody-social-tables-api": {
        "properties": {
          "json": {
            "type": "string",
            "description": "Any data structured as an object to be associated with the inspection "
          }
        }
      },
      "PutInspectionsInspectionidBody-social-tables-api": {
        "properties": {
          "json": {
            "type": "string",
            "description": "Any data structured as an object to be associated with the inspection "
          }
        }
      },
      "PutBookableRoomsBookable_roomLayoutsLayoutBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the layout "
          },
          "team_id": {
            "type": "string",
            "description": "ID of the team that should own the layout "
          }
        }
      },
      "PostBookableRoomsBookable_roomLayoutsBody-social-tables-api": {
        "properties": {
          "include_floor_elements": {
            "type": "string",
            "description": "If provided, returns the newly created layout with floor elements attached "
          },
          "include_floor_element_groups": {
            "type": "string",
            "description": "If provided, returns the newly created layout with floor element groups attached "
          },
          "space_id": {
            "type": "number",
            "description": "ID of the space from which to create the layout "
          },
          "name": {
            "type": "string",
            "description": "Name for the new layout "
          },
          "team_id": {
            "type": "number",
            "description": "ID of the team who should own the layout -- if this is not provided, it             defaults to the team creating the layout. "
          }
        },
        "required": [
          "space_id",
          "name"
        ]
      },
      "PostSpacesSpaceLineAttachmentsBody-social-tables-api": {
        "properties": {
          "each": {
            "type": "string",
            "description": "element is an object of the attached line user going to create "
          }
        },
        "required": [
          "each"
        ]
      },
      "PutSpacesSpaceLineAttachmentsIdBody-social-tables-api": {
        "properties": {
          "line_attach_data": {
            "type": "string",
            "description": "for updating this line attachment "
          }
        },
        "required": [
          "line_attach_data"
        ]
      },
      "PutTeamsTeamEventsEventSpacesSpaceMealsMealBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the meal "
          },
          "color": {
            "type": "string",
            "description": "color of the meal "
          },
          "random_id": {
            "type": "string",
            "description": "random_id for the meal "
          }
        }
      },
      "PostTeamsTeamEventsEventSpacesSpaceMealsBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the meal "
          },
          "color": {
            "type": "string",
            "description": "color of the meal "
          },
          "random_id": {
            "type": "string",
            "description": "random_id for the meal "
          }
        }
      },
      "PostMetricsBody-social-tables-api": {
        "properties": {
          "source": {
            "type": "string",
            "description": "the application who wants a metric processed "
          },
          "date": {
            "type": "string",
            "description": "Date in ISO-8601 format that the metric occurred "
          },
          "type": {
            "type": "string",
            "description": "the type of metric being tracked "
          },
          "json": {
            "type": "object",
            "description": "blob data specific to this metric "
          }
        },
        "required": [
          "source",
          "date",
          "type"
        ]
      },
      "PostUsageMetricsBody-social-tables-api": {
        "properties": {
          "metricName": {
            "type": "string",
            "description": "Name of the metric to record "
          },
          "userId": {
            "type": "number",
            "description": "ID of the user performing the action to record a metric for "
          },
          "salesForceId": {
            "type": "number",
            "description": "SalesForce identifier for the acting user "
          },
          "metaData": {
            "type": "string",
            "description": "Arbitrary metadata "
          }
        },
        "required": [
          "metricName",
          "userId",
          "salesForceId",
          "metaData"
        ]
      },
      "PostOnsiteBody-social-tables-api": {
        "properties": {
          "json": {
            "type": "string",
            "description": "Any JSON-serialized data to store for the onsite configuration settings. "
          }
        },
        "required": [
          "json"
        ]
      },
      "PutOnsiteOnsiteBody-social-tables-api": {
        "properties": {
          "json": {
            "type": "string",
            "description": "Any JSON-serialized data to store for the onsite configuration settings. "
          }
        },
        "required": [
          "json"
        ]
      },
      "PostPlacesBody-social-tables-api": {
        "properties": {
          "source_id": {
            "type": "string",
            "description": "ID of the place in the source&#39;s data-set "
          },
          "source": {
            "type": "string",
            "description": "Source of the place entry, e.g. foursquare "
          },
          "json": {
            "type": "object",
            "description": "Any metadata associated with the place "
          }
        },
        "required": [
          "source_id",
          "source",
          "json"
        ]
      },
      "PutPlacesPlaceBody-social-tables-api": {
        "properties": {
          "place_data": {
            "type": "string",
            "description": "See the POST endpoint for details on what fields to send to this endpoint. "
          }
        },
        "required": [
          "place_data"
        ]
      },
      "PostPropertiesBody-social-tables-api": {
        "properties": {
          "property": {
            "type": "number",
            "description": "ID of the property for which to update teams "
          },
          "property_data": {
            "type": "string",
            "description": "Property Data "
          }
        },
        "required": [
          "property",
          "property_data"
        ]
      },
      "PostPropertiesPropertyBody-social-tables-api": {
        "properties": {
          "property_data": {
            "type": "string",
            "description": "Property Data "
          }
        },
        "required": [
          "property_data"
        ]
      },
      "PutPropertiesPropertyTeamsBody-social-tables-api": {
        "properties": {
          "team_data": {
            "type": "string",
            "description": "Team Data "
          }
        },
        "required": [
          "team_data"
        ]
      },
      "PutEventsEventSpacesSpaceBody-social-tables-api": {
        "properties": {
          "space_data": {
            "type": "string",
            "description": "See the POST endpoint for details on which fields are accepted. "
          }
        },
        "required": [
          "space_data"
        ]
      },
      "PostEventsEventSpacesBody-social-tables-api": {
        "properties": {
          "bookable_room": {
            "type": "string",
            "description": "The ID of the bookable room that the space represents. This can be a smart floorplan (ID prefixed with S) or legacy floorplan (ID prefixed with L) "
          },
          "space_order": {
            "type": "number",
            "description": "The order in which the space will appear in Venue Mapper "
          },
          "name": {
            "type": "string",
            "description": "Name of the space "
          },
          "active": {
            "type": "boolean",
            "description": "Whether the space should be loaded as the currently active space in the web interface "
          },
          "added_dimension": {
            "type": "number",
            "description": "Prefunction perimeter, in inches "
          },
          "service_area_perimeter": {
            "type": "number",
            "description": "Perimeter around tables, in inches "
          },
          "width": {
            "type": "number",
            "description": "Width of the room if there is no floor plan specified, in inches) "
          },
          "length": {
            "type": "number",
            "description": "Length of the room if there is no floor plan specified, in inches) "
          },
          "address": {
            "type": "string",
            "description": "Street address "
          },
          "state": {
            "type": "string",
            "description": "State "
          },
          "city": {
            "type": "string",
            "description": "City "
          },
          "zip": {
            "type": "number",
            "description": "Zip Code "
          },
          "floorplan_image": {
            "type": "string",
            "description": "URL where the background image for the floor plan can be found "
          },
          "floor_background": {
            "type": "string",
            "description": "Tile choice if using a tiled or grass background for a floor plan "
          },
          "height": {
            "type": "number",
            "description": "Ceiling height of the floor plan "
          },
          "custom_bg_color": {
            "type": "string",
            "description": "Color for the background of the floor plan, as an RGB string "
          },
          "creator_id": {
            "type": "number",
            "description": "ID of the user that created the space "
          },
          "chair_type": {
            "type": "string",
            "description": "Default chair type for space "
          },
          "occupancy": {
            "type": "number",
            "description": "Expected number of occupants for a space "
          },
          "wall_texture": {
            "type": "string",
            "description": "Choice of texture to use on walls in 3D mode "
          },
          "wall_texture_imported": {
            "type": "string",
            "description": "Custom texture to use on walls in 3D mode "
          },
          "max_occupancy": {
            "type": "number",
            "description": "Maximum number of occupants for space "
          },
          "usable_space": {
            "type": "number",
            "description": "Avaliable square feet according to the fire code "
          },
          "attendee_count": {
            "type": "number",
            "description": "Number of attendees for space "
          },
          "exiting_required": {
            "type": "number",
            "description": "Width of exit area required by fire code "
          },
          "sq_ft_per_extinguisher": {
            "type": "number",
            "description": "Number of square feet per fire extinguisher "
          },
          "linen_texture": {
            "type": "string",
            "description": "Choice of texture to use on tables in 3D mode "
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether or not space has been deleted "
          },
          "img_url": {
            "type": "string",
            "description": "URL where an image can be found "
          },
          "thumb_img_url": {
            "type": "string",
            "description": "URL where a thumbnail image can be found "
          },
          "rotation": {
            "type": "number",
            "description": "Rotation of the space in the Venue Mapper interface "
          }
        },
        "required": [
          "bookable_room",
          "space_order",
          "name"
        ]
      },
      "PutEventsEventSpacesBody-social-tables-api": {
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "space_order": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "space_order"
        ]
      },
      "PostEventsEventSpacesSpaceCloneBody-social-tables-api": {
        "properties": {
          "noparams": {
            "type": "string",
            "description": "No body params "
          }
        },
        "required": [
          "noparams"
        ]
      },
      "PutTeamsTeamEventsEventSpacesSpaceTagsTagBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the tag "
          },
          "color": {
            "type": "string",
            "description": "color of the tag "
          },
          "random_id": {
            "type": "string",
            "description": "random_id for the tag "
          }
        }
      },
      "PostTeamsTeamEventsEventSpacesSpaceTagsBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the tag "
          },
          "color": {
            "type": "string",
            "description": "color of the tag "
          },
          "random_id": {
            "type": "string",
            "description": "random_id for the tag "
          }
        }
      },
      "PutTeamsTeamBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the team "
          },
          "admin_user_id": {
            "type": "number",
            "description": "ID of the admin user for the team "
          },
          "image": {
            "type": "string",
            "description": ".jpg or .png for team logo "
          },
          "pdf_whitelabel": {
            "type": "boolean",
            "description": "Whether to include the team&#39;s logo image in pdf printout (S3) "
          },
          "admin_user_email": {
            "type": "string",
            "description": "email address of the admin user for the team "
          },
          "user_limit": {
            "type": "number",
            "description": "maximum number of users for the team "
          },
          "areagen_defaults": {
            "type": "string",
            "description": "defaults for the team&#39;s templates "
          },
          "plan_type": {
            "type": "string",
            "description": ""
          },
          "plan_duration": {
            "type": "number",
            "description": "number of months the team&#39;s purchased plan is for "
          },
          "cancel_date": {
            "type": "string",
            "description": "date the account was cancelled "
          },
          "sf_account_id": {
            "type": "number",
            "description": "ID of the salesforce account associated with the team "
          },
          "parent_team_id": {
            "type": "number",
            "description": "ID of the parent team "
          },
          "inventory": {
            "type": "boolean",
            "description": "Whether the team can use inventory management (VM2) "
          },
          "can_use_fpc": {
            "type": "boolean",
            "description": "Whether team can use FPC "
          },
          "uses_metric": {
            "type": "boolean",
            "description": "Whether the team uses metric units "
          },
          "can_use_onsite": {
            "type": "boolean",
            "description": "Whether team can use Onsite "
          },
          "account_type": {
            "type": "string",
            "description": ""
          },
          "suspended": {
            "type": "boolean",
            "description": "Whether team is suspended "
          },
          "language": {
            "type": "string",
            "description": "language "
          },
          "client_type": {
            "type": "string",
            "description": "client type "
          },
          "payment_gateway": {
            "type": "string",
            "description": "name of payment gateway used for team "
          },
          "payment_gateway_token": {
            "type": "string",
            "description": "payment gateway token "
          }
        }
      },
      "PostTeamsTeamSettingsBody-social-tables-api": {
        "properties": {
          "team-setting-attribute-name": {
            "type": "string",
            "description": "format: {team-setting-attribute-name: &quot;value&quot;} "
          }
        },
        "required": [
          "team-setting-attribute-name"
        ]
      },
      "PutTeamsTeamPropertiesBody-social-tables-api": {
        "properties": {
          "propertyIds": {
            "type": "string",
            "description": "for the team "
          }
        },
        "required": [
          "propertyIds"
        ]
      },
      "PostTeamsBody-social-tables-api": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the team "
          },
          "admin_user_id": {
            "type": "number",
            "description": "ID of the admin user for the team "
          },
          "image": {
            "type": "string",
            "description": ".jpg or .png for team logo "
          },
          "pdf_whitelabel": {
            "type": "boolean",
            "description": "Whether to include the team&#39;s logo image in pdf printout (S3) "
          },
          "admin_user_email": {
            "type": "string",
            "description": "email address of the admin user for the team "
          },
          "user_limit": {
            "type": "number",
            "description": "maximum number of users for the team "
          },
          "areagen_defaults": {
            "type": "string",
            "description": "defaults for the team&#39;s templates "
          },
          "plan_type": {
            "type": "string",
            "description": ""
          },
          "plan_duration": {
            "type": "number",
            "description": "number of months the team&#39;s purchased plan is for "
          },
          "cancel_date": {
            "type": "string",
            "description": "date the account was cancelled "
          },
          "sf_account_id": {
            "type": "number",
            "description": "ID of the salesforce account associated with the team "
          },
          "parent_team_id": {
            "type": "number",
            "description": "ID of the parent team "
          },
          "inventory": {
            "type": "boolean",
            "description": "Whether the team can use inventory management (VM2) "
          },
          "can_use_fpc": {
            "type": "boolean",
            "description": "Whether team can use FPC "
          },
          "uses_metric": {
            "type": "boolean",
            "description": "Whether the team uses metric units "
          },
          "can_use_onsite": {
            "type": "boolean",
            "description": "Whether team can use Onsite "
          },
          "account_type": {
            "type": "string",
            "description": ""
          },
          "suspended": {
            "type": "boolean",
            "description": "Whether team is suspended "
          },
          "language": {
            "type": "string",
            "description": "language "
          },
          "client_type": {
            "type": "string",
            "description": "client type "
          },
          "payment_gateway": {
            "type": "string",
            "description": "name of payment gateway used for team "
          },
          "payment_gateway_token": {
            "type": "string",
            "description": "payment gateway token "
          }
        }
      },
      "PutUserUserSpacesSpaceSettingsNameBody-social-tables-api": {
        "properties": {
          "data": {
            "type": "string",
            "description": "describing the setting "
          }
        },
        "required": [
          "data"
        ]
      },
      "PostUsersUserSpacesSpaceSettingsSettingBody-social-tables-api": {
        "properties": {
          "data": {
            "type": "string",
            "description": "describing the setting "
          }
        },
        "required": [
          "data"
        ]
      },
      "PostUsersUserFavoriteBookableRoomsBookable_roomBody-social-tables-api": {
        "properties": {
          "data": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "data"
        ]
      },
      "PostUsersUserSettingsBody-social-tables-api": {
        "properties": {
          "language": {
            "type": "string",
            "description": "ISO language code to set as the user&#39;s default         // TODO: MANY MORE "
          }
        },
        "required": [
          "language"
        ]
      },
      "PostUsersBody-social-tables-api": {
        "properties": {
          "first_name": {
            "type": "string",
            "description": "for the new user "
          },
          "last_name": {
            "type": "string",
            "description": "for the new user "
          },
          "email_address": {
            "type": "string",
            "description": "for the new user "
          }
        },
        "required": [
          "first_name",
          "last_name",
          "email_address"
        ]
      },
      "PutUsersUserBody-social-tables-api": {
        "properties": {
          "first_name": {
            "type": "string",
            "description": "for the new user "
          },
          "last_name": {
            "type": "string",
            "description": "for the new user "
          },
          "opt_out": {
            "type": "boolean",
            "description": "for the new user "
          }
        },
        "required": [
          "first_name",
          "last_name",
          "opt_out"
        ]
      },
      "Space-social-tables-api": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "venue_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "wizard": {
            "$ref": "#/definitions/Wizard-social-tables-api"
          }
        }
      },
      "Wizard-social-tables-api": {
        "type": "object",
        "required": [
          "setup",
          "attendees",
          "spacing",
          "table"
        ],
        "properties": {
          "attendees": {
            "type": "integer"
          },
          "setup": {
            "type": "string",
            "enum": [
              "staggered",
              "aligned",
              "classroom"
            ]
          },
          "spacing": {
            "$ref": "#/definitions/Spacing-social-tables-api"
          },
          "table": {
            "$ref": "#/definitions/Table-social-tables-api"
          }
        }
      },
      "Spacing-social-tables-api": {
        "type": "object",
        "required": [
          "x",
          "y"
        ],
        "properties": {
          "x": {
            "type": "integer"
          },
          "y": {
            "type": "integer"
          }
        }
      },
      "Table-social-tables-api": {
        "type": "object",
        "required": [
          "type",
          "chairs",
          "size"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "chairs": {
            "type": "integer"
          },
          "size": {
            "$ref": "#/definitions/TableSize-social-tables-api"
          }
        }
      },
      "TableSize-social-tables-api": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer"
          },
          "length": {
            "type": "integer"
          },
          "radius": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "data-legacy-vm3-routes": {
        "properties": {
          
        }
      },
      "PostTeamsTeamEventsEventAttendeesBody-legacy-vm3-routes": {
        "properties": {
          "first_name": {
            "type": "string",
            "description": "First name of the attendee "
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the attendee "
          },
          "organization": {
            "type": "string",
            "description": "Organization the attendee is representing "
          },
          "event_table_id": {
            "type": "number",
            "description": "ID of the table the attendee is seated at "
          },
          "seat_number": {
            "type": "number",
            "description": "Number of the seat the attendee is seated at "
          },
          "email_address": {
            "type": "string",
            "description": "Email address of the attendee "
          },
          "check_in": {
            "type": "boolean",
            "description": "Whether or not the user has checked in "
          },
          "chain": {
            "type": "number",
            "description": "ID of the &quot;group&quot; the attendee is in "
          },
          "creator_id": {
            "type": "number",
            "description": "ID of the creating user "
          },
          "title": {
            "type": "string",
            "description": "Title for the attendee "
          },
          "notes": {
            "type": "string",
            "description": "Any notes regarding the specific attendee "
          },
          "meal_id": {
            "type": "number",
            "description": "Meal assigned to the attendee "
          },
          "gender": {
            "type": "string",
            "description": "Gender of the attendee "
          },
          "honorific": {
            "type": "string",
            "description": "Honorific prefix for addressing the attendee "
          },
          "guest_avatar": {
            "type": "string",
            "description": "URL to an avatar image for the attendee "
          },
          "custom1": {
            "type": "string",
            "description": "Data for Attendee Manager custom field 1 "
          },
          "custom2": {
            "type": "string",
            "description": "Data for Attendee Manager custom field 2 "
          },
          "custom3": {
            "type": "string",
            "description": "Data for Attendee Manager custom field 3 "
          },
          "space_id": {
            "type": "number",
            "description": "ID of the space in which to place the attendee "
          },
          "checkin_time": {
            "type": "string",
            "description": "When the attendee checked in "
          },
          "random_id": {
            "type": "string",
            "description": "Random-number GUID to identify the attendee "
          },
          "meal_ids": {
            "type": "string",
            "description": "Comma-separated list of meal IDs for the attendee "
          },
          "tag_ids": {
            "type": "string",
            "description": "Comma-separated list of tag IDs for the attendee "
          },
          "wheel_chair": {
            "type": "boolean",
            "description": "Whether the attendee requires a wheelchair "
          },
          "checkin_user_email": {
            "type": "string",
            "description": "Email address of the user who checked in the attendee "
          }
        }
      },
      "PutTeamsTeamEventsEventAttendeesAttendeeBody-legacy-vm3-routes": {
        "properties": {
          "first_name": {
            "type": "string",
            "description": "First name of the attendee "
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the attendee "
          },
          "organization": {
            "type": "string",
            "description": "Organization the attendee is representing "
          },
          "event_table_id": {
            "type": "number",
            "description": "ID of the table the attendee is seated at "
          },
          "seat_number": {
            "type": "number",
            "description": "Number of the seat the attendee is seated at "
          },
          "email_address": {
            "type": "string",
            "description": "Email address of the attendee "
          },
          "check_in": {
            "type": "boolean",
            "description": "Whether or not the user has checked in "
          },
          "chain": {
            "type": "number",
            "description": "ID of the &quot;group&quot; the attendee is in "
          },
          "creator_id": {
            "type": "number",
            "description": "ID of the creating user "
          },
          "title": {
            "type": "string",
            "description": "Title for the attendee "
          },
          "notes": {
            "type": "string",
            "description": "Any notes regarding the specific attendee "
          },
          "meal_id": {
            "type": "number",
            "description": "Meal assigned to the attendee "
          },
          "gender": {
            "type": "string",
            "description": "Gender of the attendee "
          },
          "honorific": {
            "type": "string",
            "description": "Honorific prefix for addressing the attendee "
          },
          "guest_avatar": {
            "type": "string",
            "description": "URL to an avatar image for the attendee "
          },
          "custom1": {
            "type": "string",
            "description": "Data for Attendee Manager custom field 1 "
          },
          "custom2": {
            "type": "string",
            "description": "Data for Attendee Manager custom field 2 "
          },
          "custom3": {
            "type": "string",
            "description": "Data for Attendee Manager custom field 3 "
          },
          "space_id": {
            "type": "number",
            "description": "ID of the space in which to place the attendee "
          },
          "checkin_time": {
            "type": "string",
            "description": "When the attendee checked in "
          },
          "random_id": {
            "type": "string",
            "description": "Random-number GUID to identify the attendee "
          },
          "meal_ids": {
            "type": "string",
            "description": "Comma-separated list of meal IDs for the attendee "
          },
          "tag_ids": {
            "type": "string",
            "description": "Comma-separated list of tag IDs for the attendee "
          },
          "wheel_chair": {
            "type": "boolean",
            "description": "Whether the attendee requires a wheelchair "
          },
          "checkin_user_email": {
            "type": "string",
            "description": "Email address of the user who checked in the attendee "
          }
        }
      },
      "PostTeamsTeamEventsEventAttendeeAttendeeAvatarBody-legacy-vm3-routes": {
        "properties": {
          "Raw": {
            "type": "string",
            "description": "file data submitted using multipart/form-data encoding. This endpoint expects image files -- we suggest JPEG or PNG format. "
          }
        },
        "required": [
          "Raw"
        ]
      },
      "PostPropertiesPropertyBuildingsBuildingFloorsFloorBookableRoomsBookable_roomBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the bookable room "
          },
          "rooms": {
            "type": "string",
            "description": "Array of IDs for the rooms the bookable room contains "
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the bookable room is archived "
          },
          "description": {
            "type": "string",
            "description": "Description of the bookable room "
          },
          "images": {
            "type": "object",
            "description": "Object describing the images available for the bookable room "
          },
          "event_types": {
            "type": "string",
            "description": "Array of types of events that the room supports "
          },
          "floor_id": {
            "type": "number",
            "description": "ID of the floor containing the bookable room "
          },
          "rotation": {
            "type": "number",
            "description": "Degrees of rotation for the bookable room floorplan "
          },
          "onsite": {
            "type": "boolean",
            "description": "Whether the bookable room is part of an Onsite "
          }
        },
        "required": [
          "name",
          "rooms",
          "archived",
          "description",
          "images",
          "event_types",
          "floor_id",
          "rotation",
          "onsite"
        ]
      },
      "PostBookableroomsBookable_roomMetadataBody-legacy-vm3-routes": {
        "properties": {
          "bookable_room_data": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "bookable_room_data"
        ]
      },
      "PostPropertiesPropertyBuildingsBuildingFloorsFloorBookableRoomsBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the new bookable room "
          },
          "rooms": {
            "type": "string",
            "description": "Array of IDs for the rooms the bookable room contains "
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the bookable room is archived "
          },
          "description": {
            "type": "string",
            "description": "Description of the bookable room "
          },
          "images": {
            "type": "object",
            "description": "Object describing the images available for the bookable room "
          },
          "event_types": {
            "type": "string",
            "description": "Array of types of events that the room supports "
          },
          "floor_id": {
            "type": "number",
            "description": "ID of the floor containing the bookable room "
          },
          "rotation": {
            "type": "number",
            "description": "Degrees of rotation for the bookable room floorplan "
          },
          "onsite": {
            "type": "boolean",
            "description": "Whether the bookable room is part of an Onsite "
          }
        },
        "required": [
          "name",
          "rooms",
          "archived",
          "description",
          "images",
          "event_types",
          "floor_id",
          "rotation",
          "onsite"
        ]
      },
      "PostPropertiesPropertyBuildingsBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the building "
          },
          "address": {
            "type": "string",
            "description": "Address of the building "
          }
        },
        "required": [
          "name",
          "address"
        ]
      },
      "PostPropertiesPropertyBuildingsBuildingBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the building "
          },
          "address": {
            "type": "string",
            "description": "Address of the building "
          }
        },
        "required": [
          "name",
          "address"
        ]
      },
      "PutCatalogsCatalogBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this catalog "
          },
          "team_id": {
            "type": "number",
            "description": "ID of the team that &quot;owns&quot; this catalog "
          },
          "view_type": {
            "type": "string",
            "description": "Visibility of this catalog "
          },
          "published": {
            "type": "boolean",
            "description": "Whether or not the catalog is published "
          },
          "published_by": {
            "type": "number",
            "description": "ID of the user that published the catalog "
          }
        }
      },
      "PutCatalogsCatalogCategoriesCategoryBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this category "
          }
        },
        "required": [
          "name"
        ]
      },
      "PutCatalogsCatalogCategoriesCategoryTypesTypeBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this type "
          },
          "attributes": {
            "type": "object",
            "description": "An Object describing the type&#39;s attributes "
          },
          "schema": {
            "type": "string",
            "description": "Whether the type is a &#39;table&#39; (seatable) or &#39;object&#39; (non-             seatable) item. Most types should be objects. "
          },
          "thumbnail": {
            "type": "string",
            "description": "Path to the type&#39;s thumbnail image "
          },
          "shape": {
            "type": "string",
            "description": "Shape that dictates the type&#39;s             behavior, e.g. circle-shaped types change size with their radius while rectangle-shaped types change size based on             width and length attributes. "
          }
        }
      },
      "PutCatalogsCatalogCategoriesCategoryTypesTypeItemsItemBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this item "
          },
          "attributes": {
            "type": "object",
            "description": "An Object describing the item&#39;s attributes             (inherited from the parent type) "
          },
          "two_view": {
            "type": "object",
            "description": "An Object describing the WebGL data necessary to             render the object in 2D -- this requires meshes and icons fields, at least. "
          },
          "three_view": {
            "type": "object",
            "description": "An Object describing the WebGL data necessary to             render the object in 3D -- this requires at least a mesh field. "
          },
          "thumbnail": {
            "type": "string",
            "description": "Path to the item&#39;s thumbnail image "
          }
        }
      },
      "PostCatalogsCatalogBlacklisted_teamsTeamBody-legacy-vm3-routes": {
        "properties": {
          "data": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "data"
        ]
      },
      "PostCatalogsBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this catalog "
          },
          "team_id": {
            "type": "number",
            "description": "ID of the team that &quot;owns&quot; this catalog "
          },
          "view_type": {
            "type": "string",
            "description": "Visibility of this catalog "
          },
          "published": {
            "type": "boolean",
            "description": "Whether or not the catalog is published "
          },
          "published_by": {
            "type": "number",
            "description": "ID of the user that published the catalog "
          }
        },
        "required": [
          "name",
          "team_id",
          "view_type",
          "published",
          "published_by"
        ]
      },
      "PostCatalogsCatalogCategoriesBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this category "
          }
        },
        "required": [
          "name"
        ]
      },
      "PostCatalogsCatalogCategoriesCategoryTypesBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this type "
          },
          "attributes": {
            "type": "object",
            "description": "An Object describing the type&#39;s attributes -- this is a map of attribute             names to nested objects holding the value and whether or not the attribute is &quot;fixed&quot; i.e. editable. "
          },
          "schema": {
            "type": "string",
            "description": "Whether the type is a &#39;table&#39; (seatable) or &#39;object&#39; (non-             seatable) item. Most types should be objects. "
          },
          "thumbnail": {
            "type": "string",
            "description": "Path to the type&#39;s thumbnail image "
          },
          "shape": {
            "type": "string",
            "description": "Shape that dictates the type&#39;s             behavior, e.g. circle-shaped types change size with their radius while rectangle-shaped types change size based on             width and length attributes. "
          }
        },
        "required": [
          "name",
          "attributes",
          "schema",
          "thumbnail",
          "shape"
        ]
      },
      "PostCatalogsCatalogCategoriesCategoryTypesTypeItemsBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for this item "
          },
          "attributes": {
            "type": "object",
            "description": "An Object describing the item&#39;s attributes             (inherited from the parent type) "
          },
          "two_view": {
            "type": "object",
            "description": "An Object describing the WebGL data necessary to             render the object in 2D -- this requires meshes and icons fields, at least. "
          },
          "three_view": {
            "type": "object",
            "description": "An Object describing the WebGL data necessary to             render the object in 3D -- this requires at least a mesh field. "
          },
          "thumbnail": {
            "type": "string",
            "description": "Path to the item&#39;s thumbnail image "
          }
        },
        "required": [
          "name",
          "attributes",
          "two_view",
          "three_view",
          "thumbnail"
        ]
      },
      "PostEventsEventidCollaboratorsBody-legacy-vm3-routes": {
        "properties": {
          "email_address": {
            "type": "string",
            "description": "Address of the user to add. An             email will be sent to this address with a link to the shared event. "
          },
          "role_id": {
            "type": "number",
            "description": "ID of the role to give this collaborator "
          }
        },
        "required": [
          "email_address",
          "role_id"
        ]
      },
      "PostEventsEventidRolesBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A memorable name for this role "
          },
          "permission_level": {
            "type": "string",
            "description": "Short             description of the permissions to give this role for this event, i.e.         - `view` means the collaborator can only view the event, but not edit it         - `manipulate` means the collaborator can update objects that are currently             in the event, but not create new objects or spaces         - `edit` means the collaborator has full editing privileges "
          }
        },
        "required": [
          "name",
          "permission_level"
        ]
      },
      "PutEventEventSettingsNameBody-legacy-vm3-routes": {
        "properties": {
          "data": {
            "type": "object",
            "description": "describing the setting "
          }
        },
        "required": [
          "data"
        ]
      },
      "PutEventsEventidCollaboratorsCollaboratoridBody-legacy-vm3-routes": {
        "properties": {
          "new": {
            "type": "number",
            "description": "role_id ID of the collaborator "
          },
          "previous_role_id": {
            "type": "number",
            "description": "current role_id of collaborator "
          }
        },
        "required": [
          "new",
          "previous_role_id"
        ]
      },
      "PutTeamsTeamEventsEventBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the event "
          },
          "category": {
            "type": "string",
            "description": "Category describing the event "
          },
          "public": {
            "type": "boolean",
            "description": "Whether the event is publicly viewable or not "
          },
          "attendee_management": {
            "type": "boolean",
            "description": "Whether to activate attendee management for the event "
          },
          "start_time": {
            "type": "string",
            "description": "The event&#39;s start time. Note that this must be in ISO-8601 format, in UTC (YYYY-MM-DDTHH:mm:ss.sssZ) "
          },
          "end_time": {
            "type": "string",
            "description": "The event&#39;s end time. Note that this must be in ISO-8601 format (see above) "
          },
          "uses_metric": {
            "type": "boolean",
            "description": "Whether to use metric measurements "
          },
          "collaborators_expire_at": {
            "type": "string",
            "description": "Date when collaborators&#39; access expires. If provided, this must be in ISO-8601 format (see above). "
          },
          "screenshot_url": {
            "type": "string",
            "description": "URL where a screenshot of the event floor can be found "
          },
          "is_archived": {
            "type": "number",
            "description": "If 0, the event is unarchived. If 1, the event is archived "
          },
          "user_id": {
            "type": "number",
            "description": "The id of the Social Tables user to associate with the event "
          },
          "team_id": {
            "type": "number",
            "description": "The id of the Social Tables team to associate with the event "
          }
        }
      },
      "PostTeamsTeamEventsBody-legacy-vm3-routes": {
        "type": "object",
        "required": [
          "name",
          "category",
          "spaces"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "attendee_management": {
            "type": "boolean"
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          },
          "uses_metric": {
            "type": "boolean"
          },
          "venue_mapper_version": {
            "type": "integer"
          },
          "spaces": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Space-legacy-vm3-routes"
            }
          }
        }
      },
      "PostEventsEventCloneBody-legacy-vm3-routes": {
        "properties": {
          "data": {
            "type": "string",
            "description": "body params "
          }
        },
        "required": [
          "data"
        ]
      },
      "PutTeamsTeamFavoritesFavoriteBody-legacy-vm3-routes": {
        "properties": {
          "data": {
            "type": "string",
            "description": "See the POST endpoint for details on which fields are accepted. "
          }
        }
      },
      "PutUserUserFavoritesFavoriteBody-legacy-vm3-routes": {
        "properties": {
          "favorite_data": {
            "type": "string",
            "description": "See the POST endpoint for what fields are accepted. "
          }
        },
        "required": [
          "favorite_data"
        ]
      },
      "PostTeamsTeamFavoritesBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the favorite "
          },
          "is_table": {
            "type": "boolean",
            "description": "Whether the favorite is a table "
          },
          "data": {
            "type": "string",
            "description": "JSON-serialized data describing the favorite "
          },
          "order": {
            "type": "number",
            "description": "Order in which the favorite should appear in the list of favorites "
          },
          "product": {
            "type": "string",
            "description": "Product for which the favorite should be available "
          }
        },
        "required": [
          "name",
          "is_table",
          "data",
          "order",
          "product"
        ]
      },
      "PostUsersUserFavoritesBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the favorite "
          },
          "is_table": {
            "type": "boolean",
            "description": "Whether the favorite is a table "
          },
          "data": {
            "type": "string",
            "description": "JSON-serialized data describing the favorite "
          },
          "order": {
            "type": "number",
            "description": "Order in which the favorite should appear in the list of favorites "
          },
          "product": {
            "type": "string",
            "description": "Product for which the favorite should be available "
          }
        },
        "required": [
          "name",
          "is_table",
          "data",
          "order",
          "product"
        ]
      },
      "PostTeamsTeamFeaturesFeatureBody-legacy-vm3-routes": {
        "properties": {
          "start_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "end_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "expiration_type": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "start_date",
          "end_date",
          "expiration_type"
        ]
      },
      "PutTeamsTeamFeaturesFeatureBody-legacy-vm3-routes": {
        "properties": {
          "start_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "end_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "expiration_type": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "start_date",
          "end_date",
          "expiration_type"
        ]
      },
      "PostTeamsTeamFeaturesBody-legacy-vm3-routes": {
        "properties": {
          "products": {
            "type": "object",
            "description": "Object describing the feature-set to create, with a             feature name as the key and an object containing feature data as the value. Each feature             entry is described under the Products sub-description. "
          },
          "package": {
            "type": "object",
            "description": "Object describing a bundle of features to assign. "
          },
          "start_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "end_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "expiration_type": {
            "type": "string",
            "description": ""
          },
          "package_type": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "start_date",
          "end_date",
          "expiration_type",
          "package_type"
        ]
      },
      "PutTeamsTeamFeaturesBody-legacy-vm3-routes": {
        "properties": {
          "products": {
            "type": "object",
            "description": "Object describing the feature-set to create, with a             feature name as the key and an object containing feature data as the value. Each feature             entry is described under the Products sub-description. "
          },
          "package": {
            "type": "object",
            "description": "Object describing a bundle of features to assign. "
          },
          "start_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "end_date": {
            "type": "string",
            "description": "Date in ISO-8601 format "
          },
          "expiration_type": {
            "type": "string",
            "description": ""
          },
          "package_type": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "start_date",
          "end_date",
          "expiration_type",
          "package_type"
        ]
      },
      "PutSpacesSpaceidElementGroupsGroupidBody-legacy-vm3-routes": {
        "properties": {
          "color": {
            "type": "string",
            "description": "Color to associate with the group (e.g. in a listing or overlay) -- this must be one of the HTML-safe colors as described here: http://www.w3schools.com/html/html_colornames.asp "
          },
          "name": {
            "type": "string",
            "description": "Name for the group "
          },
          "json": {
            "type": "object",
            "description": "Any data structured as an object to be associated with the group "
          }
        }
      },
      "PostSpacesSpaceidElementGroupsBody-legacy-vm3-routes": {
        "properties": {
          "color": {
            "type": "string",
            "description": "Color to associate with the group (e.g. in a listing or overlay) -- this must be one of the HTML-safe colors as described here: http://www.w3schools.com/html/html_colornames.asp "
          },
          "name": {
            "type": "string",
            "description": "Name for the group "
          },
          "json": {
            "type": "object",
            "description": "Any data structured as an object to be associated with the group "
          }
        },
        "required": [
          "name",
          "json"
        ]
      },
      "PostTeamsTeamEventsEventElementsBody-legacy-vm3-routes": {
        "properties": {
          "fetch_updates": {
            "type": "string",
            "description": "Fetches all created records back from the database to return and send out through the real-time update channel. Otherwise, responds with the sent data immediately -- note this is much faster, so set this to false if performance is a concern. "
          },
          "array": {
            "type": "string",
            "description": "An array of floor-elements, either Table or Object objects, as described below: "
          },
          "layout": {
            "type": "string",
            "description": "The &quot;layout&quot; for the element, describing its shape and size -- for example, table-circle-60 describes a circular table with a 60-inch radius. "
          },
          "space_id": {
            "type": "number",
            "description": "The ID of the space the floor-element should be placed in. "
          },
          "name": {
            "type": "string",
            "description": "A name for the floor-element. "
          },
          "pos_x": {
            "type": "number",
            "description": "The x-coordinate for the element on the floor plan. "
          },
          "pos_y": {
            "type": "number",
            "description": "The y-coordinate for the element on the floor plan. "
          },
          "chair_count": {
            "type": "number",
            "description": "The number of chairs at the table. "
          },
          "side_1_count": {
            "type": "number",
            "description": "The number of chairs on the &#39;left&#39; side of the table. Note that for circular tables, this should be equal to chair_count, and none of the other sides should have chairs. "
          },
          "side_2_count": {
            "type": "number",
            "description": "The number of chairs on the &#39;top&#39; side of the table. "
          },
          "side_3_count": {
            "type": "number",
            "description": "The number of chairs on the &#39;right&#39; side of the table. "
          },
          "side_4_count": {
            "type": "number",
            "description": "The number of chairs on the &#39;bottom&#39; side of the table. "
          },
          "rotation": {
            "type": "number",
            "description": "The amount of rotation of the table, in degrees clockwise. "
          },
          "color": {
            "type": "string",
            "description": "The color to fill the table with. "
          },
          "logo": {
            "type": "string",
            "description": "The URL to a logo image to add to the table. "
          },
          "seat_color": {
            "type": "string",
            "description": "The color to fill the table&#39;s seats with. "
          },
          "table_num": {
            "type": "number",
            "description": "The table&#39;s number, to be displayed in the floor plan. "
          },
          "seat_num_start": {
            "type": "number",
            "description": "The number at which seat-numbering starts at this table. "
          },
          "width": {
            "type": "number",
            "description": "The width of the table, in inches. "
          },
          "length": {
            "type": "number",
            "description": "The length of the table, in inches. "
          },
          "radius": {
            "type": "number",
            "description": "The radius of the table, in inches. "
          },
          "group_id": {
            "type": "number",
            "description": "The ID of a floor-element group the table is associated with. "
          },
          "font_size": {
            "type": "number",
            "description": "The size of the font used for the table&#39;s labels. "
          },
          "layer": {
            "type": "number",
            "description": "The display layer to show the table in. "
          },
          "right_to_left_seats": {
            "type": "boolean",
            "description": "Whether to number seats from right-to-left rather than the default left-to-right ordering. "
          },
          "even_odd_seats": {
            "type": "boolean",
            "description": "Whether to number seats with even numbers on one side and odd numbers on the other. "
          },
          "removed_seats": {
            "type": "number",
            "description": "The number of &quot;seat&quot; spaces removed for crescent tables. "
          },
          "random_id": {
            "type": "string",
            "description": "A randomly-generated UUID for the floor-element. "
          },
          "service_area_id": {
            "type": "number",
            "description": "The ID of the service area the table is in. "
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the table has been deleted. "
          },
          "chair_type": {
            "type": "string",
            "description": "The type of chairs to place at the table. "
          },
          "chair_width": {
            "type": "number",
            "description": "The width of the chairs at the table, in inches. "
          },
          "chair_length": {
            "type": "number",
            "description": "The length of the chairs at the table, in inches. "
          },
          "section": {
            "type": "string",
            "description": "The name of the section the table is in -- for theatre rows. "
          },
          "invId": {
            "type": "number",
            "description": "The internal inventory-tracking ID for the floor-element. "
          },
          "is_locked": {
            "type": "boolean",
            "description": "Whether the floor-element is &quot;locked&quot; from changes. "
          },
          "curvature": {
            "type": "number",
            "description": "The degree to which a theatre row should curve "
          },
          "path_def": {
            "type": "string",
            "description": "The SVG path definition for a custom-drawn object. "
          },
          "image": {
            "type": "string",
            "description": "A URL to a custom image to show, for image objects. "
          },
          "steps": {
            "type": "number",
            "description": "The number of steps on a stair object. "
          },
          "line_thickness": {
            "type": "number",
            "description": "The thickness of the line used to draw the object. "
          },
          "tile_width": {
            "type": "number",
            "description": "The width of the tiles in a dance floor object. "
          },
          "tile_length": {
            "type": "number",
            "description": "The length of the tiles in a dance floor object. "
          },
          "number": {
            "type": "number",
            "description": "The object&#39;s number on the floor plan. "
          }
        },
        "required": [
          "layout",
          "space_id"
        ]
      },
      "PutTeamsTeamEventsEventElementsBody-legacy-vm3-routes": {
        "properties": {
          "array": {
            "type": "string",
            "description": "See the POST endpoint for all the fields that are supported when updating elements. "
          }
        }
      },
      "PatchSpacesSpaceidElementsBody-legacy-vm3-routes": {
        "properties": {
          "array": {
            "type": "string",
            "description": "See the POST endpoint for all the fields that are supported when updating elements. "
          }
        }
      },
      "PostPropertiesPropertyBuildingsBuildingFloorsFloorBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the floor "
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the floor is &quot;archived&quot;, i.e. deleted. "
          },
          "floor_img": {
            "type": "string",
            "description": "URL to an image of the floor. "
          },
          "position": {
            "type": "number",
            "description": "The floor&#39;s position in the building (e.g. 3rd floor === 3) "
          },
          "scale": {
            "type": "number",
            "description": "The scale factor for the floor plan "
          },
          "building_id": {
            "type": "number",
            "description": "ID of the building the floor is in "
          },
          "property_id": {
            "type": "number",
            "description": "ID of the property the floor is in "
          },
          "save_state": {
            "type": "string",
            "description": "JSON-serialized copy of intermediate state "
          },
          "is_published": {
            "type": "boolean",
            "description": "Whether the floor should be viewable to customers "
          },
          "not_to_scale": {
            "type": "boolean",
            "description": "Whether floor plan is not to scale "
          }
        },
        "required": [
          "name",
          "archived",
          "floor_img",
          "position",
          "scale",
          "building_id",
          "property_id",
          "save_state",
          "is_published",
          "not_to_scale"
        ]
      },
      "PostPropertiesPropertyBuildingsBuildingFloorsFloorBoundariesBody-legacy-vm3-routes": {
        "properties": {
          "object": {
            "type": "object",
            "description": "See the POST endpoint for the floor for details on all the body fields that can be sent. In addition, this endpoint supports a field boundaries which can contain any number of Boundary objects. A Boundary object can contain the fields described below: "
          },
          "id": {
            "type": "number",
            "description": "ID of the boundary to update "
          },
          "floor_id": {
            "type": "number",
            "description": "ID of the floor on which to find the boundary "
          },
          "start_point_id": {
            "type": "number",
            "description": "ID of the point which is the &quot;start&quot; of the boundary "
          },
          "end_point_id": {
            "type": "number",
            "description": "ID of the point which is the &quot;end&quot; of the boundary "
          },
          "arc_height": {
            "type": "number",
            "description": "Height of the arc curve, if it is an arc boundary "
          },
          "height": {
            "type": "number",
            "description": "Height of the boundary "
          },
          "width": {
            "type": "number",
            "description": "Width of the boundary "
          },
          "type": {
            "type": "string",
            "description": "Type of the boundary "
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the boundary is deleted "
          },
          "root_id": {
            "type": "number",
            "description": "ID of the floor on which this floor is created. "
          },
          "conversion_type": {
            "type": "string",
            "description": "The type of conversion applied to cad files. eg.dxf "
          }
        },
        "required": [
          "object",
          "id",
          "floor_id",
          "start_point_id",
          "end_point_id",
          "arc_height",
          "height",
          "width",
          "type",
          "archived"
        ]
      },
      "PostPropertiesPropertyBuildingsBuildingFloorsFloorObjectsBody-legacy-vm3-routes": {
        "properties": {
          "object": {
            "type": "object",
            "description": "See the POST endpoint for the floor for details on all the body fields that can be sent. In addition, this endpoint supports a field objects which can contain any number of Object objects. An Object object can contain the fields described below: "
          },
          "id": {
            "type": "number",
            "description": "ID of the object to update "
          },
          "floor_id": {
            "type": "number",
            "description": "ID of the floor on which to place the object "
          },
          "boundary_id": {
            "type": "number",
            "description": "ID of the boundary to associate the object with "
          },
          "x": {
            "type": "number",
            "description": "X-coordinate of the object on the floor "
          },
          "y": {
            "type": "number",
            "description": "Y-coordinate of the object on the floor "
          },
          "type": {
            "type": "string",
            "description": "Type of object being sent "
          },
          "json_config": {
            "type": "string",
            "description": "JSON-serialized parameters for the object, depending on the type. "
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the object is deleted "
          }
        },
        "required": [
          "object",
          "id",
          "floor_id",
          "boundary_id",
          "x",
          "y",
          "type",
          "json_config",
          "archived"
        ]
      },
      "PostPropertiesPropertyBuildingsBuildingFloorsFloorRoomsBody-legacy-vm3-routes": {
        "properties": {
          "object": {
            "type": "object",
            "description": "See the POST endpoint for the floor for details on all the body fields that can be sent. In addition, this endpoint supports a field rooms which can contain any number of Room objects. A Room object can contain the fields described below: "
          },
          "boundaryIds": {
            "type": "string",
            "description": "Array of IDs of boundaries that are contained in the room. "
          },
          "end_boundary_id": {
            "type": "number",
            "description": "ID of the boundary that is the &#39;last&#39; in circumscribing the room. "
          },
          "floor_id": {
            "type": "number",
            "description": "ID of the floor that contains the room "
          },
          "id": {
            "type": "number",
            "description": "ID of the room to update "
          },
          "inner_rooms": {
            "type": "string",
            "description": "Array of IDs of rooms contained within the room "
          },
          "is_stairs": {
            "type": "boolean",
            "description": "Whether the room is a staircase "
          },
          "name": {
            "type": "string",
            "description": "Name for the room "
          },
          "stair_count": {
            "type": "number",
            "description": "How many stairs in the staircase "
          },
          "stair_direction": {
            "type": "number",
            "description": "Direction the stairs face "
          },
          "start_boundary_id": {
            "type": "number",
            "description": "The ID of the boundary that is the first in circumscribing the room "
          }
        },
        "required": [
          "object",
          "boundaryIds",
          "end_boundary_id",
          "floor_id",
          "id",
          "inner_rooms",
          "is_stairs",
          "name",
          "stair_count",
          "stair_direction",
          "start_boundary_id"
        ]
      },
      "PostInspectionsBody-legacy-vm3-routes": {
        "properties": {
          "json": {
            "type": "string",
            "description": "Any data structured as an object to be associated with the inspection "
          }
        }
      },
      "PutInspectionsInspectionidBody-legacy-vm3-routes": {
        "properties": {
          "json": {
            "type": "string",
            "description": "Any data structured as an object to be associated with the inspection "
          }
        }
      },
      "PutBookableRoomsBookable_roomLayoutsLayoutBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the layout "
          },
          "team_id": {
            "type": "string",
            "description": "ID of the team that should own the layout "
          }
        }
      },
      "PostBookableRoomsBookable_roomLayoutsBody-legacy-vm3-routes": {
        "properties": {
          "include_floor_elements": {
            "type": "string",
            "description": "If provided, returns the newly created layout with floor elements attached "
          },
          "include_floor_element_groups": {
            "type": "string",
            "description": "If provided, returns the newly created layout with floor element groups attached "
          },
          "space_id": {
            "type": "number",
            "description": "ID of the space from which to create the layout "
          },
          "name": {
            "type": "string",
            "description": "Name for the new layout "
          },
          "team_id": {
            "type": "number",
            "description": "ID of the team who should own the layout -- if this is not provided, it             defaults to the team creating the layout. "
          }
        },
        "required": [
          "space_id",
          "name"
        ]
      },
      "PostSpacesSpaceLineAttachmentsBody-legacy-vm3-routes": {
        "properties": {
          "each": {
            "type": "string",
            "description": "element is an object of the attached line user going to create "
          }
        },
        "required": [
          "each"
        ]
      },
      "PutSpacesSpaceLineAttachmentsIdBody-legacy-vm3-routes": {
        "properties": {
          "line_attach_data": {
            "type": "string",
            "description": "for updating this line attachment "
          }
        },
        "required": [
          "line_attach_data"
        ]
      },
      "PutTeamsTeamEventsEventSpacesSpaceMealsMealBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the meal "
          },
          "color": {
            "type": "string",
            "description": "color of the meal "
          },
          "random_id": {
            "type": "string",
            "description": "random_id for the meal "
          }
        }
      },
      "PostTeamsTeamEventsEventSpacesSpaceMealsBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the meal "
          },
          "color": {
            "type": "string",
            "description": "color of the meal "
          },
          "random_id": {
            "type": "string",
            "description": "random_id for the meal "
          }
        }
      },
      "PostMetricsBody-legacy-vm3-routes": {
        "properties": {
          "source": {
            "type": "string",
            "description": "the application who wants a metric processed "
          },
          "date": {
            "type": "string",
            "description": "Date in ISO-8601 format that the metric occurred "
          },
          "type": {
            "type": "string",
            "description": "the type of metric being tracked "
          },
          "json": {
            "type": "object",
            "description": "blob data specific to this metric "
          }
        },
        "required": [
          "source",
          "date",
          "type"
        ]
      },
      "PostUsageMetricsBody-legacy-vm3-routes": {
        "properties": {
          "metricName": {
            "type": "string",
            "description": "Name of the metric to record "
          },
          "userId": {
            "type": "number",
            "description": "ID of the user performing the action to record a metric for "
          },
          "salesForceId": {
            "type": "number",
            "description": "SalesForce identifier for the acting user "
          },
          "metaData": {
            "type": "string",
            "description": "Arbitrary metadata "
          }
        },
        "required": [
          "metricName",
          "userId",
          "salesForceId",
          "metaData"
        ]
      },
      "PostOnsiteBody-legacy-vm3-routes": {
        "properties": {
          "json": {
            "type": "string",
            "description": "Any JSON-serialized data to store for the onsite configuration settings. "
          }
        },
        "required": [
          "json"
        ]
      },
      "PutOnsiteOnsiteBody-legacy-vm3-routes": {
        "properties": {
          "json": {
            "type": "string",
            "description": "Any JSON-serialized data to store for the onsite configuration settings. "
          }
        },
        "required": [
          "json"
        ]
      },
      "PostPlacesBody-legacy-vm3-routes": {
        "properties": {
          "source_id": {
            "type": "string",
            "description": "ID of the place in the source&#39;s data-set "
          },
          "source": {
            "type": "string",
            "description": "Source of the place entry, e.g. foursquare "
          },
          "json": {
            "type": "object",
            "description": "Any metadata associated with the place "
          }
        },
        "required": [
          "source_id",
          "source",
          "json"
        ]
      },
      "PutPlacesPlaceBody-legacy-vm3-routes": {
        "properties": {
          "place_data": {
            "type": "string",
            "description": "See the POST endpoint for details on what fields to send to this endpoint. "
          }
        },
        "required": [
          "place_data"
        ]
      },
      "PostPropertiesBody-legacy-vm3-routes": {
        "properties": {
          "property": {
            "type": "number",
            "description": "ID of the property for which to update teams "
          },
          "property_data": {
            "type": "string",
            "description": "Property Data "
          }
        },
        "required": [
          "property",
          "property_data"
        ]
      },
      "PostPropertiesPropertyBody-legacy-vm3-routes": {
        "properties": {
          "property_data": {
            "type": "string",
            "description": "Property Data "
          }
        },
        "required": [
          "property_data"
        ]
      },
      "PutPropertiesPropertyTeamsBody-legacy-vm3-routes": {
        "properties": {
          "team_data": {
            "type": "string",
            "description": "Team Data "
          }
        },
        "required": [
          "team_data"
        ]
      },
      "PutEventsEventSpacesSpaceBody-legacy-vm3-routes": {
        "properties": {
          "space_data": {
            "type": "string",
            "description": "See the POST endpoint for details on which fields are accepted. "
          }
        },
        "required": [
          "space_data"
        ]
      },
      "PostEventsEventSpacesBody-legacy-vm3-routes": {
        "properties": {
          "bookable_room": {
            "type": "string",
            "description": "The ID of the bookable room that the space represents. This can be a smart floorplan (ID prefixed with S) or legacy floorplan (ID prefixed with L) "
          },
          "space_order": {
            "type": "number",
            "description": "The order in which the space will appear in Venue Mapper "
          },
          "name": {
            "type": "string",
            "description": "Name of the space "
          },
          "active": {
            "type": "boolean",
            "description": "Whether the space should be loaded as the currently active space in the web interface "
          },
          "added_dimension": {
            "type": "number",
            "description": "Prefunction perimeter, in inches "
          },
          "service_area_perimeter": {
            "type": "number",
            "description": "Perimeter around tables, in inches "
          },
          "width": {
            "type": "number",
            "description": "Width of the room if there is no floor plan specified, in inches) "
          },
          "length": {
            "type": "number",
            "description": "Length of the room if there is no floor plan specified, in inches) "
          },
          "address": {
            "type": "string",
            "description": "Street address "
          },
          "state": {
            "type": "string",
            "description": "State "
          },
          "city": {
            "type": "string",
            "description": "City "
          },
          "zip": {
            "type": "number",
            "description": "Zip Code "
          },
          "floorplan_image": {
            "type": "string",
            "description": "URL where the background image for the floor plan can be found "
          },
          "floor_background": {
            "type": "string",
            "description": "Tile choice if using a tiled or grass background for a floor plan "
          },
          "height": {
            "type": "number",
            "description": "Ceiling height of the floor plan "
          },
          "custom_bg_color": {
            "type": "string",
            "description": "Color for the background of the floor plan, as an RGB string "
          },
          "creator_id": {
            "type": "number",
            "description": "ID of the user that created the space "
          },
          "chair_type": {
            "type": "string",
            "description": "Default chair type for space "
          },
          "occupancy": {
            "type": "number",
            "description": "Expected number of occupants for a space "
          },
          "wall_texture": {
            "type": "string",
            "description": "Choice of texture to use on walls in 3D mode "
          },
          "wall_texture_imported": {
            "type": "string",
            "description": "Custom texture to use on walls in 3D mode "
          },
          "max_occupancy": {
            "type": "number",
            "description": "Maximum number of occupants for space "
          },
          "usable_space": {
            "type": "number",
            "description": "Avaliable square feet according to the fire code "
          },
          "attendee_count": {
            "type": "number",
            "description": "Number of attendees for space "
          },
          "exiting_required": {
            "type": "number",
            "description": "Width of exit area required by fire code "
          },
          "sq_ft_per_extinguisher": {
            "type": "number",
            "description": "Number of square feet per fire extinguisher "
          },
          "linen_texture": {
            "type": "string",
            "description": "Choice of texture to use on tables in 3D mode "
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether or not space has been deleted "
          },
          "img_url": {
            "type": "string",
            "description": "URL where an image can be found "
          },
          "thumb_img_url": {
            "type": "string",
            "description": "URL where a thumbnail image can be found "
          },
          "rotation": {
            "type": "number",
            "description": "Rotation of the space in the Venue Mapper interface "
          }
        },
        "required": [
          "bookable_room",
          "space_order",
          "name"
        ]
      },
      "PutEventsEventSpacesBody-legacy-vm3-routes": {
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "space_order": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "space_order"
        ]
      },
      "PostEventsEventSpacesSpaceCloneBody-legacy-vm3-routes": {
        "properties": {
          "noparams": {
            "type": "string",
            "description": "No body params "
          }
        },
        "required": [
          "noparams"
        ]
      },
      "PutTeamsTeamEventsEventSpacesSpaceTagsTagBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the tag "
          },
          "color": {
            "type": "string",
            "description": "color of the tag "
          },
          "random_id": {
            "type": "string",
            "description": "random_id for the tag "
          }
        }
      },
      "PostTeamsTeamEventsEventSpacesSpaceTagsBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the tag "
          },
          "color": {
            "type": "string",
            "description": "color of the tag "
          },
          "random_id": {
            "type": "string",
            "description": "random_id for the tag "
          }
        }
      },
      "PutTeamsTeamBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the team "
          },
          "admin_user_id": {
            "type": "number",
            "description": "ID of the admin user for the team "
          },
          "image": {
            "type": "string",
            "description": ".jpg or .png for team logo "
          },
          "pdf_whitelabel": {
            "type": "boolean",
            "description": "Whether to include the team&#39;s logo image in pdf printout (S3) "
          },
          "admin_user_email": {
            "type": "string",
            "description": "email address of the admin user for the team "
          },
          "user_limit": {
            "type": "number",
            "description": "maximum number of users for the team "
          },
          "areagen_defaults": {
            "type": "string",
            "description": "defaults for the team&#39;s templates "
          },
          "plan_type": {
            "type": "string",
            "description": ""
          },
          "plan_duration": {
            "type": "number",
            "description": "number of months the team&#39;s purchased plan is for "
          },
          "cancel_date": {
            "type": "string",
            "description": "date the account was cancelled "
          },
          "sf_account_id": {
            "type": "number",
            "description": "ID of the salesforce account associated with the team "
          },
          "parent_team_id": {
            "type": "number",
            "description": "ID of the parent team "
          },
          "inventory": {
            "type": "boolean",
            "description": "Whether the team can use inventory management (VM2) "
          },
          "can_use_fpc": {
            "type": "boolean",
            "description": "Whether team can use FPC "
          },
          "uses_metric": {
            "type": "boolean",
            "description": "Whether the team uses metric units "
          },
          "can_use_onsite": {
            "type": "boolean",
            "description": "Whether team can use Onsite "
          },
          "account_type": {
            "type": "string",
            "description": ""
          },
          "suspended": {
            "type": "boolean",
            "description": "Whether team is suspended "
          },
          "language": {
            "type": "string",
            "description": "language "
          },
          "client_type": {
            "type": "string",
            "description": "client type "
          },
          "payment_gateway": {
            "type": "string",
            "description": "name of payment gateway used for team "
          },
          "payment_gateway_token": {
            "type": "string",
            "description": "payment gateway token "
          }
        }
      },
      "PostTeamsTeamSettingsBody-legacy-vm3-routes": {
        "properties": {
          "team-setting-attribute-name": {
            "type": "string",
            "description": "format: {team-setting-attribute-name: &quot;value&quot;} "
          }
        },
        "required": [
          "team-setting-attribute-name"
        ]
      },
      "PutTeamsTeamPropertiesBody-legacy-vm3-routes": {
        "properties": {
          "propertyIds": {
            "type": "string",
            "description": "for the team "
          }
        },
        "required": [
          "propertyIds"
        ]
      },
      "PostTeamsBody-legacy-vm3-routes": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the team "
          },
          "admin_user_id": {
            "type": "number",
            "description": "ID of the admin user for the team "
          },
          "image": {
            "type": "string",
            "description": ".jpg or .png for team logo "
          },
          "pdf_whitelabel": {
            "type": "boolean",
            "description": "Whether to include the team&#39;s logo image in pdf printout (S3) "
          },
          "admin_user_email": {
            "type": "string",
            "description": "email address of the admin user for the team "
          },
          "user_limit": {
            "type": "number",
            "description": "maximum number of users for the team "
          },
          "areagen_defaults": {
            "type": "string",
            "description": "defaults for the team&#39;s templates "
          },
          "plan_type": {
            "type": "string",
            "description": ""
          },
          "plan_duration": {
            "type": "number",
            "description": "number of months the team&#39;s purchased plan is for "
          },
          "cancel_date": {
            "type": "string",
            "description": "date the account was cancelled "
          },
          "sf_account_id": {
            "type": "number",
            "description": "ID of the salesforce account associated with the team "
          },
          "parent_team_id": {
            "type": "number",
            "description": "ID of the parent team "
          },
          "inventory": {
            "type": "boolean",
            "description": "Whether the team can use inventory management (VM2) "
          },
          "can_use_fpc": {
            "type": "boolean",
            "description": "Whether team can use FPC "
          },
          "uses_metric": {
            "type": "boolean",
            "description": "Whether the team uses metric units "
          },
          "can_use_onsite": {
            "type": "boolean",
            "description": "Whether team can use Onsite "
          },
          "account_type": {
            "type": "string",
            "description": ""
          },
          "suspended": {
            "type": "boolean",
            "description": "Whether team is suspended "
          },
          "language": {
            "type": "string",
            "description": "language "
          },
          "client_type": {
            "type": "string",
            "description": "client type "
          },
          "payment_gateway": {
            "type": "string",
            "description": "name of payment gateway used for team "
          },
          "payment_gateway_token": {
            "type": "string",
            "description": "payment gateway token "
          }
        }
      },
      "PutUserUserSpacesSpaceSettingsNameBody-legacy-vm3-routes": {
        "properties": {
          "data": {
            "type": "string",
            "description": "describing the setting "
          }
        },
        "required": [
          "data"
        ]
      },
      "PostUsersUserSpacesSpaceSettingsSettingBody-legacy-vm3-routes": {
        "properties": {
          "data": {
            "type": "string",
            "description": "describing the setting "
          }
        },
        "required": [
          "data"
        ]
      },
      "PostUsersUserFavoriteBookableRoomsBookable_roomBody-legacy-vm3-routes": {
        "properties": {
          "data": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "data"
        ]
      },
      "PostUsersUserSettingsBody-legacy-vm3-routes": {
        "properties": {
          "language": {
            "type": "string",
            "description": "ISO language code to set as the user&#39;s default         // TODO: MANY MORE "
          }
        },
        "required": [
          "language"
        ]
      },
      "PostUsersBody-legacy-vm3-routes": {
        "properties": {
          "first_name": {
            "type": "string",
            "description": "for the new user "
          },
          "last_name": {
            "type": "string",
            "description": "for the new user "
          },
          "email_address": {
            "type": "string",
            "description": "for the new user "
          }
        },
        "required": [
          "first_name",
          "last_name",
          "email_address"
        ]
      },
      "PutUsersUserBody-legacy-vm3-routes": {
        "properties": {
          "first_name": {
            "type": "string",
            "description": "for the new user "
          },
          "last_name": {
            "type": "string",
            "description": "for the new user "
          },
          "opt_out": {
            "type": "boolean",
            "description": "for the new user "
          }
        },
        "required": [
          "first_name",
          "last_name",
          "opt_out"
        ]
      },
      "Space-legacy-vm3-routes": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "venue_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "wizard": {
            "$ref": "#/definitions/Wizard-legacy-vm3-routes"
          }
        }
      },
      "Wizard-legacy-vm3-routes": {
        "type": "object",
        "required": [
          "setup",
          "attendees",
          "spacing",
          "table"
        ],
        "properties": {
          "attendees": {
            "type": "integer"
          },
          "setup": {
            "type": "string",
            "enum": [
              "staggered",
              "aligned",
              "classroom"
            ]
          },
          "spacing": {
            "$ref": "#/definitions/Spacing-legacy-vm3-routes"
          },
          "table": {
            "$ref": "#/definitions/Table-legacy-vm3-routes"
          }
        }
      },
      "Spacing-legacy-vm3-routes": {
        "type": "object",
        "required": [
          "x",
          "y"
        ],
        "properties": {
          "x": {
            "type": "integer"
          },
          "y": {
            "type": "integer"
          }
        }
      },
      "Table-legacy-vm3-routes": {
        "type": "object",
        "required": [
          "type",
          "chairs",
          "size"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "chairs": {
            "type": "integer"
          },
          "size": {
            "$ref": "#/definitions/TableSize-legacy-vm3-routes"
          }
        }
      },
      "TableSize-legacy-vm3-routes": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer"
          },
          "length": {
            "type": "integer"
          },
          "radius": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "resultPaging-property-service": {
        "type": "object",
        "properties": {
          "after": {
            "type": "string",
            "description": "cursor for next page"
          },
          "before": {
            "type": "string",
            "description": "cursor for previous page"
          }
        }
      },
      "genericLegacyMigration-property-service": {
        "type": "object"
      },
      "putRequest-property-service": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 191
          },
          "address": {
            "type": "object"
          },
          "place_id": {
            "type": [
              "integer",
              "null"
            ]
          }
        },
        "required": [
          "name",
          "address"
        ]
      },
      "postRequest-property-service": {
        "type": "object",
        "properties": {
          "team_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "place_source_id": {
            "type": "string"
          },
          "width": {
            "type": "number"
          },
          "length": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          }
        },
        "required": [
          "team_id",
          "user_id",
          "width",
          "length",
          "name",
          "image_url"
        ]
      },
      "patchRequest-property-service": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "analyticsSchema-proposal-service": {
        "type": "object",
        "properties": {
          "timeInPath": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "proposalId": {
            "type": "string"
          }
        }
      },
      "emailSchema-proposal-service": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "proposalSchema-proposal-service": {
        "type": "object",
        "required": [
          "property_id",
          "status",
          "team_id",
          "user_id"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "introduction": {
            "type": "object"
          },
          "property_id": {
            "type": "string"
          },
          "share": {
            "type": "object"
          },
          "status": {
            "type": "string"
          },
          "team_id": {
            "type": "string",
            "description": "team_id of owning team that user belongs to"
          },
          "user_id": {
            "type": "string",
            "description": "user_id associated with proposal"
          },
          "currency": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "description": "Array of Objects: Optional Proposal Properties with Venue Details. For all non-specified option attributes, all default values are null",
            "items": {
              "$ref": "#/definitions/option-proposal-service"
            }
          },
          "recipients": {
            "type": "array",
            "description": "Array of Objects: Recipients for Proposal",
            "items": {
              "$ref": "#/definitions/recipient-proposal-service"
            }
          },
          "templateId": {
            "type": "string",
            "description": "Creates a proposal from given templateId. When templateId is supplied, other required fields are not necessary."
          },
          "leadMetadata": {
            "type": "object",
            "description": "Property's acceptance is predicated on the status of the proposal as 'LEAD'",
            "properties": {
              "timeframe": {
                "type": "integer",
                "description": "Proposed date by which event will take place in Unix Time"
              },
              "comments": {
                "type": "string"
              },
              "attendeeCount": {
                "type": "integer"
              },
              "requestedRooms": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/requestedRoomSchema-proposal-service"
                }
              },
              "eventName": {
                "type": "string"
              },
              "marketSegment": {
                "type": "string"
              },
              "startDate": {
                "type": "integer"
              },
              "endDate": {
                "type": "integer"
              },
              "flexibility": {
                "type": "string"
              },
              "budget": {
                "type": "string"
              },
              "bookingType": {
                "type": "string"
              },
              "needFoodAndBeverage": {
                "type": "boolean",
                "description": "Indicate need for food And beverage or not"
              },
              "emailId": {
                "type": "string"
              },
              "leadType": {
                "type": "string"
              },
              "leadSource": {
                "type": "string"
              }
            }
          },
          "arrivalDate": {
            "type": "integer",
            "description": "Used to create a proposal from a template"
          },
          "guestCount": {
            "type": "string",
            "description": "Used to create a proposal from a template"
          }
        }
      },
      "option-proposal-service": {
        "type": "object",
        "properties": {
          "arrivalDate": {
            "type": "integer",
            "description": "start of epoch"
          },
          "departureDate": {
            "type": "integer",
            "description": "end of epoch"
          },
          "index": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "guestCount": {
            "type": "integer"
          }
        }
      },
      "recipient-proposal-service": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "recipient email"
          },
          "name": {
            "type": "string",
            "description": "recipient name"
          },
          "organization": {
            "type": "string",
            "description": "organization description"
          },
          "primary": {
            "type": "boolean",
            "description": "primary recipient"
          },
          "guestCount": {
            "type": "integer",
            "description": "guest count provided in lead"
          },
          "phone": {
            "type": "string"
          }
        }
      },
      "proposalSchemaComplete-proposal-service": {
        "allOf": [
          {
            "$ref": "#/definitions/proposalSchema-proposal-service"
          },
          {
            "type": "object",
            "properties": {
              "eventId": {
                "type": "string",
                "description": "id of event"
              },
              "archived": {
                "type": "integer",
                "description": "boolean to indicate whether or not proposal has been archived"
              },
              "id": {
                "type": "string",
                "description": "unique identifier for proposal"
              }
            }
          }
        ]
      },
      "requestedRoomSchema-proposal-service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "layout": {
            "type": "string"
          }
        }
      },
      "templateSchemaComplete-proposal-service": {
        "type": "object",
        "required": [
          "id",
          "property_id",
          "team_id",
          "user_id",
          "name",
          "proposalData"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "property_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "integer"
          },
          "updated_at": {
            "type": "integer"
          },
          "archived": {
            "type": "boolean"
          },
          "proposalData": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "introduction": {
                "type": "object"
              },
              "catering": {
                "type": "object"
              },
              "options": {
                "type": "object"
              },
              "currency": {
                "type": "string"
              },
              "customPages": {
                "type": "object"
              },
              "notes": {
                "type": "string"
              }
            }
          }
        }
      },
      "templateSchemaCreate-proposal-service": {
        "type": "object",
        "required": [
          "name",
          "proposalId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the template"
          },
          "proposalId": {
            "type": "string",
            "description": "id of the proposal template is going to be created from"
          }
        }
      },
      "templateSchemaReplace-proposal-service": {
        "type": "object",
        "required": [
          "templateId",
          "proposalId"
        ],
        "properties": {
          "templateId": {
            "type": "string",
            "description": "id for the template that will be replaced"
          },
          "proposalId": {
            "type": "object",
            "description": "id for the proposal that will provide the data for the new template"
          }
        }
      },
      "putRequest-snc-integration-service": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "team_id": {
            "type": "string"
          },
          "type_id": {
            "type": "string"
          },
          "additional_settings": {
            "type": "object"
          }
        }
      },
      "postRequest-snc-integration-service": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "team_id": {
            "type": "string"
          },
          "type_id": {
            "type": "string"
          },
          "additional_settings": {
            "type": "object"
          }
        },
        "required": [
          "type_id"
        ]
      },
      "integrationsRequest-snc-integration-service": {
        "additionalProperties": true,
        "type": "object",
        "properties": {
          "property_id": {
            "type": "string"
          },
          "property_name": {
            "type": [
              "string",
              "null"
            ]
          },
          "booking_id": {
            "type": "string"
          },
          "booking_name": {
            "type": [
              "string",
              "null"
            ]
          },
          "account_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "account_name": {
            "type": [
              "string",
              "null"
            ]
          },
          "booking_arrival_date": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "booking_departure_date": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "booking_status": {
            "type": [
              "string",
              "null"
            ]
          },
          "event_functions": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "function_id": {
                  "type": "string"
                },
                "function_name": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "room_id": {
                  "type": "string"
                },
                "room_name": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "room_abbreviation": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "room_setup": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "room_setup_abbreviation": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "event_type": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "start_date_time": {
                  "type": "string",
                  "format": "date-time"
                },
                "end_date_time": {
                  "type": "string",
                  "format": "date-time"
                },
                "number_of_attendees": {
                  "type": "integer"
                }
              },
              "required": [
                "room_id",
                "start_date_time",
                "end_date_time"
              ]
            }
          }
        },
        "required": [
          "property_id",
          "booking_id",
          "booking_name"
        ]
      }
    },
    "securityDefinitions": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth",
        "tokenUrl": "https://auth.socialtables.com/oauth/token",
        "authorizationUrl": "https://auth.socialtables.com/oauth/authorize",
        "flow": "accessCode",
        "scopes": {
          "authenticated": "any authentication whatsoever",
          "create:oauth_client": "oauth client create",
          "userdata": "All of the things."
        }
      },
      "user_token": {
        "type": "apiKey",
        "name": "user_token",
        "in": "header",
        "description": "Social Tables User Token"
      },
      "partner_token": {
        "type": "apiKey",
        "name": "partner_token",
        "in": "header",
        "description": "Social Tables Partner Token"
      }
    },
    "parameters": {
      "page_size-account-service": {
        "name": "page_size",
        "description": "page size",
        "in": "query",
        "type": "integer",
        "required": false,
        "default": 50
      },
      "before-account-service": {
        "name": "before",
        "description": "before cursor for backpaging",
        "in": "query",
        "type": "string",
        "required": false
      },
      "after-account-service": {
        "name": "after",
        "description": "cursor for paging",
        "in": "query",
        "type": "string",
        "required": false
      },
      "user_id-account-service": {
        "name": "user_id",
        "description": "user ID",
        "in": "path",
        "type": "string",
        "required": true
      },
      "namespace-account-service": {
        "name": "namespace",
        "description": "settings namespace",
        "in": "path",
        "type": "string",
        "required": true
      },
      "team_id-account-service": {
        "name": "team_id",
        "description": "team ID",
        "in": "path",
        "type": "string",
        "required": true
      },
      "stPartnerToken-social-tables-api": {
        "name": "stPartnerToken",
        "in": "header",
        "required": true,
        "type": "string",
        "description": "ID of the team who owns the event "
      },
      "stUserToken-social-tables-api": {
        "name": "stUserToken",
        "in": "header",
        "required": true,
        "type": "string",
        "description": "ID of the team who owns the event "
      },
      "contentType-social-tables-api": {
        "name": "contentType",
        "in": "header",
        "required": true,
        "type": "string",
        "description": "ID of the team who owns the event "
      },
      "accept-social-tables-api": {
        "name": "accept",
        "in": "header",
        "required": true,
        "type": "string",
        "description": "ID of the team who owns the event "
      },
      "page_size-property-service": {
        "name": "page_size",
        "description": "page size",
        "in": "query",
        "type": "integer",
        "required": false,
        "default": 50
      },
      "before-property-service": {
        "name": "before",
        "description": "before cursor for backpaging",
        "in": "query",
        "type": "string",
        "required": false
      },
      "after-property-service": {
        "name": "after",
        "description": "cursor for paging",
        "in": "query",
        "type": "string",
        "required": false
      },
      "property_id-property-service": {
        "name": "property_id",
        "in": "path",
        "type": "string",
        "required": true
      },
      "team_id-property-service": {
        "name": "team_id",
        "in": "query",
        "type": "string",
        "required": false
      },
      "building_id-property-service": {
        "name": "building_id",
        "in": "path",
        "type": "string",
        "required": true
      },
      "floor_id-property-service": {
        "name": "floor_id",
        "in": "path",
        "type": "string",
        "required": true
      },
      "room_id-property-service": {
        "name": "room_id",
        "in": "path",
        "type": "string",
        "required": true
      },
      "archived-property-service": {
        "name": "archived",
        "in": "query",
        "type": "boolean"
      },
      "start_date-property-service": {
        "name": "start_date",
        "in": "query",
        "type": "string",
        "format": "date-time",
        "required": true
      },
      "end_date-property-service": {
        "name": "end_date",
        "in": "query",
        "type": "string",
        "format": "date-time",
        "required": true
      },
      "room_ids-property-service": {
        "name": "room_ids",
        "in": "query",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "sncType-snc-integration-service": {
        "name": "sncType",
        "in": "path",
        "type": "string",
        "required": true
      },
      "type_id-snc-integration-service": {
        "name": "type_id",
        "in": "path",
        "type": "string",
        "required": true
      }
    },
    "paths": {
      "/4.0/accounts": {
        "post": {
          "tags": [
            "Accounts"
          ],
          "summary": "create an account",
          "parameters": [
            {
              "name": "account",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/createUpdateAccountSchema-account-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "returns a list of accounts",
              "schema": {
                "$ref": "#/definitions/createUpdateAccountSchema-account-service"
              }
            },
            "400": {
              "description": "Error creating account message"
            }
          }
        },
        "get": {
          "tags": [
            "Accounts"
          ],
          "summary": "list accounts",
          "parameters": [
            {
              "name": "team",
              "description": "team ID",
              "in": "query",
              "type": "string",
              "required": false
            }
          ],
          "responses": {
            "200": {
              "description": "returns a list of accounts",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/createUpdateAccountSchema-account-service"
                }
              }
            }
          }
        }
      },
      "/4.0/accounts/{account_id}": {
        "get": {
          "tags": [
            "Accounts"
          ],
          "summary": "get an account",
          "parameters": [
            {
              "name": "account_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "returns an account",
              "schema": {
                "$ref": "#/definitions/createUpdateAccountSchema-account-service"
              }
            }
          }
        },
        "put": {
          "tags": [
            "Accounts"
          ],
          "summary": "update an account",
          "parameters": [
            {
              "name": "account_id",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "account",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/createUpdateAccountSchema-account-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "returns updated account",
              "schema": {
                "$ref": "#/definitions/createUpdateAccountSchema-account-service"
              }
            },
            "400": {
              "description": "Error with params"
            },
            "404": {
              "description": "Error with invalid account_id"
            }
          }
        },
        "patch": {
          "tags": [
            "Accounts"
          ],
          "summary": "patch an account",
          "parameters": [
            {
              "name": "account_id",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "account",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/patchAccountSchema-account-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "returns patched account",
              "schema": {
                "$ref": "#/definitions/patchAccountSchema-account-service"
              }
            },
            "400": {
              "description": "Error with params"
            },
            "404": {
              "description": "Error with invalid account_id"
            }
          }
        },
        "delete": {
          "tags": [
            "Accounts"
          ],
          "summary": "delete an account",
          "parameters": [
            {
              "name": "account_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "successfully deleted account"
            },
            "400": {
              "description": "Error with no id"
            },
            "404": {
              "description": "Error with invalid id"
            },
            "405": {
              "description": "Error with no id"
            }
          }
        }
      },
      "/4.0/accounts/{account_id}/plan": {
        "get": {
          "tags": [
            "Accounts"
          ],
          "summary": "get an account plan",
          "parameters": [
            {
              "name": "account_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "returns an account plan",
              "schema": {
                "$ref": "#/definitions/createUpdateAccountSchema-account-service"
              }
            }
          }
        }
      },
      "/4.0/apps": {
        "post": {
          "tags": [
            "Apps"
          ],
          "summary": "create an app",
          "description": "creates an app, which is an OAuth client with settings",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 300
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successfully created app"
            }
          }
        },
        "get": {
          "tags": [
            "Apps"
          ],
          "summary": "get an app and its settings",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/page_size-account-service"
            },
            {
              "$ref": "#/parameters/after-account-service"
            },
            {
              "$ref": "#/parameters/before-account-service"
            },
            {
              "name": "owner",
              "description": "user ID of owner (optional filter)",
              "in": "query",
              "type": "string",
              "required": false
            }
          ],
          "responses": {
            "200": {
              "description": "success"
            }
          }
        }
      },
      "/4.0/apps/me": {
        "get": {
          "tags": [
            "Apps"
          ],
          "summary": "Get a list of applications that have access to a user's account.",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "success"
            },
            "404": {
              "description": "failure"
            }
          }
        }
      },
      "/4.0/apps/{appID}": {
        "get": {
          "tags": [
            "Apps"
          ],
          "summary": "get an app and its settings",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "appID",
              "description": "ID of the app to look up",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "success"
            },
            "404": {
              "description": "failure"
            }
          }
        },
        "patch": {
          "tags": [
            "Apps"
          ],
          "summary": "update an app's settings",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "appID",
              "description": "ID of the app to look up",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "app",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/app-account-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "success"
            }
          }
        },
        "delete": {
          "tags": [
            "Apps"
          ],
          "summary": "delete an app",
          "parameters": [
            {
              "name": "appID",
              "description": "ID of the app to look up",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "success"
            }
          }
        }
      },
      "/4.0/apps/{appID}/invalidate": {
        "post": {
          "tags": [
            "Apps"
          ],
          "summary": "Invalidate an app's token",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "appID",
              "description": "ID of the app to look up",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "App tokens disabled."
            }
          }
        }
      },
      "/4.0/invitations": {
        "get": {
          "tags": [
            "Invitations"
          ],
          "summary": "get invitations for object in context",
          "parameters": [
            {
              "name": "context",
              "in": "query",
              "type": "string",
              "required": true
            },
            {
              "name": "object_id",
              "in": "query",
              "type": "string"
            },
            {
              "name": "object_ids",
              "type": "string",
              "in": "query",
              "description": "a comma-separated list of object IDs\n"
            },
            {
              "name": "email",
              "in": "query",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns invites",
              "schema": {
                "$ref": "#/definitions/createUpdateInvitation-account-service"
              }
            },
            "400": {
              "description": "Error getting invitations message"
            },
            "404": {
              "description": "Error getting invitations message"
            }
          }
        }
      },
      "/4.0/invitations/accept": {
        "post": {
          "tags": [
            "Invitations"
          ],
          "summary": "accept an invitation",
          "parameters": [
            {
              "name": "acceptance",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/acceptInvitationForNewUser-account-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "accepted invitation",
              "schema": {
                "$ref": "#/definitions/createUpdateInvitation-account-service"
              }
            },
            "400": {
              "description": "Error accepting invitation message"
            }
          }
        }
      },
      "/4.0/invitations/accept_extant": {
        "post": {
          "tags": [
            "Invitations"
          ],
          "summary": "accept an invitation for an extant user",
          "description": "accept an invitation for an extant user. This is the same route\nas /invitations/accept, but due to the limitations of the Swagger\nspecification, we need to specify it separately to define multiple\nschemas.\n",
          "parameters": [
            {
              "name": "acceptance",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/acceptInvitationForExtantUser-account-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "returns accepted invite.",
              "schema": {
                "$ref": "#/definitions/createUpdateInvitation-account-service"
              }
            },
            "400": {
              "description": "Error accepting invitation message"
            }
          }
        }
      },
      "/4.0/invitations/{invitation_id}": {
        "get": {
          "tags": [
            "Invitations"
          ],
          "summary": "get an invitation",
          "parameters": [
            {
              "name": "invitation_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "returns invite",
              "schema": {
                "$ref": "#/definitions/createUpdateInvitation-account-service"
              }
            },
            "400": {
              "description": "Error getting invitation message"
            },
            "404": {
              "description": "Error getting invitation message"
            }
          }
        },
        "put": {
          "tags": [
            "Invitations"
          ],
          "summary": "update an invitation",
          "parameters": [
            {
              "name": "invitation_id",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "invitation",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/createUpdateInvitation-account-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "returns invite",
              "schema": {
                "$ref": "#/definitions/createUpdateInvitation-account-service"
              }
            },
            "400": {
              "description": "Error updating invitation message"
            }
          }
        },
        "patch": {
          "tags": [
            "Invitations"
          ],
          "summary": "update one or more properties of an invitation",
          "parameters": [
            {
              "name": "invitation_id",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "invitation properties to update",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/patchInvitation-account-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "returns invite",
              "schema": {
                "$ref": "#/definitions/createUpdateInvitation-account-service"
              }
            },
            "400": {
              "description": "Error updating invitation"
            }
          }
        },
        "delete": {
          "tags": [
            "Invitations"
          ],
          "summary": "delete an invitation",
          "parameters": [
            {
              "name": "invitation_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "deleted invite"
            },
            "400": {
              "description": "Error deleting invitation message"
            },
            "405": {
              "description": "Error deleting invitation message"
            }
          }
        }
      },
      "/4.0/invitations-object/{object_type}/{object_id}": {
        "get": {
          "deprecated": true,
          "tags": [
            "Invitations"
          ],
          "summary": "get invitations for object",
          "parameters": [
            {
              "name": "object_type",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "object_id",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "context",
              "in": "query",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns invites",
              "schema": {
                "$ref": "#/definitions/createUpdateInvitation-account-service"
              }
            },
            "400": {
              "description": "Error getting invitations message"
            },
            "404": {
              "description": "Error getting invitations message"
            }
          }
        }
      },
      "/4.0/oauth/token": {
        "post": {
          "summary": "Request an OAuth bearer token",
          "tags": [
            "Authentication"
          ],
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "Content-Type",
              "description": "content type",
              "in": "header",
              "type": "string"
            },
            {
              "name": "Accept",
              "description": "content type",
              "in": "header",
              "type": "string"
            },
            {
              "name": "client_id",
              "description": "OAuth client ID",
              "in": "formData",
              "type": "string",
              "required": true
            },
            {
              "name": "client_secret",
              "description": "OAuth client secret - required for password and client_credentials flows",
              "in": "formData",
              "type": "string",
              "required": true
            },
            {
              "name": "grant_type",
              "description": "OAuth grant type",
              "in": "formData",
              "type": "string",
              "enum": [
                "authorization_code",
                "password",
                "client_credentials",
                "refresh_token"
              ],
              "required": true
            },
            {
              "name": "code",
              "description": "Authorization code for authorization_code grants",
              "in": "formData",
              "type": "string"
            },
            {
              "name": "refresh_token",
              "description": "Refresh token for refresh_token grants",
              "in": "formData",
              "type": "string"
            },
            {
              "name": "username",
              "description": "Username (email) for password grants",
              "in": "formData",
              "type": "string"
            },
            {
              "name": "password",
              "description": "Password for password grants",
              "in": "formData",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "success"
            }
          }
        },
        "get": {
          "summary": "Get information about the current OAuth bearer token as-supplied in headers",
          "tags": [
            "Authentication"
          ],
          "produces": [
            "application/json"
          ],
          "security": [
            {
              "oauth2": [
                "authenticated"
              ]
            }
          ],
          "responses": {
            "200": {
              "description": "success"
            }
          }
        }
      },
      "/4.0/oauth/token/roles/users": {
        "get": {
          "tags": [
            "Permissions"
          ],
          "summary": "get all of the users with a certain context for things in that context requesting user has access to.",
          "parameters": [
            {
              "name": "context",
              "description": "context of user roles",
              "in": "query",
              "type": "string",
              "required": true
            },
            {
              "name": "role",
              "description": "specific role of users",
              "in": "query",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "success"
            }
          }
        }
      },
      "/4.0/oauth/token/permissions": {
        "get": {
          "tags": [
            "Permissions",
            "Roles"
          ],
          "summary": "get permissions held by the authenticated entity against one or more objects",
          "parameters": [
            {
              "name": "context",
              "type": "string",
              "in": "query",
              "required": true
            },
            {
              "name": "object_id",
              "type": "string",
              "in": "query",
              "description": "the object ID to check against"
            },
            {
              "name": "object_ids",
              "type": "string",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "contains a permissions response"
            },
            "400": {
              "description": "something went poorly"
            }
          }
        }
      },
      "/4.0/oauth/token/object-permissions": {
        "get": {
          "tags": [
            "Permissions",
            "Roles"
          ],
          "summary": "get objects that the requestor has permissions to in a given context",
          "parameters": [
            {
              "name": "context",
              "type": "string",
              "in": "query",
              "required": true
            },
            {
              "name": "permissions",
              "in": "query",
              "type": "string",
              "description": "a comma-separated list of permissions",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "contains an object-permissions response"
            }
          }
        }
      },
      "/4.0/object-permissions": {
        "get": {
          "tags": [
            "Permissions",
            "Roles"
          ],
          "summary": "get objects that the requestor has permissions to in a given context and subject id",
          "parameters": [
            {
              "name": "context",
              "type": "string",
              "in": "query",
              "required": true
            },
            {
              "name": "subject_id",
              "type": "string",
              "in": "query"
            },
            {
              "name": "permissions",
              "in": "query",
              "type": "string",
              "description": "a comma-separated list of permissions",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "contains an object-permissions response"
            }
          }
        }
      },
      "/4.0/plans": {
        "get": {
          "tags": [
            "Plans"
          ],
          "summary": "list all plans",
          "responses": {
            "200": {
              "description": "success",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/plansSchema-account-service"
                }
              }
            }
          }
        }
      },
      "/4.0/products": {
        "post": {
          "tags": [
            "Products"
          ],
          "summary": "create an new product",
          "parameters": [
            {
              "name": "products",
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/createProductSchema-account-service"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "success",
              "schema": {
                "$ref": "#/definitions/getProductsSchema-account-service"
              }
            },
            "400": {
              "description": "Error creating product message"
            }
          }
        },
        "get": {
          "tags": [
            "Products"
          ],
          "summary": "list all products",
          "responses": {
            "200": {
              "description": "success",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/getProductsSchema-account-service"
                }
              }
            }
          }
        }
      },
      "/4.0/teams/{team_id}/products": {
        "get": {
          "tags": [
            "Teams",
            "Product Access"
          ],
          "summary": "gets a mapping from product to access status for a team",
          "parameters": [
            {
              "name": "team_id",
              "description": "team ID",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "success",
              "schema": {
                "$ref": "#/definitions/teamProductAccessMapping-account-service"
              }
            }
          }
        }
      },
      "/4.0/teams/{team_id}/settings": {
        "get": {
          "tags": [
            "Teams",
            "Team Settings"
          ],
          "summary": "get team settings across multiple namespaces",
          "parameters": [
            {
              "name": "team_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns setting",
              "schema": {
                "$ref": "#/definitions/fullTeamSettings-account-service"
              }
            },
            "400": {
              "description": "Error getting team setting message"
            },
            "404": {
              "description": "Error getting team setting message"
            }
          }
        },
        "patch": {
          "tags": [
            "Teams",
            "Team Settings"
          ],
          "summary": "update team settings across multiple namespaces",
          "parameters": [
            {
              "name": "team_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "settings",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/fullTeamSettings-account-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "returns namespaced team setting",
              "schema": {
                "$ref": "#/definitions/namespacedTeamSettings-account-service"
              }
            },
            "404": {
              "description": "Error updating namespaced team setting message"
            }
          }
        }
      },
      "/4.0/teams/{team_id}/settings/{namespace}": {
        "get": {
          "tags": [
            "Teams",
            "Team Settings"
          ],
          "summary": "get team settings for a given namespace",
          "parameters": [
            {
              "name": "team_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "namespace",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns namespaced team setting",
              "schema": {
                "$ref": "#/definitions/namespacedTeamSettings-account-service"
              }
            },
            "400": {
              "description": "Error getting namespaced team setting message"
            },
            "404": {
              "description": "Error getting namespaced team setting message"
            }
          }
        },
        "patch": {
          "tags": [
            "Teams",
            "Team Settings"
          ],
          "summary": "update team settings for a given namespace",
          "parameters": [
            {
              "name": "team_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "namespace",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "settings",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/namespacedTeamSettings-account-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "returns namespaced team setting",
              "schema": {
                "$ref": "#/definitions/namespacedTeamSettings-account-service"
              }
            },
            "404": {
              "description": "Error patch updating namespaced team setting message"
            }
          }
        },
        "delete": {
          "tags": [
            "Teams",
            "Team Settings"
          ],
          "summary": "reset team settings in a given namespace",
          "parameters": [
            {
              "name": "team_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "namespace",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "successfully deleted setting"
            },
            "400": {
              "description": "Error with no id"
            },
            "404": {
              "description": "Error with invalid id"
            },
            "405": {
              "description": "Error with no id"
            }
          }
        }
      },
      "/4.0/teams": {
        "get": {
          "tags": [
            "Teams"
          ],
          "summary": "get a list of teams by ID",
          "parameters": [
            {
              "name": "team_ids",
              "type": "string",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "returns teams",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/createUpdateTeam-account-service"
                }
              }
            },
            "400": {
              "description": "Error getting team message"
            },
            "404": {
              "description": "Error getting team message"
            }
          }
        }
      },
      "/4.0/teams/{team_id}": {
        "get": {
          "tags": [
            "Teams"
          ],
          "summary": "get a team's account",
          "parameters": [
            {
              "name": "team_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "returns an account",
              "schema": {
                "$ref": "#/definitions/createUpdateAccountSchema-account-service"
              }
            },
            "404": {
              "description": "Error getting team message"
            }
          }
        },
        "put": {
          "tags": [
            "Teams"
          ],
          "summary": "update a team",
          "parameters": [
            {
              "name": "team_id",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "team",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/createUpdateTeam-account-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "returns team",
              "schema": {
                "$ref": "#/definitions/createUpdateTeam-account-service"
              }
            },
            "400": {
              "description": "Error updating team"
            }
          }
        },
        "delete": {
          "tags": [
            "Teams"
          ],
          "summary": "delete a team",
          "parameters": [
            {
              "name": "team_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "successfully deleted account"
            },
            "400": {
              "description": "Error with no id"
            },
            "404": {
              "description": "Error with invalid id"
            },
            "405": {
              "description": "Error with no id"
            }
          }
        },
        "patch": {
          "tags": [
            "Teams"
          ],
          "summary": "update a team",
          "parameters": [
            {
              "name": "team_id",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "team",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/updateTeam-account-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "return team",
              "schema": {
                "$ref": "#/definitions/createUpdateTeam-account-service"
              }
            },
            "400": {
              "description": "Error updateing parent team id"
            }
          }
        }
      },
      "/4.0/users/{user_id}/settings": {
        "get": {
          "tags": [
            "Users",
            "User Settings"
          ],
          "summary": "get settings for a given user",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/user_id-account-service"
            }
          ],
          "responses": {
            "200": {
              "description": "a map of user settings"
            }
          }
        },
        "patch": {
          "tags": [
            "Users",
            "User Settings"
          ],
          "summary": "update settings for a given user",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/user_id-account-service"
            }
          ],
          "responses": {
            "200": {
              "description": "a map of user settings"
            }
          }
        }
      },
      "/4.0/users/{user_id}/settings/{namespace}": {
        "get": {
          "tags": [
            "Users",
            "User Settings"
          ],
          "summary": "get settings for a given user",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/user_id-account-service"
            },
            {
              "$ref": "#/parameters/namespace-account-service"
            }
          ],
          "responses": {
            "200": {
              "description": "a map of user settings"
            }
          }
        },
        "patch": {
          "tags": [
            "Users",
            "User Settings"
          ],
          "summary": "update settings for a given user and namespace",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/user_id-account-service"
            },
            {
              "$ref": "#/parameters/namespace-account-service"
            }
          ],
          "responses": {
            "200": {
              "description": "a map of user settings"
            }
          }
        },
        "delete": {
          "tags": [
            "Users",
            "User Settings"
          ],
          "summary": "reset settings for a given user and namespace",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/user_id-account-service"
            },
            {
              "$ref": "#/parameters/namespace-account-service"
            }
          ],
          "responses": {
            "200": {
              "description": "a map of user settings"
            }
          }
        }
      },
      "/4.0/users/{user_id}/team": {
        "get": {
          "tags": [
            "Users",
            "Teams"
          ],
          "summary": "get team for a given user",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/user_id-account-service"
            }
          ],
          "responses": {
            "200": {
              "description": "the team the user is on"
            }
          }
        }
      },
      "/4.0/teams/{team_id}/users": {
        "get": {
          "tags": [
            "Users",
            "Teams"
          ],
          "summary": "get users for a given team",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/team_id-account-service"
            },
            {
              "$ref": "#/parameters/page_size-account-service"
            },
            {
              "$ref": "#/parameters/after-account-service"
            },
            {
              "$ref": "#/parameters/before-account-service"
            }
          ],
          "responses": {
            "200": {
              "description": "a paginated list of temas the user is on",
              "schema": {
                "type": "object",
                "properties": {
                  "paging": {
                    "$ref": "#/definitions/resultPaging-account-service"
                  },
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "user objects"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/4.0/teams/{team_id}/users/{user_id}": {
        "put": {
          "tags": [
            "Users",
            "Teams"
          ],
          "summary": "add a user to a team",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/team_id-account-service"
            },
            {
              "$ref": "#/parameters/user_id-account-service"
            }
          ],
          "responses": {
            "200": {
              "description": "addeds user to team"
            }
          }
        },
        "delete": {
          "tags": [
            "Users",
            "Teams"
          ],
          "summary": "remove a user from a team",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/team_id-account-service"
            },
            {
              "$ref": "#/parameters/user_id-account-service"
            }
          ],
          "responses": {
            "200": {
              "description": "removes user from team"
            }
          }
        }
      },
      "/4.0/users": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "get users by ID",
          "parameters": [
            {
              "name": "ids",
              "required": true,
              "in": "query",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns a list users",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/resultUserSchema-account-service"
                }
              }
            }
          }
        }
      },
      "/4.0/users/{user_id}": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "get a user by ID",
          "parameters": [
            {
              "name": "user_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns a user",
              "schema": {
                "$ref": "#/definitions/resultUserSchema-account-service"
              }
            }
          }
        },
        "put": {
          "tags": [
            "Users"
          ],
          "summary": "update a user",
          "parameters": [
            {
              "name": "user_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "user",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/updateUserSchema-account-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "returns a user",
              "schema": {
                "$ref": "#/definitions/resultUserSchema-account-service"
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Users"
          ],
          "summary": "patch a user",
          "parameters": [
            {
              "name": "user_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "user",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/patchUserSchema-account-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "returns a user",
              "schema": {
                "$ref": "#/definitions/resultUserSchema-account-service"
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Users"
          ],
          "summary": "delete a user",
          "parameters": [
            {
              "name": "user_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "user was deleted"
            }
          }
        }
      },
      "/4.0/users/{user_id}/account": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "get a user's account",
          "parameters": [
            {
              "name": "user_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns a user's account",
              "schema": {
                "$ref": "#/definitions/createUpdateAccountSchema-account-service"
              }
            }
          }
        }
      },
      "/4.0/users-email/{email}": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "get a user by email",
          "parameters": [
            {
              "name": "email",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "auth-id",
              "required": false,
              "in": "query",
              "type": "string"
            },
            {
              "name": "auth-type",
              "required": false,
              "in": "query",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns a user's email",
              "schema": {
                "$ref": "#/definitions/resultUserSchema-account-service"
              }
            }
          }
        }
      },
      "/4.0/diagrams/{id}": {
        "get": {
          "tags": [
            "Diagrams"
          ],
          "summary": "get a diagram by ID",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "fields",
              "in": "query",
              "type": "string",
              "required": false
            }
          ],
          "responses": {
            "200": {
              "description": "returns a diagram",
              "schema": {
                "$ref": "#/definitions/diagram-diagram-service"
              }
            },
            "404": {
              "description": "Diagram not found"
            }
          }
        },
        "delete": {
          "tags": [
            "Diagrams"
          ],
          "summary": "deletes a diagram",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "404": {
              "description": "diagram not found"
            }
          }
        },
        "patch": {
          "tags": [
            "Diagrams"
          ],
          "summary": "updates a diagram",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "data",
              "in": "body",
              "description": "changes to make to the diagram",
              "required": true,
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/definitions/diagram_patch-diagram-service"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "404": {
              "description": "diagram not found"
            }
          }
        }
      },
      "/4.0/diagrams": {
        "get": {
          "tags": [
            "Diagrams"
          ],
          "summary": "get multiple diagrams",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "ids",
              "in": "query",
              "type": "string",
              "required": false
            },
            {
              "name": "event",
              "in": "query",
              "type": "integer",
              "required": false
            },
            {
              "name": "space",
              "in": "query",
              "type": "integer",
              "required": false
            },
            {
              "name": "guestlist",
              "in": "query",
              "type": "string",
              "required": false
            },
            {
              "name": "fields",
              "in": "query",
              "type": "string",
              "required": false
            },
            {
              "name": "external_diagram_id",
              "in": "query",
              "type": "string",
              "required": false
            },
            {
              "name": "external_event_id",
              "in": "query",
              "type": "string",
              "required": false
            }
          ],
          "responses": {
            "200": {
              "description": "returns an array of diagrams",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/diagram-diagram-service"
                }
              }
            },
            "400": {
              "description": "validation error must specify either event, space, or guestlist"
            }
          }
        }
      },
      "/4.0/diagrams/{id}/restore": {
        "post": {
          "tags": [
            "Diagrams"
          ],
          "summary": "restores a deleted diagram",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "404": {
              "description": "diagram not found"
            }
          }
        }
      },
      "/4.0/diagrams/": {
        "post": {
          "tags": [
            "Diagrams"
          ],
          "summary": "inserts a diagram",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "description": "the body of the diagram",
              "required": true,
              "schema": {
                "$ref": "#/definitions/diagram-diagram-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "inserted diagram with id",
              "schema": {
                "$ref": "#/definitions/diagram-diagram-service"
              }
            },
            "400": {
              "description": "diagram not valid"
            }
          }
        }
      },
      "/4.0/diagrams/{id}/guests": {
        "get": {
          "tags": [
            "Diagrams"
          ],
          "summary": "get chair and floor element information for seated guests",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "returns a map of guest ids to chair and fe infos",
              "schema": {
                "$ref": "#/definitions/diagram-diagram-service"
              }
            },
            "404": {
              "description": "Diagram not found"
            }
          }
        },
        "delete": {
          "tags": [
            "Diagrams"
          ],
          "summary": "Detaches a diagram's guestlist and unseats all guests",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of diagram",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "404": {
              "description": "diagram not found"
            }
          }
        }
      },
      "/4.0/diagrams/{id}/clone": {
        "post": {
          "tags": [
            "Diagrams"
          ],
          "summary": "clones a specified diagram into a specified event and space",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of diagram to clone",
              "required": true,
              "type": "string"
            },
            {
              "name": "data",
              "in": "body",
              "description": "space_id cloned diagram",
              "required": true,
              "schema": {
                "$ref": "#/definitions/diagram_clone-diagram-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "inserts a clone of the specified diagram id",
              "schema": {
                "$ref": "#/definitions/diagram-diagram-service"
              }
            },
            "400": {
              "description": "diagram id not valid, or space_id not provided"
            }
          }
        }
      },
      "/4.0/diagrams/clone": {
        "post": {
          "tags": [
            "Diagrams"
          ],
          "summary": "clones all diagrams for an event",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "event",
              "in": "query",
              "type": "integer",
              "description": "id of the event to clone diagrams from",
              "required": true
            },
            {
              "name": "data",
              "in": "body",
              "description": "object containing event_id to place the cloned diagrams",
              "required": true,
              "schema": {
                "$ref": "#/definitions/diagrams_clone-diagram-service"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "inserts a clone of all diagrams for specified event",
              "schema": {
                "$ref": "#/definitions/diagram-diagram-service"
              }
            },
            "400": {
              "description": "from event is not valid or not provided"
            }
          }
        }
      },
      "/4.0/diagrams/{id}/seat": {
        "patch": {
          "tags": [
            "Diagrams"
          ],
          "summary": "seat guests at specified floor elements in a diagram",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of diagram to seat guests in",
              "required": true,
              "type": "string"
            },
            {
              "name": "data",
              "in": "body",
              "description": "object keyed by guest_id with value being object with floor_element_id and chair_id",
              "required": true,
              "schema": {
                "$ref": "#/definitions/diagram_seat-diagram-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/diagram-diagram-service"
              }
            },
            "400": {
              "description": "seating data is not valid"
            },
            "404": {
              "description": "diagram does not exist"
            }
          }
        }
      },
      "/4.0/diagrams/{id}/auto-seat": {
        "patch": {
          "tags": [
            "Diagrams"
          ],
          "summary": "automatically seat array of guest objects at available chairs",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of diagram to seat guests in",
              "required": true,
              "type": "string"
            },
            {
              "name": "data",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/diagram_auto_seat-diagram-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/diagram_seat-diagram-service"
              }
            },
            "400": {
              "description": "unable to seat guests, returns an error object"
            },
            "404": {
              "description": "diagram does not exist"
            }
          }
        }
      },
      "/4.0/diagrams/{id}/events/{eventId}/reorder": {
        "post": {
          "tags": [
            "Diagrams"
          ],
          "summary": "reorder a diagram within an event by moving it to the given targetIndex",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of diagram to reorder",
              "required": true,
              "type": "string"
            },
            {
              "name": "eventId",
              "in": "path",
              "required": true,
              "type": "string"
            },
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/diagram_reorder-diagram-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/diagram_reorder_result-diagram-service"
              }
            },
            "400": {
              "description": "targetIndex is invalid (not a positive integer)"
            },
            "404": {
              "description": "diagram does not exist"
            }
          }
        }
      },
      "/4.0/favorites/{id}": {
        "get": {
          "tags": [
            "Favorites"
          ],
          "summary": "get a favorite by ID",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "returns a favorite",
              "schema": {
                "$ref": "#/definitions/favorite-diagram-service"
              }
            },
            "404": {
              "description": "favorite not found"
            }
          }
        },
        "delete": {
          "tags": [
            "Favorites"
          ],
          "summary": "deletes a favorite",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "404": {
              "description": "favorite not found"
            }
          }
        }
      },
      "/4.0/favorites": {
        "get": {
          "tags": [
            "Favorites"
          ],
          "summary": "get multiple favorites",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "user",
              "in": "query",
              "type": "integer",
              "required": false
            },
            {
              "name": "team",
              "in": "query",
              "type": "integer",
              "required": false
            }
          ],
          "responses": {
            "200": {
              "description": "returns an array of favorites",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/favorite-diagram-service"
                }
              }
            },
            "400": {
              "description": "validation error must specify either user or team"
            }
          }
        }
      },
      "/4.0/favorites/": {
        "post": {
          "tags": [
            "Favorites"
          ],
          "summary": "inserts a favorite",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "description": "the body of the favorite",
              "required": true,
              "schema": {
                "$ref": "#/definitions/favorite-diagram-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "inserted favorite with id",
              "schema": {
                "$ref": "#/definitions/favorite-diagram-service"
              }
            },
            "400": {
              "description": "favorite not valid"
            }
          }
        },
        "patch": {
          "tags": [
            "Favorites"
          ],
          "summary": "updates a favorite",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "description": "the body of the favorite update",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/favorite_patch-diagram-service"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "success",
              "schema": {
                "$ref": "#/definitions/favorite-diagram-service"
              }
            },
            "400": {
              "description": "favorite update not valid"
            }
          }
        }
      },
      "/4.0/health-check": {
        "get": {
          "tags": [
            "Health"
          ],
          "summary": "Returns OK if the server is alive",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          }
        }
      },
      "/4.0/layouts/{id}": {
        "get": {
          "tags": [
            "Layouts"
          ],
          "summary": "get a layout by ID",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "returns a layout",
              "schema": {
                "$ref": "#/definitions/layout-diagram-service"
              }
            },
            "404": {
              "description": "layout not found"
            }
          }
        },
        "delete": {
          "tags": [
            "Layouts"
          ],
          "summary": "deletes a layout",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "404": {
              "description": "layout not found"
            }
          }
        },
        "patch": {
          "tags": [
            "Layouts"
          ],
          "summary": "updates a layout",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "data",
              "in": "body",
              "description": "the body of the layout update",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/definitions/layout_patch-diagram-service"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "success",
              "schema": {
                "$ref": "#/definitions/layout-diagram-service"
              }
            },
            "400": {
              "description": "layout update not valid"
            }
          }
        }
      },
      "/4.0/layouts": {
        "get": {
          "tags": [
            "Layouts"
          ],
          "summary": "get multiple layouts",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "bookable_room",
              "in": "query",
              "type": "integer",
              "required": false
            },
            {
              "name": "space_template",
              "in": "query",
              "type": "integer",
              "required": false
            },
            {
              "name": "team_id",
              "in": "query",
              "type": "string",
              "required": false
            }
          ],
          "responses": {
            "200": {
              "description": "returns an array of layouts",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/layout-diagram-service"
                }
              }
            },
            "400": {
              "description": "validation error must specify either bookable_room or space_template"
            }
          }
        }
      },
      "/4.0/layouts/": {
        "post": {
          "tags": [
            "Layouts"
          ],
          "summary": "inserts a layout",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "description": "the body of the layout",
              "required": true,
              "schema": {
                "$ref": "#/definitions/layout-diagram-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "inserted layout with id",
              "schema": {
                "$ref": "#/definitions/layout-diagram-service"
              }
            },
            "400": {
              "description": "layout not valid"
            }
          }
        }
      },
      "/4.0/layouts/{id}/clone": {
        "post": {
          "tags": [
            "Layouts"
          ],
          "summary": "clones a specified layout onto a specified team",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id of layout to clone",
              "required": true,
              "type": "string"
            },
            {
              "name": "data",
              "in": "body",
              "description": "team_id and/or legacy_team_id of cloned layout",
              "required": true,
              "schema": {
                "$ref": "#/definitions/layout_clone-diagram-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "inserts a clone of the specified layout id",
              "schema": {
                "$ref": "#/definitions/layout-diagram-service"
              }
            },
            "400": {
              "description": "layout id not valid, or team_id or legacy_team_id not provided"
            }
          }
        }
      },
      "/4.0/logout": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Logout a user",
          "responses": {
            "303": {
              "description": "logout success and redirect"
            },
            "401": {
              "description": "logout failure"
            }
          }
        }
      },
      "/4.0/property-ingest": {
        "post": {
          "tags": [
            "Property Ingest"
          ],
          "summary": "Add a new property to the search",
          "description": "",
          "operationId": "createProperty",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Property object that needs to be added to the search",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Properties-property-ingest"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Response-property-ingest"
              }
            }
          }
        }
      },
      "/4.0/events/{event_id}/settings/{namespace}": {
        "patch": {
          "tags": [
            "Events",
            "Event Settings"
          ],
          "summary": "update or insert an event setting for namespace at event",
          "parameters": [
            {
              "name": "event_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "namespace",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "settings",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/event-settings-settings-event-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "returns eventId, namespace and settings",
              "schema": {
                "type": "object",
                "items": {
                  "$ref": "#/definitions/event-settings-event-service"
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Events",
            "Event Settings"
          ],
          "summary": "get an event setting for namespace at event",
          "parameters": [
            {
              "name": "event_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "namespace",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns event_id, namespace and settings",
              "schema": {
                "type": "object",
                "items": {
                  "$ref": "#/definitions/event-settings-event-service"
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Events",
            "Event Settings"
          ],
          "summary": "delete an event setting for namespace at event",
          "parameters": [
            {
              "name": "event_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "namespace",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "delete success"
            }
          }
        }
      },
      "/4.0/events/{event_id}/users": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "get users of an Event by ID",
          "parameters": [
            {
              "name": "event_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns users of an Event",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/user-event-service"
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Events"
          ],
          "summary": "delete an event user",
          "parameters": [
            {
              "name": "event_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "successfully deleted event user"
            },
            "400": {
              "description": "Error with no id"
            },
            "404": {
              "description": "Error with invalid id"
            },
            "405": {
              "description": "Error with no id"
            }
          }
        }
      },
      "/4.0/events/{event_id}": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "get an Event from an Event ID",
          "parameters": [
            {
              "name": "event_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns an Event",
              "schema": {
                "$ref": "#/definitions/event-event-service"
              }
            }
          }
        },
        "put": {
          "tags": [
            "Events"
          ],
          "summary": "update an Event",
          "parameters": [
            {
              "name": "event_id",
              "description": "event ID",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "event",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/event-event-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "success, client updated"
            }
          }
        },
        "patch": {
          "tags": [
            "Events"
          ],
          "summary": "update an Event",
          "parameters": [
            {
              "name": "event_id",
              "description": "event ID",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "event",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/event-event-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "success, client updated"
            }
          }
        },
        "delete": {
          "tags": [
            "Events"
          ],
          "summary": "delete an event",
          "parameters": [
            {
              "name": "event_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "successfully deleted event"
            },
            "400": {
              "description": "Error with no id"
            },
            "404": {
              "description": "Error with invalid id"
            },
            "405": {
              "description": "Error with no id"
            }
          }
        }
      },
      "/4.0/events-by-ids": {
        "x-admin-only": true,
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "get all events given an array of ids",
          "parameters": [
            {
              "name": "ids",
              "required": true,
              "in": "query",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns events corresponding to ids in query",
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "/4.0/events-by-legacy-id/{legacy_id}": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "get an Event from a Legacy Event ID",
          "parameters": [
            {
              "name": "legacy_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "include_deleted",
              "required": false,
              "in": "query",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns an Event",
              "schema": {
                "$ref": "#/definitions/event-event-service"
              }
            }
          }
        }
      },
      "/4.0/events/": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "get all Events",
          "parameters": [
            {
              "name": "permissions",
              "in": "query",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns an Event",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/event-event-service"
                }
              }
            }
          }
        }
      },
      "/4.0/events/email/{email}": {
        "x-admin-only": true,
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "get property event count and event count for an email address and property ID",
          "parameters": [
            {
              "name": "email",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "property_id",
              "required": true,
              "in": "query",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns event count",
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "/4.0/events/teams/{team_id}": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "get all Events by team id",
          "parameters": [
            {
              "name": "team_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns events",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/event-event-service"
                }
              }
            }
          }
        }
      },
      "/4.0/events": {
        "post": {
          "tags": [
            "Events"
          ],
          "summary": "creates an event",
          "parameters": [
            {
              "name": "event",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/event-event-service"
              }
            },
            {
              "name": "team_id",
              "in": "query",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Newly created event.",
              "schema": {
                "$ref": "#/definitions/event-event-service"
              }
            },
            "400": {
              "description": "Error creating event"
            }
          }
        }
      },
      "/4.0/events/{event_id}/permissions": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "retrieve a users permission for an event",
          "parameters": [
            {
              "name": "event_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns a user's event permissions",
              "schema": {
                "$ref": "#/definitions/event-event-service"
              }
            }
          }
        }
      },
      "/4.0/events/{event_id}/owner": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "get an event owner's plan by event id",
          "parameters": [
            {
              "name": "event_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns plan name of event owner",
              "schema": {
                "items": {
                  "$ref": "#/definitions/user-event-service"
                }
              }
            }
          }
        }
      },
      "/4.0/events/{event_id}/owningTeamId": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "get an event's owner's team ID",
          "parameters": [
            {
              "name": "event_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns team ID of event owner",
              "schema": {
                "items": {
                  "$ref": "#/definitions/user-event-service"
                }
              }
            }
          }
        }
      },
      "/4.0/industries/": {
        "get": {
          "tags": [
            "Industries"
          ],
          "summary": "get all Industries",
          "responses": {
            "200": {
              "description": "returns list of valid event industries",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/industry-event-service"
                }
              }
            }
          }
        }
      },
      "/4.0/sessions/{session_id}": {
        "get": {
          "tags": [
            "Sessions"
          ],
          "summary": "Retrieve a session",
          "parameters": [
            {
              "name": "session_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns session",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/session-event-service"
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Sessions"
          ],
          "summary": "delete a session",
          "parameters": [
            {
              "name": "session_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "successfully deleted session"
            },
            "400": {
              "description": "Error with no id"
            },
            "404": {
              "description": "Error with invalid id"
            },
            "405": {
              "description": "Error with no id"
            }
          }
        }
      },
      "/4.0/sessions/{session_id}/sessions": {
        "get": {
          "tags": [
            "Sessions"
          ],
          "summary": "Retrieve child sessions",
          "parameters": [
            {
              "name": "session_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns session",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/session-event-service"
                }
              }
            }
          }
        }
      },
      "/4.0/events/{event_id}/sessions": {
        "get": {
          "tags": [
            "Sessions"
          ],
          "summary": "Retrieve contacts by team id",
          "parameters": [
            {
              "name": "event_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns session",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/session-event-service"
                }
              }
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/checkin": {
        "get": {
          "tags": [
            "CHECKIN"
          ],
          "summary": "Get all checked in guests for a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns checked in guests",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/guests-guest-list-service"
                }
              }
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/guests/{guest_id}/checkin": {
        "post": {
          "tags": [
            "GUESTS",
            "CHECKIN"
          ],
          "summary": "Check in a guest",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "guest_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "checked_in",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/guests-guest-list-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "checkin",
              "schema": {
                "$ref": "#/definitions/guests-guest-list-service"
              }
            },
            "400": {
              "description": "Error setting guests checkin status"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/guests/checkin": {
        "post": {
          "tags": [
            "CHECKIN"
          ],
          "summary": "Bulk Check-in Guests",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "body",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/checkinBulk-guest-list-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "400": {
              "description": "Error creating guest tags"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/guests/update-checkin-status": {
        "post": {
          "tags": [
            "CHECKIN"
          ],
          "summary": "Bulk Check-in Guests",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "body",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/checkinBulk-guest-list-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "400": {
              "description": "Error updating guests checkin status"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/groups/{group_id}": {
        "get": {
          "tags": [
            "GROUPS"
          ],
          "summary": "Retrieve a GROUP",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "group_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns group",
              "schema": {
                "$ref": "#/definitions/group-guest-list-service"
              }
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        },
        "delete": {
          "tags": [
            "GROUPS"
          ],
          "summary": "Delete a GROUP",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "group_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "successfully deleted"
            },
            "400": {
              "description": "Error with no id"
            },
            "404": {
              "description": "Error with invalid id"
            },
            "405": {
              "description": "Error with no id"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/groups": {
        "post": {
          "tags": [
            "GROUPS"
          ],
          "summary": "Create a group",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "guests",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/groupBulk-guest-list-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "group created",
              "schema": {
                "$ref": "#/definitions/group-guest-list-service"
              }
            },
            "400": {
              "description": "Error creating group"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/groups/{group_id}/name/{name}": {
        "put": {
          "tags": [
            "GROUPS"
          ],
          "summary": "Set group name",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "group_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "name",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "group name set",
              "schema": {
                "$ref": "#/definitions/group-guest-list-service"
              }
            },
            "400": {
              "description": "Error setting group name"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/groups/{group_id}/name": {
        "delete": {
          "tags": [
            "GROUPS"
          ],
          "summary": "Clear Group Name",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "group_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "group created",
              "schema": {
                "$ref": "#/definitions/group-guest-list-service"
              }
            },
            "400": {
              "description": "Error removing group name"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/groups/{group_id}/guests/_bulk": {
        "post": {
          "tags": [
            "GROUPS"
          ],
          "summary": "Bulk add/remove guests to/from group",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "group_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "guest_data",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/groupBulk-guest-list-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "group created",
              "schema": {
                "$ref": "#/definitions/group-guest-list-service"
              }
            },
            "400": {
              "description": "Error creating group"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/groups/{group_id}/guests/_bulk/create": {
        "post": {
          "tags": [
            "GROUPS"
          ],
          "summary": "Bulk adds guests from group",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "group_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "guest_ids",
              "required": true,
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "guests added to group",
              "schema": {
                "$ref": "#/definitions/group-guest-list-service"
              }
            },
            "400": {
              "description": "Error adding guests"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/groups/{group_id}/guests/_bulk/delete": {
        "post": {
          "tags": [
            "GROUPS"
          ],
          "summary": "Bulk deletes guests from group",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "group_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "guests",
              "required": true,
              "in": "body",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "guests removed from group",
              "schema": {
                "$ref": "#/definitions/group-guest-list-service"
              }
            },
            "400": {
              "description": "Error removing guests"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/guests/{guest_id}": {
        "get": {
          "tags": [
            "GUESTS"
          ],
          "summary": "Retrieve a guest",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "guest_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns guest",
              "schema": {
                "$ref": "#/definitions/guests-guest-list-service"
              }
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        },
        "patch": {
          "tags": [
            "GUESTS"
          ],
          "summary": "update a guest",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "guest_id",
              "description": "guest ID",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "guest",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/guests-guest-list-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "success, guest patched"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        },
        "put": {
          "tags": [
            "GUESTS"
          ],
          "summary": "update a guest",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "guest_id",
              "description": "guest ID",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "guest",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/guests-guest-list-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "success, guest updated"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        },
        "delete": {
          "tags": [
            "GUESTS"
          ],
          "summary": "Delete a guest & remove from group",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "guest_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "successfully deleted"
            },
            "400": {
              "description": "Error with no id"
            },
            "404": {
              "description": "Error with invalid id"
            },
            "405": {
              "description": "Error with no id"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/guests": {
        "post": {
          "tags": [
            "GUESTS"
          ],
          "summary": "Add a guest to a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "guests",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/guests-guest-list-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "guest",
              "schema": {
                "$ref": "#/definitions/guests-guest-list-service"
              }
            },
            "400": {
              "description": "Error creating guest"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        },
        "get": {
          "tags": [
            "GUESTS"
          ],
          "summary": "Retrieve all guests for a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "returns guests",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/guests-guest-list-service"
                }
              }
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/guests/_dedupe": {
        "post": {
          "tags": [
            "GUESTS"
          ],
          "summary": "dedupe new guests against existing guests in a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "guests",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/guests-guest-list-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "returns guests",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/guests-guest-list-service"
                }
              }
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/guests/_replace": {
        "post": {
          "tags": [
            "GUESTS"
          ],
          "summary": "deletes existing guests that match new duplicate guests",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "guests",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/guests-guest-list-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "returns guests",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/guests-guest-list-service"
                }
              }
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/guests/_bulk": {
        "post": {
          "tags": [
            "GUESTS"
          ],
          "summary": "add multiple guests to a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "body",
              "description": "body object",
              "required": true,
              "in": "body",
              "schema": {
                "type": "object",
                "required": [
                  "action",
                  "guests"
                ],
                "properties": {
                  "action": {
                    "type": "string",
                    "default": "CREATE",
                    "enum": [
                      "CREATE",
                      "DELETE",
                      "UPDATE"
                    ],
                    "description": "CREATE | DELETE | UPDATE"
                  },
                  "guests": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/guests-guest-list-service"
                    }
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "collections for gueslist",
              "schema": {
                "$ref": "#/definitions/guests-guest-list-service"
              }
            },
            "400": {
              "description": "Error creating guests"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists": {
        "get": {
          "tags": [
            "GUESTLISTS"
          ],
          "summary": "Retrieve all guestlists by session or event id",
          "parameters": [
            {
              "name": "event_id",
              "required": false,
              "in": "query",
              "type": "string"
            },
            {
              "name": "session_id",
              "required": false,
              "in": "query",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "guestlists",
              "schema": {
                "$ref": "#/definitions/guestlists-guest-list-service"
              }
            }
          }
        },
        "post": {
          "tags": [
            "GUESTLISTS"
          ],
          "summary": "Create a guestlist",
          "parameters": [
            {
              "name": "event_id",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/guestlists-guest-list-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "guestlists response",
              "schema": {
                "$ref": "#/definitions/guestlists-guest-list-service"
              }
            },
            "400": {
              "description": "Error creating guestlist"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}": {
        "get": {
          "tags": [
            "GUESTLISTS"
          ],
          "summary": "Retrieve all guestlists",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "guestlists",
              "schema": {
                "$ref": "#/definitions/guestlists-guest-list-service"
              }
            },
            "410": {
              "description": "requested guestlist is deleted"
            }
          }
        },
        "put": {
          "tags": [
            "GUESTLISTS"
          ],
          "summary": "Update a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "description": "guestlist ID",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "guestlist",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/guestlists-guest-list-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "success, guestlist updated"
            },
            "410": {
              "description": "requested guestlist is deleted"
            }
          }
        },
        "patch": {
          "tags": [
            "GUESTLISTS"
          ],
          "summary": "Update a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "description": "guestlist ID",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "guestlist",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/guestlists-guest-list-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "success, guestlist updated"
            },
            "410": {
              "description": "requested guestlist is deleted"
            }
          }
        },
        "delete": {
          "tags": [
            "GUESTLISTS"
          ],
          "summary": "Delete a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "successfully deleted"
            },
            "400": {
              "description": "Error with no id"
            },
            "404": {
              "description": "Error with invalid id"
            },
            "405": {
              "description": "Error with no id"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/restore": {
        "post": {
          "tags": [
            "GUESTLISTS"
          ],
          "summary": "Restore a deleted guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "sucessfully restored a deleted guestlist"
            },
            "400": {
              "description": "Error restoring deleted guestlist"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/_clone": {
        "post": {
          "tags": [
            "GUESTLISTS"
          ],
          "summary": "Clone a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "event_id",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/guestlists-guest-list-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successfully cloned"
            },
            "400": {
              "description": "Error with no id"
            },
            "404": {
              "description": "Error with invalid id"
            },
            "405": {
              "description": "Error with no id"
            },
            "410": {
              "description": "requested guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/guests/meals": {
        "post": {
          "tags": [
            "MEALS",
            "GUESTS",
            "ACTION"
          ],
          "summary": "assign/delete multiple guests to a tag",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "body",
              "description": "body object",
              "required": true,
              "in": "body",
              "schema": {
                "type": "object",
                "required": [
                  "action",
                  "guests",
                  "meals"
                ],
                "properties": {
                  "action": {
                    "description": "action to redirect to",
                    "type": "string",
                    "enum": [
                      "CREATE",
                      "DELETE"
                    ]
                  },
                  "meals": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "guests": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "collections for gueslist",
              "schema": {
                "$ref": "#/definitions/guests-guest-list-service"
              }
            },
            "400": {
              "description": "Error adding or removing meals"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/meals": {
        "post": {
          "tags": [
            "MEALS"
          ],
          "summary": "create a meal on a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "body",
              "description": "body object",
              "required": true,
              "in": "body",
              "schema": {
                "type": "object",
                "required": [
                  "meal"
                ],
                "properties": {
                  "meal": {
                    "type": "object"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "meal for guestlist",
              "schema": {
                "$ref": "#/definitions/meals-guest-list-service"
              }
            },
            "400": {
              "description": "Error creating meal"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/meals/{meal_title}": {
        "put": {
          "tags": [
            "MEALS"
          ],
          "summary": "edit a meal on a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "meal_title",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "body",
              "description": "body object",
              "required": true,
              "in": "body",
              "schema": {
                "type": "object",
                "required": [
                  "meals"
                ],
                "properties": {
                  "meals": {
                    "type": "object"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "meal for guestlist",
              "schema": {
                "$ref": "#/definitions/meals-guest-list-service"
              }
            },
            "400": {
              "description": "Error editing meal"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        },
        "delete": {
          "tags": [
            "MEALS"
          ],
          "summary": "delete a meal on a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "meal_title",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "body",
              "description": "body object",
              "required": true,
              "in": "body",
              "schema": {
                "type": "object",
                "required": [
                  "meals"
                ],
                "properties": {
                  "meals": {
                    "type": "object"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "meal for guestlist",
              "schema": {
                "$ref": "#/definitions/meals-guest-list-service"
              }
            },
            "400": {
              "description": "Error deleting meal"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/tags": {
        "get": {
          "tags": [
            "TAGS"
          ],
          "summary": "get the tags status on a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "tags state for guestlist",
              "schema": {
                "$ref": "#/definitions/tags-guest-list-service"
              }
            },
            "400": {
              "description": "Error getting tags state"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        },
        "post": {
          "tags": [
            "TAGS"
          ],
          "summary": "create a tag on a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "body",
              "description": "body object",
              "required": true,
              "in": "body",
              "schema": {
                "type": "object",
                "required": [
                  "tag"
                ],
                "properties": {
                  "tag": {
                    "type": "object"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "tag for guestlist",
              "schema": {
                "$ref": "#/definitions/tags-guest-list-service"
              }
            },
            "400": {
              "description": "Error creating tag"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/tags/{tag_title}": {
        "get": {
          "tags": [
            "TAGS"
          ],
          "summary": "get a tag on a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "tag_title",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "tag for guestlist",
              "schema": {
                "$ref": "#/definitions/tags-guest-list-service"
              }
            },
            "400": {
              "description": "Error getting tag"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        },
        "put": {
          "tags": [
            "TAGS"
          ],
          "summary": "edit a tag on a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "tag_title",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "body",
              "description": "body object",
              "required": true,
              "in": "body",
              "schema": {
                "type": "object",
                "required": [
                  "tags"
                ],
                "properties": {
                  "tags": {
                    "type": "object"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "tag for guestlist",
              "schema": {
                "$ref": "#/definitions/tags-guest-list-service"
              }
            },
            "400": {
              "description": "Error editing tag"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        },
        "delete": {
          "tags": [
            "TAGS"
          ],
          "summary": "delete a tag on a guestlist",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "tag_title",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "body",
              "description": "body object",
              "required": true,
              "in": "body",
              "schema": {
                "type": "object",
                "required": [
                  "tags"
                ],
                "properties": {
                  "tags": {
                    "type": "object"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "tag for guestlist",
              "schema": {
                "$ref": "#/definitions/tags-guest-list-service"
              }
            },
            "400": {
              "description": "Error deleting tag"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/guestlists/{guestlist_id}/guests/tags": {
        "post": {
          "tags": [
            "TAGS",
            "GUESTS",
            "ACTION"
          ],
          "summary": "assign/delete multiple guests to a tag",
          "parameters": [
            {
              "name": "guestlist_id",
              "required": true,
              "in": "path",
              "type": "string"
            },
            {
              "name": "body",
              "description": "body object",
              "required": true,
              "in": "body",
              "schema": {
                "type": "object",
                "required": [
                  "action",
                  "guests",
                  "tags"
                ],
                "properties": {
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "action": {
                    "type": "string"
                  },
                  "guests": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/guests-guest-list-service"
                    }
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "tag for guestlist",
              "schema": {
                "$ref": "#/definitions/tags-guest-list-service"
              }
            },
            "400": {
              "description": "Error adding or removing tags"
            },
            "410": {
              "description": "guestlist is deleted"
            }
          }
        }
      },
      "/4.0/layout-automation/passive": {
        "post": {
          "tags": [
            "Layout Automation"
          ],
          "description": "passively calculate table positions.  no writes",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "wizard POST body used for calculations",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PassiveWizardPost-layout-automation-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "table positions returned by the algorithm",
              "schema": {
                "$ref": "#/definitions/PassiveWizardResponse-layout-automation-service"
              }
            }
          }
        }
      },
      "/4.0/layout-automation/": {
        "post": {
          "tags": [
            "Layout Automation"
          ],
          "description": "actively calculates layout and creates an event/space/diagram",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "description event POST body used to create event etc",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ActiveWizardPost-layout-automation-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "full event created by the layout automation service",
              "schema": {
                "$ref": "#/definitions/ActiveWizardResponse-layout-automation-service"
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Layout Automation"
          ],
          "description": "removes floor elements from previous automated and manual layouts",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "spaces",
              "description": "a comma-separated list of space IDs to clear",
              "in": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "event",
              "description": "the ID of the event to clear",
              "in": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "hardDelete",
              "description": "flag to hard delete diagram/space",
              "default": false,
              "in": "query",
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "204": {
              "description": "success"
            }
          }
        }
      },
      "/4.0/layout-automation/custom-setup": {
        "post": {
          "tags": [
            "Layout Automation"
          ],
          "description": "actively calculates layout and creates an event/space/diagram using custom_setup defined from Home Team Setup Presets https://home-2018.socialtables.com/settings/team-setup-presets",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "description event POST body used to create event etc",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ActiveCustomSetupWizardPost-layout-automation-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "full event created by the layout automation service",
              "schema": {
                "$ref": "#/definitions/ActiveWizardResponse-layout-automation-service"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/events/{event}": {
        "delete": {
          "tags": [
            "Events"
          ],
          "summary": "Deletes the given event. Note that this is a &quot;soft&quot; deletion and the event can be un-deleted if necessary. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "Team that owns the event "
            },
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the event to delete "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        },
        "put": {
          "tags": [
            "Events"
          ],
          "summary": "Update the given event, owned by the given team ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team that owns the event "
            },
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the event to update "
            },
            {
              "in": "body",
              "name": "PutTeamsTeamEventsEventBody",
              "description": "Update the given event, owned by the given team ",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PutTeamsTeamEventsEventBody-legacy-vm3-routes"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/events/{event}": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "Get details for a particular event, including the event&#39;s creator and any spaces being used in the event. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the event to fetch "
            },
            {
              "name": "return_if_archived",
              "in": "query",
              "required": false,
              "type": "boolean",
              "description": "If &quot;true&quot;, it will return         the event even though it may be archived. If &quot;false&quot;, it will return with status code 410 if archived (Social Tables Admins only). "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/events": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "Get events for a team, matching the given search and filter parameters. Note that query params must be URL-encoded. Additional metadata about the result set, such as item count, earliest occuring_at date, and latest occurring_at date, are returned in the headers. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team for whom to return events "
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "type": "number",
              "description": "Which page of results to return "
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "type": "number",
              "description": "Number of results to return per page "
            },
            {
              "name": "filter_author",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events whose author matches the given term "
            },
            {
              "name": "filter_author_id",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events whose author has the given ID "
            },
            {
              "name": "filter_category",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events with the given category "
            },
            {
              "name": "filter_location",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events held in the given location "
            },
            {
              "name": "filter_date_from",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events after the given date. The value of the date range filter must be in ISO-8601 format, in UTC (YYYY-MM-DDTHH:mm:ss.sssZ) "
            },
            {
              "name": "filter_date_to",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events before the given date. The value of the date range filter must be in ISO-8601 format (see above) "
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events matching the given search term "
            },
            {
              "name": "sort",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Field to sort by. Sort can be ascending (:asc) or descending (:desc) by appending the modifier to the field (e.g. &quot;sort=name:desc&quot;) "
            },
            {
              "name": "attachAuthor",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Include first and last name of event creator "
            },
            {
              "name": "attachLocation",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Include the room name of event (uses the first room if event has multiple rooms) "
            },
            {
              "name": "attachSpaces",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Include an array of spaces in the event "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Events"
          ],
          "summary": "create an event with spaces, etc",
          "parameters": [
            {
              "in": "path",
              "name": "team",
              "required": true,
              "type": "integer"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "description": "Definition of the body for new event",
              "schema": {
                "$ref": "#/definitions/PostTeamsTeamEventsBody-legacy-vm3-routes"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "the event created"
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/events/metadata": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "Get metadata (item count, earliest occuring_at date, and latest occurring_at date) about events for a team ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team for whose events to fetch metadata "
            },
            {
              "name": "filter_author",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events whose author matches the given term "
            },
            {
              "name": "filter_author_id",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events whose author has the given ID "
            },
            {
              "name": "filter_category",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events with the given category "
            },
            {
              "name": "filter_location",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events held in the given location "
            },
            {
              "name": "filter_date_from",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events after the given date. The value of the date range filter must be in ISO-8601 format, in UTC (YYYY-MM-DDTHH:mm:ss.sssZ) "
            },
            {
              "name": "filter_date_to",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events before the given date. The value of the date range filter must be in ISO-8601 format (see above) "
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events matching the given search term "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/users/{user}/events": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "Get events for the matching user -- this means events that are owned by the user or the user&#39;s team, or that the user is a collaborator on. Note that query parameters must be URL-encoded. Additional metadata about the result set, such as item count, earliest start_time date, and latest start_time date, are returned in the metadata field of the response. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "user",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the user for whom to return events "
            },
            {
              "name": "page",
              "in": "query",
              "required": false,
              "type": "number",
              "description": "Which page of results to return "
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "type": "number",
              "description": "Number of results to return per page "
            },
            {
              "name": "filter_author",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events whose author matches the given term "
            },
            {
              "name": "filter_author_id",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events whose author has the given ID "
            },
            {
              "name": "filter_category",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events with the given category "
            },
            {
              "name": "filter_location",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events held in the given location "
            },
            {
              "name": "filter_date_from",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events after the given date. The value of the date range filter must be in ISO-8601 format, in UTC (YYYY-MM-DDTHH:mm:ss.sssZ) "
            },
            {
              "name": "filter_date_to",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events before the given date. The value of the date range filter must be in ISO-8601 format (see above) "
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events matching the given search term "
            },
            {
              "name": "sort",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Field to sort by. Sort can be ascending (:asc) or descending (:desc) by appending the modifier to the field (e.g. &quot;sort=name:desc&quot;) "
            },
            {
              "name": "attachAuthor",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Include first and last name of event creator "
            },
            {
              "name": "attachLocation",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Include the room name of event (uses the first room if event has multiple rooms) "
            },
            {
              "name": "attachSpaces",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Include an array of spaces in the event "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/users/{user}/events/metadata": {
        "get": {
          "tags": [
            "Events"
          ],
          "summary": "Get metadata, including item count, earliest occuring_at date, and latest occurring_at date, about events for a user. Events for a given user are defined as events that are owned by the user or their team, or that the user is a collaborator on. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "user",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the user for whose events to fetch metadata "
            },
            {
              "name": "filter_author",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events whose author matches the given term "
            },
            {
              "name": "filter_author_id",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events whose author has the given ID "
            },
            {
              "name": "filter_category",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events with the given category "
            },
            {
              "name": "filter_location",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events held in the given location "
            },
            {
              "name": "filter_date_from",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events after the given date. The value of the date range filter must be in ISO-8601 format, in UTC (YYYY-MM-DDTHH:mm:ss.sssZ) "
            },
            {
              "name": "filter_date_to",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events before the given date. The value of the date range filter must be in ISO-8601 format (see above) "
            },
            {
              "name": "search",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Return events matching the given search term "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/favorites/{favorite}": {
        "get": {
          "tags": [
            "Favorites"
          ],
          "summary": "Get a team object favorite ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of team whose favorites to fetch "
            },
            {
              "name": "favorite",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "of team object favorite to fetch "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        },
        "put": {
          "tags": [
            "Favorites"
          ],
          "summary": "Update a team object favorite ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of team for whom to update the favorite "
            },
            {
              "name": "favorite",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of favorite to update "
            },
            {
              "in": "body",
              "name": "PutTeamsTeamFavoritesFavoriteBody",
              "description": "Update a team object favorite ",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PutTeamsTeamFavoritesFavoriteBody-legacy-vm3-routes"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/user/{user}/favorites/{favorite}": {
        "delete": {
          "tags": [
            "Favorites"
          ],
          "summary": "Delete a user favorite ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "user",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of user for whom to delete the favorite "
            },
            {
              "name": "favorite",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of favorite to delete "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        },
        "get": {
          "tags": [
            "Favorites"
          ],
          "summary": "Get details on a user object favorite ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "user",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of user for whom to fetch the favorite "
            },
            {
              "name": "favorite",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of favorite to fetch "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        },
        "put": {
          "tags": [
            "Favorites"
          ],
          "summary": "Update a user favorite ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "user",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of user for whom to update the favorite "
            },
            {
              "name": "favorite",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the favorite to update "
            },
            {
              "in": "body",
              "name": "PutUserUserFavoritesFavoriteBody",
              "description": "Update a user favorite ",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PutUserUserFavoritesFavoriteBody-legacy-vm3-routes"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/team/{team}/favorites": {
        "get": {
          "tags": [
            "Favorites"
          ],
          "summary": "Get list of team favorites ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of team whose favorites to fetch "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/user/{user}/favorites": {
        "get": {
          "tags": [
            "Favorites"
          ],
          "summary": "List object favorites for the given user ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "user",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of user for whom to list favorites "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/favorites": {
        "post": {
          "tags": [
            "Favorites"
          ],
          "summary": "Create a team object favorite ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of team for whom to create the favorite "
            },
            {
              "in": "body",
              "name": "PostTeamsTeamFavoritesBody",
              "description": "Create a team object favorite ",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PostTeamsTeamFavoritesBody-legacy-vm3-routes"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/users/{user}/favorites": {
        "post": {
          "tags": [
            "Favorites"
          ],
          "summary": "Create a favorite for a particular user ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "user",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of user for whom to create the favorite "
            },
            {
              "in": "body",
              "name": "PostUsersUserFavoritesBody",
              "description": "Create a favorite for a particular user ",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PostUsersUserFavoritesBody-legacy-vm3-routes"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/events/{event}/elements/delete": {
        "delete": {
          "tags": [
            "Floor_Elements"
          ],
          "summary": "Delete floor elements, given a set of floor-element IDs to delete. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team that owns this event "
            },
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the event in which to delete floor elements "
            },
            {
              "name": "ids",
              "in": "query",
              "required": true,
              "type": "string",
              "description": "Comma-separated list of IDs of floor-elements to delete -- for example, T794,O14. "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/events/{event}/elements/{element}": {
        "delete": {
          "tags": [
            "Floor_Elements"
          ],
          "summary": "Delete a floor element, given an ID ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team that owns this event "
            },
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the event that contains the floor element "
            },
            {
              "name": "element",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "ID of the element to delete "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/events/{event}/elements": {
        "get": {
          "tags": [
            "Floor_Elements"
          ],
          "summary": "List all floor-elements in the given event ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team who owns the event "
            },
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the event in which to list floor elements "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Floor_Elements"
          ],
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team with this event "
            },
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the event in which to create floor elements "
            },
            {
              "in": "body",
              "name": "PostTeamsTeamEventsEventElementsBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PostTeamsTeamEventsEventElementsBody-legacy-vm3-routes"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        },
        "put": {
          "tags": [
            "Floor_Elements"
          ],
          "summary": "Update floor-elements in a given event. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team who owns the event "
            },
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the event containing the elements to update "
            },
            {
              "in": "body",
              "name": "PutTeamsTeamEventsEventElementsBody",
              "description": "Update floor-elements in a given event. ",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PutTeamsTeamEventsEventElementsBody-legacy-vm3-routes"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/events/{event}/spaces/{space}/elements": {
        "get": {
          "tags": [
            "Floor_Elements"
          ],
          "summary": "List floor-elements in a particular space within an event ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team that owns the event "
            },
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the event containing the space "
            },
            {
              "name": "space",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the space in which to fetch floor elements "
            },
            {
              "name": "custom_3d_data",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "return object_3d_model_id for which floor elements is custom 3d object "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/spaces/{spaceId}/elements": {
        "patch": {
          "tags": [
            "Floor_Elements"
          ],
          "summary": "Apply updates to floor elements based on individual floor element diffs. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "spaceId",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the space containing elements to update "
            },
            {
              "in": "body",
              "name": "PatchSpacesSpaceidElementsBody",
              "description": "Apply updates to floor elements based on individual floor element diffs. ",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PatchSpacesSpaceidElementsBody-legacy-vm3-routes"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/events/{event}/spaces/{space}": {
        "delete": {
          "tags": [
            "Spaces"
          ],
          "summary": "Delete the given space ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the event containing the space to delete "
            },
            {
              "name": "space",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the space to delete "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        },
        "put": {
          "tags": [
            "Spaces"
          ],
          "summary": "Update the space ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the event in which the space can be found "
            },
            {
              "name": "space",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the space to update "
            },
            {
              "in": "body",
              "name": "PutEventsEventSpacesSpaceBody",
              "description": "Update the space ",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PutEventsEventSpacesSpaceBody-legacy-vm3-routes"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/events/{event}/spaces": {
        "get": {
          "tags": [
            "Spaces"
          ],
          "summary": "Get a list of spaces for an event ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the event to list spaces for "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Spaces"
          ],
          "summary": "Create a new space in the given event ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "The ID of the event in which to create the space "
            },
            {
              "in": "body",
              "name": "PostEventsEventSpacesBody",
              "description": "Create a new space in the given event ",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PostEventsEventSpacesBody-legacy-vm3-routes"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        },
        "put": {
          "tags": [
            "Spaces"
          ],
          "summary": "Update spaces in bulk in a particular event. Note that this endpoint simply applies the provided updates to each space in turn -- there is no particular optimization done. Please see the &quot;Create spaces&quot; POST endpoint to see which fields are valid. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the event the spaces are in "
            },
            {
              "in": "body",
              "name": "PutEventsEventSpacesBody",
              "description": "Update spaces in bulk in a particular event. Note that this endpoint simply applies the provided updates to each space in turn -- there is no particular optimization done. Please see the &quot;Create spaces&quot; POST endpoint to see which fields are valid. ",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PutEventsEventSpacesBody-legacy-vm3-routes"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/spaces/{space}": {
        "get": {
          "tags": [
            "Spaces"
          ],
          "summary": "Get space details, optionally including an SVG snippet that can be used to render the bookable room floor background. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "space",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the space to fetch details for "
            },
            {
              "name": "include_svg",
              "in": "query",
              "required": true,
              "type": "string",
              "description": "If provided, include an SVG snippet rendering the bookable room floorplan for the space "
            },
            {
              "name": "accept",
              "in": "header",
              "required": false,
              "type": "string",
              "description": "Specify image/png to recieve an image response "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/events/{event}/spaces/{space}/clone": {
        "post": {
          "tags": [
            "Spaces"
          ],
          "summary": "Clones the given space, including all child data such as floor-elements, floor-element additional data such as 3D model associations, and floor-element groups. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "event",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the event containing the space "
            },
            {
              "name": "space",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the space to clone "
            },
            {
              "in": "body",
              "name": "PostEventsEventSpacesSpaceCloneBody",
              "description": "Clones the given space, including all child data such as floor-elements, floor-element additional data such as 3D model associations, and floor-element groups. ",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PostEventsEventSpacesSpaceCloneBody-legacy-vm3-routes"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}": {
        "get": {
          "tags": [
            "Teams"
          ],
          "summary": "Get a single team record ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team to fetch "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/bookable-rooms": {
        "get": {
          "tags": [
            "Teams"
          ],
          "summary": "List bookable rooms (including legacy floor plans and smart floor plans) that belong to the given team ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team "
            },
            {
              "name": "type",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Type of floorplan to return "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/buildings": {
        "get": {
          "tags": [
            "Teams"
          ],
          "summary": "List buildings that a team can view ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team "
            },
            {
              "name": "buildingsWithBookableRooms",
              "in": "query",
              "required": true,
              "type": "boolean",
              "description": "If provided, only return buildings that have bookable rooms "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/floors": {
        "get": {
          "tags": [
            "Teams"
          ],
          "summary": "List floors that the given team can view ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/settings": {
        "get": {
          "tags": [
            "Teams"
          ],
          "summary": "Fetch the team settings for a team ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/venues": {
        "get": {
          "tags": [
            "Teams"
          ],
          "summary": "List all the bookable rooms that a team has access to, including legacy floor plans and smart floor plans. NOTE: This route is only supported as long as an old version of the ST iPad app is supported. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team whose venues to list "
            },
            {
              "name": "type",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Type of floorplan to return "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/teams/{team}/properties": {
        "get": {
          "tags": [
            "Teams"
          ],
          "summary": "List all properties that the given team can view ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the team "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/users/me": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "If a user is currently logged in, return data about them, as in the example response. Otherwise, return HTTP 401. Note that if the user is not logged in via token authentication, then the user_token and partner_token fields will not be sent. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "user",
              "in": "query",
              "required": true,
              "type": "number",
              "description": "ID of the user "
            },
            {
              "name": "language",
              "in": "query",
              "required": true,
              "type": "string",
              "description": "ISO language code to set as the user&#39;s default "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "string"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/users/{user}/favorite-bookable-rooms": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "List the given user&#39;s &quot;favorite&quot; bookable rooms ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "user",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the user for whom to list favorites "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/legacyvm3/users/{user}/settings": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Fetch the current user&#39;s settings ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "user",
              "in": "path",
              "required": true,
              "type": "number",
              "description": "ID of the user "
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/data-legacy-vm3-routes"
              }
            }
          }
        }
      },
      "/4.0/assets/{asset_id}": {
        "get": {
          "tags": [
            "Assets"
          ],
          "summary": "get an asset by ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "asset_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "a body containing shared asset data"
            },
            "404": {
              "description": "the shared asset does not exist"
            }
          }
        },
        "delete": {
          "tags": [
            "Assets"
          ],
          "summary": "delete assets by ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "asset_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "shared asset deleted"
            },
            "404": {
              "description": "shared asset did not exist"
            }
          }
        }
      },
      "/4.0/properties/{property_id}/assets": {
        "get": {
          "tags": [
            "Assets"
          ],
          "summary": "Returns all assets for a given property ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/property_id-property-service"
            },
            {
              "name": "tags",
              "in": "query",
              "type": "string",
              "required": true,
              "description": "takes a comma separated list of tags to filter on"
            }
          ],
          "responses": {
            "200": {
              "description": "a body containing assets for that respective property ID"
            }
          }
        }
      },
      "/4.0/email-intake-settings/${email_address}": {
        "get": {
          "tags": [
            "Email_Intake_Settings"
          ],
          "summary": "Returns the email intake settings for the email address",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "email_address",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "a body containing email intake settings corresponding to the email address"
            }
          }
        }
      },
      "/4.0/email-intake-settings/validate/${email_address}": {
        "get": {
          "tags": [
            "Email_Intake_Settings"
          ],
          "summary": "Returns a boolean indicating if an email address is valid for the email settings",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "email_address",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "email_intake_settings_id",
              "in": "query",
              "type": "string",
              "required": false
            }
          ],
          "responses": {
            "200": {
              "description": "a body containing a boolean isEmailValid"
            }
          }
        }
      },
      "/4.0/properties": {
        "get": {
          "tags": [
            "Properties"
          ],
          "summary": "get all properties that the current user has access to",
          "description": "Gets a paginated list of all properties for which the requestor has\naccess based on the their roles and their team's roles. Identity\nis inferred from OAuth authorization header.\n",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/page_size-property-service"
            },
            {
              "$ref": "#/parameters/before-property-service"
            },
            {
              "$ref": "#/parameters/after-property-service"
            },
            {
              "name": "email_settings",
              "in": "query",
              "type": "boolean",
              "required": false,
              "description": "determines whether to include email settings in response"
            }
          ],
          "responses": {
            "200": {
              "description": "returns a list of properties"
            }
          }
        }
      },
      "/4.0/properties/{property_id}": {
        "get": {
          "tags": [
            "Properties"
          ],
          "summary": "get a property from a property ID",
          "parameters": [
            {
              "$ref": "#/parameters/property_id-property-service"
            },
            {
              "name": "email_settings",
              "in": "query",
              "type": "boolean",
              "required": false,
              "description": "determines whether to include email settings in response"
            },
            {
              "name": "lead_scoring",
              "in": "query",
              "type": "boolean",
              "required": false,
              "description": "Determines whether to include lead scoring information (settings + rules) in response"
            }
          ],
          "responses": {
            "200": {
              "description": "returns a property"
            }
          }
        }
      },
      "/4.0/properties/{property_id}/spaces": {
        "get": {
          "tags": [
            "Properties"
          ],
          "summary": "get a list of spaces from a property ID and event IDs",
          "parameters": [
            {
              "name": "property_id",
              "description": "property ID",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "event_ids",
              "description": "legacy event IDs",
              "in": "query",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "returns a list of spaces"
            }
          }
        }
      },
      "/4.0/properties/search": {
        "get": {
          "tags": [
            "Properties"
          ],
          "summary": "get(search) properties based on a search term",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "type": "boolean",
              "required": true,
              "description": "search made is based on q(search term)"
            }
          ],
          "responses": {
            "200": {
              "description": "returns matching properties"
            }
          }
        }
      },
      "/4.0/places/{place_source_id}/team-uploads": {
        "post": {
          "tags": [
            "team-uploads"
          ],
          "summary": "Insert team uploads",
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/postRequest-property-service"
              }
            },
            {
              "name": "place_source_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "return nothing"
            }
          }
        }
      },
      "/4.0/team-uploads/{id}": {
        "get": {
          "tags": [
            "team-uploads"
          ],
          "summary": "get team upload by id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "return team upload"
            }
          }
        },
        "patch": {
          "tags": [
            "team-uploads"
          ],
          "summary": "update name of team upload",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/patchRequest-property-service"
              }
            },
            {
              "name": "id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "return array of team upload by user id"
            }
          }
        },
        "delete": {
          "tags": [
            "team-uploads"
          ],
          "summary": "delete team upload by id",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "return nothing"
            }
          }
        }
      },
      "/4.0/team-uploads/teams/{team_id}": {
        "get": {
          "tags": [
            "team-uploads"
          ],
          "summary": "get team upload by team id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "team_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "return array of team upload by team id"
            }
          }
        }
      },
      "/4.0/team-uploads/users/{user_id}": {
        "get": {
          "tags": [
            "team-uploads"
          ],
          "summary": "get team upload by user id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "user_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "return array of team upload by user id"
            }
          }
        }
      },
      "/4.0/buildings/{building_id}": {
        "get": {
          "tags": [
            "Buildings"
          ],
          "summary": "get a building by ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/building_id-property-service"
            }
          ],
          "responses": {
            "200": {
              "description": "a body containing building data"
            },
            "404": {
              "description": "the building does not exist"
            }
          }
        }
      },
      "/4.0/buildings": {
        "get": {
          "tags": [
            "Buildings"
          ],
          "summary": "get all buildings that the current user or team has access to",
          "description": "Gets a paginated list of all buildings for which the requestor has\naccess based on the their roles and their team\"s roles. Identity\nis inferred from OAuth authorization header. If a team_id is sent\nas a query param, the buildings returned will be based on the team_id\n",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/page_size-property-service"
            },
            {
              "$ref": "#/parameters/before-property-service"
            },
            {
              "$ref": "#/parameters/after-property-service"
            }
          ],
          "responses": {
            "200": {
              "description": "returns a list of buildings"
            }
          }
        }
      },
      "/4.0/properties/{property_id}/buildings": {
        "get": {
          "tags": [
            "Buildings"
          ],
          "summary": "get all buildings by a given property_id",
          "parameters": [
            {
              "$ref": "#/parameters/property_id-property-service"
            }
          ],
          "responses": {
            "200": {
              "description": "returns a list of buildings for a given property"
            }
          }
        }
      },
      "/4.0/floors/{floor_id}": {
        "get": {
          "tags": [
            "Floors"
          ],
          "summary": "get a floor by ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/floor_id-property-service"
            }
          ],
          "responses": {
            "200": {
              "description": "a body containing floor data"
            },
            "404": {
              "description": "the floor does not exist"
            }
          }
        }
      },
      "/4.0/floors": {
        "get": {
          "tags": [
            "Floors"
          ],
          "summary": "get all floors that the current user or team has access to",
          "description": "Gets a paginated list of all floors for which the requestor has\naccess based on the their roles and their team\"s roles. Identity\nis inferred from OAuth authorization header. If a team_id is sent\nas a query param, the buildings returned will be based on the team_id\n",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/page_size-property-service"
            },
            {
              "$ref": "#/parameters/before-property-service"
            },
            {
              "$ref": "#/parameters/after-property-service"
            }
          ],
          "responses": {
            "200": {
              "description": "returns a list of floors"
            }
          }
        }
      },
      "/4.0/buildings/{building_id}/floors": {
        "get": {
          "tags": [
            "Buildings"
          ],
          "summary": "Returns all floors for a given building ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/building_id-property-service"
            }
          ],
          "responses": {
            "200": {
              "description": "a body containing floors for that respective building ID"
            }
          }
        }
      },
      "/4.0/guest-room-reservations/{guest_room_reservation_id}": {
        "get": {
          "tags": [
            "Guest_Room_Reservations"
          ],
          "summary": "get a guest room reservation by ID",
          "description": "get a guest room reservation by ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "guest_room_reservation_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "success"
            },
            "404": {
              "description": "Not found error"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        },
        "delete": {
          "tags": [
            "Guest_Room_Reservations"
          ],
          "summary": "delete a guest room reservation by ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "guest_room_reservation_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "guest room reservation deleted"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/4.0/bookings/{booking_id}/guest-room-reservations": {
        "delete": {
          "tags": [
            "Guest_Room_Reservations"
          ],
          "summary": "delete guest room reservations by booking ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "booking_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "guest room reservation deleted"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/4.0/guest-room-types/guest-room-reservations": {
        "get": {
          "tags": [
            "Guest_Rooms",
            "Guest_Room_Reservations"
          ],
          "summary": "Retrieves an array of guest room reservations for specified guest room types",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "guest_room_type_ids",
              "in": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "start_date",
              "in": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "end_date",
              "in": "query",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "400": {
              "description": "Bad request"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/4.0/guest-room-types/{guest_room_type_id}": {
        "get": {
          "tags": [
            "Guest_Rooms"
          ],
          "summary": "Retrieves the specified guest room types",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "guest_room_type_id",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "404": {
              "description": "Not found error"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/4.0/properties/{property_id}/guest-room-types": {
        "get": {
          "tags": [
            "Guest_Rooms"
          ],
          "summary": "Retrieves all configurable guest room types for the property",
          "description": "Retrieves all guest room type for the property, including archived rows.\n\nThis endpoint is initially made for use in enterprise-manager to customize the guest\nroom types used for bookings. This returns archived rows so they can be filtered as\nneeded by the client.\n",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "property_id",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "401": {
              "description": "Unauthorized"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/4.0/properties/{property_id}/guest-room-types/availability": {
        "get": {
          "tags": [
            "Reservations"
          ],
          "summary": "get all guest room type's availability on a property",
          "description": "get room availability for all guest room types by date on a property",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "property_id",
              "in": "path",
              "required": true,
              "type": "string"
            },
            {
              "name": "start_date",
              "in": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "end_date",
              "in": "query",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "400": {
              "description": "Bad request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Not found error"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/4.0/guest-room-types/{guest_room_type_id}/availability": {
        "get": {
          "tags": [
            "Reservations"
          ],
          "summary": "get a guest room type's availability by ID",
          "description": "get a room's availability by ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "guest_room_type_id",
              "in": "path",
              "required": true,
              "type": "string"
            },
            {
              "name": "start_date",
              "in": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "end_date",
              "in": "query",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "400": {
              "description": "Bad request"
            },
            "404": {
              "description": "Not found error"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/4.0/guest-room-types/availability": {
        "get": {
          "tags": [
            "Reservations"
          ],
          "summary": "get guest room types' availability by IDs",
          "description": "get guest room types' availability by IDs",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "guest_room_type_ids",
              "description": "array of guest room type ids",
              "schema": {
                "type": "object",
                "required": [
                  "guest_room_type_ids"
                ],
                "properties": {
                  "guest_room_type_ids": {
                    "type": "array"
                  }
                }
              }
            },
            {
              "name": "start_date",
              "in": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "end_date",
              "in": "query",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "400": {
              "description": "Bad request"
            },
            "404": {
              "description": "Not found error"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/4.0/reservations/{reservation_id}": {
        "get": {
          "tags": [
            "Reservations"
          ],
          "summary": "get a reservation by ID",
          "description": "get a reservation by ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "reservation_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "success"
            }
          }
        },
        "delete": {
          "tags": [
            "Reservations"
          ],
          "summary": "delete a reservation by ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "reservation_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "reservation deleted"
            },
            "404": {
              "description": "reservation did not exist"
            }
          }
        }
      },
      "/4.0/bookings/{booking_id}/reservations": {
        "delete": {
          "tags": [
            "Reservations"
          ],
          "summary": "delete reservations by booking ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "booking_id",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "reservation deleted"
            },
            "500": {
              "description": "internal server error"
            }
          }
        }
      },
      "/4.0/properties/{property_id}/rooms": {
        "get": {
          "tags": [
            "Rooms"
          ],
          "summary": "Returns all rooms for a given property ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/property_id-property-service"
            }
          ],
          "responses": {
            "200": {
              "description": "a body containing rooms for that respective property ID"
            }
          }
        }
      },
      "/4.0/rooms/reservations": {
        "get": {
          "tags": [
            "Rooms",
            "Reservations"
          ],
          "summary": "Retrieves an array of room reservations for specified room ids",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "room_ids",
              "in": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "start_date",
              "in": "query",
              "required": true,
              "type": "string"
            },
            {
              "name": "end_date",
              "in": "query",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "400": {
              "description": "Bad request"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/4.0/rooms/{room_id}": {
        "get": {
          "tags": [
            "Rooms"
          ],
          "summary": "get a room by ID",
          "description": "get a room by ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/room_id-property-service"
            },
            {
              "$ref": "#/parameters/archived-property-service"
            }
          ],
          "responses": {
            "200": {
              "description": "success"
            }
          }
        }
      },
      "/4.0/rooms/{room_id}/availablity/": {
        "get": {
          "tags": [
            "Rooms"
          ],
          "summary": "get a room's availability by ID",
          "description": "get a room's availability by ID",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/room_id-property-service"
            },
            {
              "$ref": "#/parameters/start_date-property-service"
            },
            {
              "$ref": "#/parameters/end_date-property-service"
            }
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "400": {
              "description": "Bad request"
            }
          }
        }
      },
      "/4.0/rooms/": {
        "get": {
          "tags": [
            "Rooms"
          ],
          "summary": "get all rooms that the current user has access to",
          "description": "Gets a paginated list of all rooms for which the requestor has\naccess based on the their roles and their team\"s roles. Identity\nis inferred from OAuth authorization header.\n",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/page_size-property-service"
            },
            {
              "$ref": "#/parameters/before-property-service"
            },
            {
              "$ref": "#/parameters/after-property-service"
            },
            {
              "$ref": "#/parameters/room_ids-property-service"
            }
          ],
          "responses": {
            "200": {
              "description": "returns a list of rooms"
            }
          }
        }
      },
      "/4.0/proposals/{proposalId}/analytics": {
        "get": {
          "tags": [
            "Proposals",
            "Analytics"
          ],
          "summary": "Returns analytics data for given proposalId.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "proposalId",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/analyticsSchema-proposal-service"
                }
              }
            },
            "403": {
              "description": "Forbidden"
            },
            "409": {
              "description": "Proposal doesn't exist"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/4.0/emails": {
        "post": {
          "tags": [
            "Emails"
          ],
          "summary": "Creates a lead from an email",
          "parameters": [
            {
              "name": "body",
              "required": true,
              "in": "body",
              "schema": {
                "$ref": "#/definitions/emailSchema-proposal-service"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Newly created lead",
              "schema": {
                "$ref": "#/definitions/proposalSchema-proposal-service"
              }
            },
            "400": {
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/4.0/proposals": {
        "get": {
          "tags": [
            "Proposals"
          ],
          "summary": "Returns all proposals that are not archived",
          "parameters": [
            {
              "name": "propertyId",
              "required": false,
              "in": "query",
              "type": "string"
            },
            {
              "name": "eventId",
              "required": false,
              "in": "query",
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/proposalSchemaComplete-proposal-service"
                }
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "post": {
          "tags": [
            "Proposals"
          ],
          "summary": "Creates a proposal",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/proposalSchema-proposal-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK. Returns newly created proposal",
              "schema": {
                "$ref": "#/definitions/proposalSchemaComplete-proposal-service"
              }
            },
            "400": {
              "description": "Bad Request"
            },
            "403": {
              "description": "Forbidden"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/4.0/proposals/count": {
        "get": {
          "tags": [
            "Proposals"
          ],
          "summary": "Returns the count of proposals matching the provided query.",
          "parameters": [
            {
              "name": "propertyId",
              "required": false,
              "in": "query",
              "type": "string"
            },
            {
              "name": "eventId",
              "required": false,
              "in": "query",
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "type": "integer",
                "example": 100
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/4.0/proposals/{proposalId}": {
        "get": {
          "tags": [
            "Proposals"
          ],
          "summary": "Returns not archived proposal data for given proposal.",
          "parameters": [
            {
              "name": "proposalId",
              "required": true,
              "in": "path",
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/proposalSchemaComplete-proposal-service"
              }
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "put": {
          "tags": [
            "Proposals"
          ],
          "summary": "Updates given proposal",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "proposalId",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "body",
              "in": "body",
              "description": "Entire proposal object with updated fields must be provided",
              "schema": {
                "$ref": "#/definitions/proposalSchemaComplete-proposal-service"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content"
            },
            "400": {
              "description": "Bad Request"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "delete": {
          "tags": [
            "Proposals"
          ],
          "summary": "Deletes given proposal",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "proposalId",
              "in": "path",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "No Content"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "patch": {
          "tags": [
            "Proposals"
          ],
          "summary": "Updates given proposal",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "proposalId",
              "in": "path",
              "type": "string",
              "required": true
            },
            {
              "name": "body",
              "in": "body",
              "description": "An object containing updated proposal fields must be provided",
              "schema": {
                "$ref": "#/definitions/proposalSchemaComplete-proposal-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/proposalSchemaComplete-proposal-service"
              }
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/4.0/proposal-templates": {
        "get": {
          "tags": [
            "proposal-templates"
          ],
          "summary": "Returns all templates that are not archived",
          "parameters": [
            {
              "name": "propertyId",
              "required": false,
              "in": "query",
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/templateSchemaComplete-proposal-service"
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/4.0/v1/integrations/{sncType}": {
        "post": {
          "tags": [
            "Sales and Catering Integration"
          ],
          "summary": "Accepts data about external events and persists them",
          "description": "Parses the body of the request containing data about external\nevents and creates matching events on the ST platform.\n",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/sncType-snc-integration-service"
            },
            {
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/integrationsRequest-snc-integration-service"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Integration request successful."
            }
          }
        }
      },
      "/4.0/snc-type/{type_id}": {
        "get": {
          "tags": [
            "SNC Types"
          ],
          "summary": "get an SNC Type by an ID",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "$ref": "#/parameters/type_id-snc-integration-service"
            }
          ],
          "responses": {
            "200": {
              "description": "an object representing an SNC Type object."
            },
            "404": {
              "description": "the SNC Type does not exist"
            }
          }
        }
      },
      "/4.0/snc-type": {
        "get": {
          "tags": [
            "SNC Types"
          ],
          "summary": "Returns an array of all SNC Types available.",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "an array of objects representing SNC types."
            }
          }
        }
      }
    }
  }